
Keypad_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003118  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080032a8  080032a8  000042a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003320  08003320  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003320  08003320  00004320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003328  08003328  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003328  08003328  00004328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800332c  0800332c  0000432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003330  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000170  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004441  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011b5  00000000  00000000  000094d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004a8  00000000  00000000  0000a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000350  00000000  00000000  0000ab38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6fd  00000000  00000000  0000ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005e92  00000000  00000000  00025585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000979f8  00000000  00000000  0002b417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c2e0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001838  00000000  00000000  000c2e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000c468c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003290 	.word	0x08003290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003290 	.word	0x08003290

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <read_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char read_keypad (void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //Pull the (GPIOA, GPIO_PIN_7)low
 80002c2:	2200      	movs	r2, #0
 80002c4:	2180      	movs	r1, #128	@ 0x80
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ca:	f000 fe2f 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 80002ce:	2201      	movs	r2, #1
 80002d0:	2140      	movs	r1, #64	@ 0x40
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d6:	f000 fe29 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 80002da:	2201      	movs	r2, #1
 80002dc:	2120      	movs	r1, #32
 80002de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e2:	f000 fe23 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 80002e6:	2201      	movs	r2, #1
 80002e8:	2110      	movs	r1, #16
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ee:	f000 fe1d 	bl	8000f2c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)))  // if the Col 1 is low
 80002f2:	2108      	movs	r1, #8
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f000 fe00 	bl	8000efc <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d10a      	bne.n	8000318 <read_keypad+0x5a>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000302:	bf00      	nop
 8000304:	2108      	movs	r1, #8
 8000306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030a:	f000 fdf7 	bl	8000efc <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f7      	beq.n	8000304 <read_keypad+0x46>
		return '1';
 8000314:	2331      	movs	r3, #49	@ 0x31
 8000316:	e165      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000318:	2104      	movs	r1, #4
 800031a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031e:	f000 fded 	bl	8000efc <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d10a      	bne.n	800033e <read_keypad+0x80>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000328:	bf00      	nop
 800032a:	2108      	movs	r1, #8
 800032c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000330:	f000 fde4 	bl	8000efc <HAL_GPIO_ReadPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f7      	beq.n	800032a <read_keypad+0x6c>
		return '2';
 800033a:	2332      	movs	r3, #50	@ 0x32
 800033c:	e152      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 800033e:	2102      	movs	r1, #2
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fdda 	bl	8000efc <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d10a      	bne.n	8000364 <read_keypad+0xa6>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 800034e:	bf00      	nop
 8000350:	2102      	movs	r1, #2
 8000352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000356:	f000 fdd1 	bl	8000efc <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0f7      	beq.n	8000350 <read_keypad+0x92>
		return '3';
 8000360:	2333      	movs	r3, #51	@ 0x33
 8000362:	e13f      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 8000364:	2101      	movs	r1, #1
 8000366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800036a:	f000 fdc7 	bl	8000efc <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d10a      	bne.n	800038a <read_keypad+0xcc>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)));   // wait till the button is pressed
 8000374:	bf00      	nop
 8000376:	2101      	movs	r1, #1
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f000 fdbe 	bl	8000efc <HAL_GPIO_ReadPin>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0f7      	beq.n	8000376 <read_keypad+0xb8>
		return 'A';
 8000386:	2341      	movs	r3, #65	@ 0x41
 8000388:	e12c      	b.n	80005e4 <read_keypad+0x326>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 800038a:	2201      	movs	r2, #1
 800038c:	2180      	movs	r1, #128	@ 0x80
 800038e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000392:	f000 fdcb 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  // Pull the PA6 High
 8000396:	2200      	movs	r2, #0
 8000398:	2140      	movs	r1, #64	@ 0x40
 800039a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800039e:	f000 fdc5 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 80003a2:	2201      	movs	r2, #1
 80003a4:	2120      	movs	r1, #32
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f000 fdbf 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 80003ae:	2201      	movs	r2, #1
 80003b0:	2110      	movs	r1, #16
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b6:	f000 fdb9 	bl	8000f2c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 80003ba:	2108      	movs	r1, #8
 80003bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c0:	f000 fd9c 	bl	8000efc <HAL_GPIO_ReadPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d10a      	bne.n	80003e0 <read_keypad+0x122>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 80003ca:	bf00      	nop
 80003cc:	2108      	movs	r1, #8
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d2:	f000 fd93 	bl	8000efc <HAL_GPIO_ReadPin>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f7      	beq.n	80003cc <read_keypad+0x10e>
		return '4';
 80003dc:	2334      	movs	r3, #52	@ 0x34
 80003de:	e101      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 80003e0:	2104      	movs	r1, #4
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e6:	f000 fd89 	bl	8000efc <HAL_GPIO_ReadPin>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d10a      	bne.n	8000406 <read_keypad+0x148>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 80003f0:	bf00      	nop
 80003f2:	2104      	movs	r1, #4
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f8:	f000 fd80 	bl	8000efc <HAL_GPIO_ReadPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f7      	beq.n	80003f2 <read_keypad+0x134>
		return '5';
 8000402:	2335      	movs	r3, #53	@ 0x35
 8000404:	e0ee      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000406:	2102      	movs	r1, #2
 8000408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040c:	f000 fd76 	bl	8000efc <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d10a      	bne.n	800042c <read_keypad+0x16e>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000416:	bf00      	nop
 8000418:	2102      	movs	r1, #2
 800041a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041e:	f000 fd6d 	bl	8000efc <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0f7      	beq.n	8000418 <read_keypad+0x15a>
		return '6';
 8000428:	2336      	movs	r3, #54	@ 0x36
 800042a:	e0db      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 800042c:	2101      	movs	r1, #1
 800042e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000432:	f000 fd63 	bl	8000efc <HAL_GPIO_ReadPin>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d10a      	bne.n	8000452 <read_keypad+0x194>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 800043c:	bf00      	nop
 800043e:	2108      	movs	r1, #8
 8000440:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000444:	f000 fd5a 	bl	8000efc <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f7      	beq.n	800043e <read_keypad+0x180>
		return 'B';
 800044e:	2342      	movs	r3, #66	@ 0x42
 8000450:	e0c8      	b.n	80005e4 <read_keypad+0x326>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 8000452:	2201      	movs	r2, #1
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800045a:	f000 fd67 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	@ 0x40
 8000462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000466:	f000 fd61 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Pull the PA5 High
 800046a:	2200      	movs	r2, #0
 800046c:	2120      	movs	r1, #32
 800046e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000472:	f000 fd5b 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000476:	2201      	movs	r2, #1
 8000478:	2110      	movs	r1, #16
 800047a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047e:	f000 fd55 	bl	8000f2c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 8000482:	2108      	movs	r1, #8
 8000484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000488:	f000 fd38 	bl	8000efc <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d10a      	bne.n	80004a8 <read_keypad+0x1ea>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000492:	bf00      	nop
 8000494:	2108      	movs	r1, #8
 8000496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049a:	f000 fd2f 	bl	8000efc <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f7      	beq.n	8000494 <read_keypad+0x1d6>
		return '7';
 80004a4:	2337      	movs	r3, #55	@ 0x37
 80004a6:	e09d      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 80004a8:	2104      	movs	r1, #4
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ae:	f000 fd25 	bl	8000efc <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10a      	bne.n	80004ce <read_keypad+0x210>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 80004b8:	bf00      	nop
 80004ba:	2104      	movs	r1, #4
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c0:	f000 fd1c 	bl	8000efc <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f7      	beq.n	80004ba <read_keypad+0x1fc>
		return '8';
 80004ca:	2338      	movs	r3, #56	@ 0x38
 80004cc:	e08a      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 80004ce:	2102      	movs	r1, #2
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d4:	f000 fd12 	bl	8000efc <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10a      	bne.n	80004f4 <read_keypad+0x236>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 80004de:	bf00      	nop
 80004e0:	2102      	movs	r1, #2
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f000 fd09 	bl	8000efc <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0f7      	beq.n	80004e0 <read_keypad+0x222>
		return '9';
 80004f0:	2339      	movs	r3, #57	@ 0x39
 80004f2:	e077      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 80004f4:	2101      	movs	r1, #1
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 fcff 	bl	8000efc <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d10a      	bne.n	800051a <read_keypad+0x25c>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)));   // wait till the button is pressed
 8000504:	bf00      	nop
 8000506:	2101      	movs	r1, #1
 8000508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050c:	f000 fcf6 	bl	8000efc <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f7      	beq.n	8000506 <read_keypad+0x248>
		return 'C';
 8000516:	2343      	movs	r3, #67	@ 0x43
 8000518:	e064      	b.n	80005e4 <read_keypad+0x326>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 800051a:	2201      	movs	r2, #1
 800051c:	2180      	movs	r1, #128	@ 0x80
 800051e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000522:	f000 fd03 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 8000526:	2201      	movs	r2, #1
 8000528:	2140      	movs	r1, #64	@ 0x40
 800052a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052e:	f000 fcfd 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 8000532:	2201      	movs	r2, #1
 8000534:	2120      	movs	r1, #32
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f000 fcf7 	bl	8000f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Pull the PA4 High
 800053e:	2200      	movs	r2, #0
 8000540:	2110      	movs	r1, #16
 8000542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000546:	f000 fcf1 	bl	8000f2c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 800054a:	2108      	movs	r1, #8
 800054c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000550:	f000 fcd4 	bl	8000efc <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d10a      	bne.n	8000570 <read_keypad+0x2b2>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 800055a:	bf00      	nop
 800055c:	2108      	movs	r1, #8
 800055e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000562:	f000 fccb 	bl	8000efc <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f7      	beq.n	800055c <read_keypad+0x29e>
		return '*';
 800056c:	232a      	movs	r3, #42	@ 0x2a
 800056e:	e039      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000570:	2104      	movs	r1, #4
 8000572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000576:	f000 fcc1 	bl	8000efc <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d10a      	bne.n	8000596 <read_keypad+0x2d8>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 8000580:	bf00      	nop
 8000582:	2104      	movs	r1, #4
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f000 fcb8 	bl	8000efc <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0f7      	beq.n	8000582 <read_keypad+0x2c4>
		return '0';
 8000592:	2330      	movs	r3, #48	@ 0x30
 8000594:	e026      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000596:	2102      	movs	r1, #2
 8000598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059c:	f000 fcae 	bl	8000efc <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10a      	bne.n	80005bc <read_keypad+0x2fe>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 80005a6:	bf00      	nop
 80005a8:	2102      	movs	r1, #2
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ae:	f000 fca5 	bl	8000efc <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f7      	beq.n	80005a8 <read_keypad+0x2ea>
		return '#';
 80005b8:	2323      	movs	r3, #35	@ 0x23
 80005ba:	e013      	b.n	80005e4 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 80005bc:	2101      	movs	r1, #1
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f000 fc9b 	bl	8000efc <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10a      	bne.n	80005e2 <read_keypad+0x324>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 80005cc:	bf00      	nop
 80005ce:	2108      	movs	r1, #8
 80005d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d4:	f000 fc92 	bl	8000efc <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f7      	beq.n	80005ce <read_keypad+0x310>
		return 'D';
 80005de:	2344      	movs	r3, #68	@ 0x44
 80005e0:	e000      	b.n	80005e4 <read_keypad+0x326>
	}

	return 0x01;  // /if nothing is pressed
 80005e2:	2301      	movs	r3, #1

}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  /* Implement your write code here. This is
     used by puts and printf for example */
  int i=0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	e009      	b.n	8000612 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	60ba      	str	r2, [r7, #8]
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe32 	bl	8000270 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	dbf1      	blt.n	80005fe <_write+0x16>
  return len;
 800061a:	687b      	ldr	r3, [r7, #4]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 f9a9 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f813 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f84d 	bl	80006d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Start Keypad_Module\n");
 8000636:	4807      	ldr	r0, [pc, #28]	@ (8000654 <main+0x30>)
 8000638:	f001 ffc8 	bl	80025cc <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char key = read_keypad();
 800063c:	f7ff fe3f 	bl	80002be <read_keypad>
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
	  	if (key!=0x01)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d0f8      	beq.n	800063c <main+0x18>
	  		  {
	  			printf(key);
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4618      	mov	r0, r3
 800064e:	f001 ff55 	bl	80024fc <iprintf>
  {
 8000652:	e7f3      	b.n	800063c <main+0x18>
 8000654:	080032a8 	.word	0x080032a8

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	@ 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 ffb8 	bl	80025dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fc64 	bl	8000f5c <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800069a:	f000 f855 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fc8e 	bl	8001fd8 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006c2:	f000 f841 	bl	8000748 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3740      	adds	r7, #64	@ 0x40
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_GPIO_Init+0x74>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <MX_GPIO_Init+0x74>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ee:	6153      	str	r3, [r2, #20]
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_GPIO_Init+0x74>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	21f0      	movs	r1, #240	@ 0xf0
 8000700:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000704:	f000 fc12 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000708:	230f      	movs	r3, #15
 800070a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000710:	2301      	movs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071c:	f000 fa7c 	bl	8000c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000720:	23f0      	movs	r3, #240	@ 0xf0
 8000722:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000738:	f000 fa6e 	bl	8000c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_MspInit+0x44>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a0e      	ldr	r2, [pc, #56]	@ (8000798 <HAL_MspInit+0x44>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <HAL_MspInit+0x44>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a08      	ldr	r2, [pc, #32]	@ (8000798 <HAL_MspInit+0x44>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <NMI_Handler+0x4>

080007a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f2:	f000 f90b 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e00a      	b.n	8000822 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800080c:	f3af 8000 	nop.w
 8000810:	4601      	mov	r1, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1c5a      	adds	r2, r3, #1
 8000816:	60ba      	str	r2, [r7, #8]
 8000818:	b2ca      	uxtb	r2, r1
 800081a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3301      	adds	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbf0      	blt.n	800080c <_read+0x12>
  }

  return len;
 800082a:	687b      	ldr	r3, [r7, #4]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800085c:	605a      	str	r2, [r3, #4]
  return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <_isatty>:

int _isatty(int file)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000874:	2301      	movs	r3, #1
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f001 fe8e 	bl	80025ec <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20003000 	.word	0x20003000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000084 	.word	0x20000084
 8000904:	200001d8 	.word	0x200001d8

08000908 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f001 fe4d 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095e:	f7ff fe61 	bl	8000624 <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000964:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000970:	08003330 	.word	0x08003330
  ldr r2, =_sbss
 8000974:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000978:	200001d8 	.word	0x200001d8

0800097c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_2_IRQHandler>
	...

08000980 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_Init+0x28>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <HAL_Init+0x28>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f90d 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff feda 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f917 	bl	8000bfe <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009e8:	f000 f8ed 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000088 	.word	0x20000088

08000a34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000088 	.word	0x20000088

08000a4c <__NVIC_SetPriorityGrouping>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_SetPriority>:
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff47 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff5c 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ffb0 	bl	8000b6c <SysTick_Config>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c26:	e14e      	b.n	8000ec6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8140 	beq.w	8000ec0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d005      	beq.n	8000c58 <HAL_GPIO_Init+0x40>
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d130      	bne.n	8000cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	2203      	movs	r2, #3
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8e:	2201      	movs	r2, #1
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	091b      	lsrs	r3, r3, #4
 8000ca4:	f003 0201 	and.w	r2, r3, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d017      	beq.n	8000cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d123      	bne.n	8000d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	691a      	ldr	r2, [r3, #16]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	6939      	ldr	r1, [r7, #16]
 8000d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	2203      	movs	r2, #3
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0203 	and.w	r2, r3, #3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 809a 	beq.w	8000ec0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8c:	4b55      	ldr	r3, [pc, #340]	@ (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a54      	ldr	r2, [pc, #336]	@ (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b52      	ldr	r3, [pc, #328]	@ (8000ee4 <HAL_GPIO_Init+0x2cc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da4:	4a50      	ldr	r2, [pc, #320]	@ (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	3302      	adds	r3, #2
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000dce:	d013      	beq.n	8000df8 <HAL_GPIO_Init+0x1e0>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a46      	ldr	r2, [pc, #280]	@ (8000eec <HAL_GPIO_Init+0x2d4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d00d      	beq.n	8000df4 <HAL_GPIO_Init+0x1dc>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a45      	ldr	r2, [pc, #276]	@ (8000ef0 <HAL_GPIO_Init+0x2d8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d007      	beq.n	8000df0 <HAL_GPIO_Init+0x1d8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a44      	ldr	r2, [pc, #272]	@ (8000ef4 <HAL_GPIO_Init+0x2dc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d101      	bne.n	8000dec <HAL_GPIO_Init+0x1d4>
 8000de8:	2303      	movs	r3, #3
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000dec:	2305      	movs	r3, #5
 8000dee:	e004      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000df0:	2302      	movs	r3, #2
 8000df2:	e002      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <HAL_GPIO_Init+0x1e2>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	f002 0203 	and.w	r2, r2, #3
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	4093      	lsls	r3, r2
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e0a:	4937      	ldr	r1, [pc, #220]	@ (8000ee8 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e18:	4b37      	ldr	r3, [pc, #220]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e66:	4a24      	ldr	r2, [pc, #144]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e90:	4a19      	ldr	r2, [pc, #100]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <HAL_GPIO_Init+0x2e0>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f aea9 	bne.w	8000c28 <HAL_GPIO_Init+0x10>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010000 	.word	0x40010000
 8000eec:	48000400 	.word	0x48000400
 8000ef0:	48000800 	.word	0x48000800
 8000ef4:	48000c00 	.word	0x48000c00
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d102      	bne.n	8000f82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f001 b823 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 817d 	beq.w	8001292 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f98:	4bbc      	ldr	r3, [pc, #752]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00c      	beq.n	8000fbe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa4:	4bb9      	ldr	r3, [pc, #740]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d15c      	bne.n	800106a <HAL_RCC_OscConfig+0x10e>
 8000fb0:	4bb6      	ldr	r3, [pc, #728]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fbc:	d155      	bne.n	800106a <HAL_RCC_OscConfig+0x10e>
 8000fbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fc2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000fca:	fa93 f3a3 	rbit	r3, r3
 8000fce:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000fd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	fab3 f383 	clz	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	095b      	lsrs	r3, r3, #5
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d102      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x94>
 8000fea:	4ba8      	ldr	r3, [pc, #672]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	e015      	b.n	800101c <HAL_RCC_OscConfig+0xc0>
 8000ff0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001004:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001008:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800100c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001018:	4b9c      	ldr	r3, [pc, #624]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001020:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001024:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001028:	fa92 f2a2 	rbit	r2, r2
 800102c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001030:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	f042 0220 	orr.w	r2, r2, #32
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	f002 021f 	and.w	r2, r2, #31
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 811f 	beq.w	8001290 <HAL_RCC_OscConfig+0x334>
 8001052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001056:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 8116 	bne.w	8001290 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f000 bfaf 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800106e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x12e>
 800107c:	4b83      	ldr	r3, [pc, #524]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a82      	ldr	r2, [pc, #520]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e036      	b.n	80010f8 <HAL_RCC_OscConfig+0x19c>
 800108a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800108e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d10c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x158>
 800109a:	4b7c      	ldr	r3, [pc, #496]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a7b      	ldr	r2, [pc, #492]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b79      	ldr	r3, [pc, #484]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a78      	ldr	r2, [pc, #480]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e021      	b.n	80010f8 <HAL_RCC_OscConfig+0x19c>
 80010b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x184>
 80010c6:	4b71      	ldr	r3, [pc, #452]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a70      	ldr	r2, [pc, #448]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b6e      	ldr	r3, [pc, #440]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a6d      	ldr	r2, [pc, #436]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x19c>
 80010e0:	4b6a      	ldr	r3, [pc, #424]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a69      	ldr	r2, [pc, #420]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b67      	ldr	r3, [pc, #412]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a66      	ldr	r2, [pc, #408]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010f6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010f8:	4b64      	ldr	r3, [pc, #400]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 80010fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fc:	f023 020f 	bic.w	r2, r3, #15
 8001100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	495f      	ldr	r1, [pc, #380]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 800110e:	4313      	orrs	r3, r2
 8001110:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d059      	beq.n	80011d6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fc87 	bl	8000a34 <HAL_GetTick>
 8001126:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e00a      	b.n	8001142 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fc82 	bl	8000a34 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	@ 0x64
 800113a:	d902      	bls.n	8001142 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	f000 bf43 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001142:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001146:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001156:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	b2db      	uxtb	r3, r3
 8001160:	095b      	lsrs	r3, r3, #5
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <HAL_RCC_OscConfig+0x218>
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	e015      	b.n	80011a0 <HAL_RCC_OscConfig+0x244>
 8001174:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001178:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001188:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800118c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001190:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800119c:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80011a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80011ac:	fa92 f2a2 	rbit	r2, r2
 80011b0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80011b4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80011b8:	fab2 f282 	clz	r2, r2
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	f002 021f 	and.w	r2, r2, #31
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ab      	beq.n	800112c <HAL_RCC_OscConfig+0x1d0>
 80011d4:	e05d      	b.n	8001292 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fc2d 	bl	8000a34 <HAL_GetTick>
 80011da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fc28 	bl	8000a34 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	@ 0x64
 80011ee:	d902      	bls.n	80011f6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	f000 bee9 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
 80011f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011fa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800120a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	fab3 f383 	clz	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x2cc>
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	e015      	b.n	8001254 <HAL_RCC_OscConfig+0x2f8>
 8001228:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800122c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800123c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001240:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001244:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_RCC_OscConfig+0x330>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001254:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001258:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800125c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001260:	fa92 f2a2 	rbit	r2, r2
 8001264:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001268:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800126c:	fab2 f282 	clz	r2, r2
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f002 021f 	and.w	r2, r2, #31
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f202 	lsl.w	r2, r1, r2
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ab      	bne.n	80011e0 <HAL_RCC_OscConfig+0x284>
 8001288:	e003      	b.n	8001292 <HAL_RCC_OscConfig+0x336>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 817d 	beq.w	80015a2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b4:	4ba3      	ldr	r3, [pc, #652]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d172      	bne.n	80013a6 <HAL_RCC_OscConfig+0x44a>
 80012c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d16c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x44a>
 80012cc:	2302      	movs	r3, #2
 80012ce:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80012de:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0x3a0>
 80012f6:	4b93      	ldr	r3, [pc, #588]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	e013      	b.n	8001324 <HAL_RCC_OscConfig+0x3c8>
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001314:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001320:	4b88      	ldr	r3, [pc, #544]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	2202      	movs	r2, #2
 8001326:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800132a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800132e:	fa92 f2a2 	rbit	r2, r2
 8001332:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001336:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800133a:	fab2 f282 	clz	r2, r2
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	f042 0220 	orr.w	r2, r2, #32
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f002 021f 	and.w	r2, r2, #31
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f202 	lsl.w	r2, r1, r2
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <HAL_RCC_OscConfig+0x410>
 8001356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d002      	beq.n	800136c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	f000 be2e 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b75      	ldr	r3, [pc, #468]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001378:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	21f8      	movs	r1, #248	@ 0xf8
 8001382:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001386:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800138a:	fa91 f1a1 	rbit	r1, r1
 800138e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001392:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001396:	fab1 f181 	clz	r1, r1
 800139a:	b2c9      	uxtb	r1, r1
 800139c:	408b      	lsls	r3, r1
 800139e:	4969      	ldr	r1, [pc, #420]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a4:	e0fd      	b.n	80015a2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8088 	beq.w	80014c8 <HAL_RCC_OscConfig+0x56c>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80013ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	461a      	mov	r2, r3
 80013e0:	2301      	movs	r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb26 	bl	8000a34 <HAL_GetTick>
 80013e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ee:	f7ff fb21 	bl	8000a34 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d902      	bls.n	8001404 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	f000 bde2 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001416:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b01      	cmp	r3, #1
 800142c:	d102      	bne.n	8001434 <HAL_RCC_OscConfig+0x4d8>
 800142e:	4b45      	ldr	r3, [pc, #276]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	e013      	b.n	800145c <HAL_RCC_OscConfig+0x500>
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001446:	2302      	movs	r3, #2
 8001448:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800144c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001458:	4b3a      	ldr	r3, [pc, #232]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	2202      	movs	r2, #2
 800145e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001462:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001466:	fa92 f2a2 	rbit	r2, r2
 800146a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800146e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001472:	fab2 f282 	clz	r2, r2
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f042 0220 	orr.w	r2, r2, #32
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	f002 021f 	and.w	r2, r2, #31
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0af      	beq.n	80013ee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	21f8      	movs	r1, #248	@ 0xf8
 80014a4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80014ac:	fa91 f1a1 	rbit	r1, r1
 80014b0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80014b4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80014b8:	fab1 f181 	clz	r1, r1
 80014bc:	b2c9      	uxtb	r1, r1
 80014be:	408b      	lsls	r3, r1
 80014c0:	4920      	ldr	r1, [pc, #128]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
 80014c6:	e06c      	b.n	80015a2 <HAL_RCC_OscConfig+0x646>
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80014da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	461a      	mov	r2, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fa9e 	bl	8000a34 <HAL_GetTick>
 80014f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fa99 	bl	8000a34 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d902      	bls.n	8001514 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	f000 bd5a 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001526:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	095b      	lsrs	r3, r3, #5
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <HAL_RCC_OscConfig+0x5ec>
 800153e:	4b01      	ldr	r3, [pc, #4]	@ (8001544 <HAL_RCC_OscConfig+0x5e8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	e015      	b.n	8001570 <HAL_RCC_OscConfig+0x614>
 8001544:	40021000 	.word	0x40021000
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001552:	fa93 f3a3 	rbit	r3, r3
 8001556:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800155a:	2302      	movs	r3, #2
 800155c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001560:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800156c:	4bc8      	ldr	r3, [pc, #800]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	2202      	movs	r2, #2
 8001572:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001576:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800157a:	fa92 f2a2 	rbit	r2, r2
 800157e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001582:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001586:	fab2 f282 	clz	r2, r2
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	f042 0220 	orr.w	r2, r2, #32
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f002 021f 	and.w	r2, r2, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ad      	bne.n	80014fe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8110 	beq.w	80017d8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d079      	beq.n	80016bc <HAL_RCC_OscConfig+0x760>
 80015c8:	2301      	movs	r3, #1
 80015ca:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80015da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4bab      	ldr	r3, [pc, #684]	@ (8001894 <HAL_RCC_OscConfig+0x938>)
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	461a      	mov	r2, r3
 80015ee:	2301      	movs	r3, #1
 80015f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa1f 	bl	8000a34 <HAL_GetTick>
 80015f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fc:	f7ff fa1a 	bl	8000a34 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d902      	bls.n	8001612 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	f000 bcdb 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001634:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001666:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800166a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166c:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 800166e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001674:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001678:	2102      	movs	r1, #2
 800167a:	6019      	str	r1, [r3, #0]
 800167c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001680:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f1a3 	rbit	r1, r3
 800168a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001692:	6019      	str	r1, [r3, #0]
  return result;
 8001694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001698:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0a0      	beq.n	80015fc <HAL_RCC_OscConfig+0x6a0>
 80016ba:	e08d      	b.n	80017d8 <HAL_RCC_OscConfig+0x87c>
 80016bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fa93 f2a3 	rbit	r2, r3
 80016d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016de:	601a      	str	r2, [r3, #0]
  return result;
 80016e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b68      	ldr	r3, [pc, #416]	@ (8001894 <HAL_RCC_OscConfig+0x938>)
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	461a      	mov	r2, r3
 80016fa:	2300      	movs	r3, #0
 80016fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f999 	bl	8000a34 <HAL_GetTick>
 8001702:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff f994 	bl	8000a34 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d902      	bls.n	800171e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	f000 bc55 	b.w	8001fc8 <HAL_RCC_OscConfig+0x106c>
 800171e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001722:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001726:	2202      	movs	r2, #2
 8001728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	fa93 f2a3 	rbit	r2, r3
 8001738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001746:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800174a:	2202      	movs	r2, #2
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001752:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001760:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800176e:	2202      	movs	r2, #2
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001776:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	fa93 f2a3 	rbit	r2, r3
 8001780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001784:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001788:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 800178c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800178e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001792:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001796:	2102      	movs	r1, #2
 8001798:	6019      	str	r1, [r3, #0]
 800179a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f1a3 	rbit	r1, r3
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017b0:	6019      	str	r1, [r3, #0]
  return result;
 80017b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d197      	bne.n	8001708 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 81a1 	beq.w	8001b30 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f4:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d116      	bne.n	800182e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180a:	61d3      	str	r3, [r2, #28]
 800180c:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001826:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_RCC_OscConfig+0x93c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d11a      	bne.n	8001870 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_RCC_OscConfig+0x93c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a16      	ldr	r2, [pc, #88]	@ (8001898 <HAL_RCC_OscConfig+0x93c>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001844:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001846:	f7ff f8f5 	bl	8000a34 <HAL_GetTick>
 800184a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	e009      	b.n	8001864 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff f8f0 	bl	8000a34 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b64      	cmp	r3, #100	@ 0x64
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e3b1      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HAL_RCC_OscConfig+0x93c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d10d      	bne.n	800189c <HAL_RCC_OscConfig+0x940>
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a02      	ldr	r2, [pc, #8]	@ (8001890 <HAL_RCC_OscConfig+0x934>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e03c      	b.n	8001908 <HAL_RCC_OscConfig+0x9ac>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	10908120 	.word	0x10908120
 8001898:	40007000 	.word	0x40007000
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x96a>
 80018ac:	4bc1      	ldr	r3, [pc, #772]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4ac0      	ldr	r2, [pc, #768]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018b2:	f023 0301 	bic.w	r3, r3, #1
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	4bbe      	ldr	r3, [pc, #760]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4abd      	ldr	r2, [pc, #756]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018be:	f023 0304 	bic.w	r3, r3, #4
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e020      	b.n	8001908 <HAL_RCC_OscConfig+0x9ac>
 80018c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x994>
 80018d6:	4bb7      	ldr	r3, [pc, #732]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4ab6      	ldr	r2, [pc, #728]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	4bb4      	ldr	r3, [pc, #720]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4ab3      	ldr	r2, [pc, #716]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	e00b      	b.n	8001908 <HAL_RCC_OscConfig+0x9ac>
 80018f0:	4bb0      	ldr	r3, [pc, #704]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	4aaf      	ldr	r2, [pc, #700]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6213      	str	r3, [r2, #32]
 80018fc:	4bad      	ldr	r3, [pc, #692]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4aac      	ldr	r2, [pc, #688]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8081 	beq.w	8001a1c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff f88b 	bl	8000a34 <HAL_GetTick>
 800191e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f886 	bl	8000a34 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e345      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001944:	2202      	movs	r2, #2
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001970:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001982:	601a      	str	r2, [r3, #0]
  return result;
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800198c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	095b      	lsrs	r3, r3, #5
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0xa4c>
 80019a2:	4b84      	ldr	r3, [pc, #528]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	e013      	b.n	80019d0 <HAL_RCC_OscConfig+0xa74>
 80019a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	4b79      	ldr	r3, [pc, #484]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019d4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019d8:	2102      	movs	r1, #2
 80019da:	6011      	str	r1, [r2, #0]
 80019dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019e0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	fa92 f1a2 	rbit	r1, r2
 80019ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019ee:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019f2:	6011      	str	r1, [r2, #0]
  return result;
 80019f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019f8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f002 021f 	and.w	r2, r2, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d084      	beq.n	8001924 <HAL_RCC_OscConfig+0x9c8>
 8001a1a:	e07f      	b.n	8001b1c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f80a 	bl	8000a34 <HAL_GetTick>
 8001a20:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	e00b      	b.n	8001a3e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff f805 	bl	8000a34 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e2c4      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a66:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a72:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f2a3 	rbit	r2, r3
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a84:	601a      	str	r2, [r3, #0]
  return result;
 8001a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0xb4e>
 8001aa4:	4b43      	ldr	r3, [pc, #268]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	e013      	b.n	8001ad2 <HAL_RCC_OscConfig+0xb76>
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	4b39      	ldr	r3, [pc, #228]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ada:	2102      	movs	r1, #2
 8001adc:	6011      	str	r1, [r2, #0]
 8001ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	fa92 f1a2 	rbit	r1, r2
 8001aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001af4:	6011      	str	r1, [r2, #0]
  return result;
 8001af6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001afa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f002 021f 	and.w	r2, r2, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f202 	lsl.w	r2, r1, r2
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d184      	bne.n	8001a26 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d105      	bne.n	8001b30 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	4a22      	ldr	r2, [pc, #136]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 8001b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b2e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8242 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <HAL_RCC_OscConfig+0xc58>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	f000 8213 	beq.w	8001f76 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	f040 8162 	bne.w	8001e26 <HAL_RCC_OscConfig+0xeca>
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b6a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b86:	601a      	str	r2, [r3, #0]
  return result;
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b90:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b9c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7fe ff44 	bl	8000a34 <HAL_GetTick>
 8001bac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	e00c      	b.n	8001bcc <HAL_RCC_OscConfig+0xc70>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7fe ff3c 	bl	8000a34 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1fd      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bf0:	601a      	str	r2, [r3, #0]
  return result;
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_OscConfig+0xcba>
 8001c10:	4bb0      	ldr	r3, [pc, #704]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e027      	b.n	8001c66 <HAL_RCC_OscConfig+0xd0a>
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c36:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	4b9c      	ldr	r3, [pc, #624]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c6a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c72:	6011      	str	r1, [r2, #0]
 8001c74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c78:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	fa92 f1a2 	rbit	r1, r2
 8001c82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c86:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c8a:	6011      	str	r1, [r2, #0]
  return result;
 8001c8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c90:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	fab2 f282 	clz	r2, r2
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	f042 0220 	orr.w	r2, r2, #32
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	f002 021f 	and.w	r2, r2, #31
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d182      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb2:	4b88      	ldr	r3, [pc, #544]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	497f      	ldr	r1, [pc, #508]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
 8001cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cde:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ce2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cfe:	601a      	str	r2, [r3, #0]
  return result;
 8001d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d04:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d08:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe fe88 	bl	8000a34 <HAL_GetTick>
 8001d24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d28:	e009      	b.n	8001d3e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe fe83 	bl	8000a34 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e144      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d62:	601a      	str	r2, [r3, #0]
  return result;
 8001d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d68:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0xe2c>
 8001d82:	4b54      	ldr	r3, [pc, #336]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e027      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe7c>
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	fa93 f2a3 	rbit	r2, r3
 8001da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001db6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ddc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001de0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001de4:	6011      	str	r1, [r2, #0]
 8001de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001dea:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	fa92 f1a2 	rbit	r1, r2
 8001df4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001df8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001dfc:	6011      	str	r1, [r2, #0]
  return result;
 8001dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e02:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fab2 f282 	clz	r2, r2
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	f042 0220 	orr.w	r2, r2, #32
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	f002 021f 	and.w	r2, r2, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d082      	beq.n	8001d2a <HAL_RCC_OscConfig+0xdce>
 8001e24:	e0cf      	b.n	8001fc6 <HAL_RCC_OscConfig+0x106a>
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e4a:	601a      	str	r2, [r3, #0]
  return result;
 8001e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e50:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e54:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	461a      	mov	r2, r3
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe fde2 	bl	8000a34 <HAL_GetTick>
 8001e70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fddd 	bl	8000a34 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e09e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eaa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001eae:	601a      	str	r2, [r3, #0]
  return result;
 8001eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001eb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d104      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xf7c>
 8001ece:	4b01      	ldr	r3, [pc, #4]	@ (8001ed4 <HAL_RCC_OscConfig+0xf78>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	e029      	b.n	8001f28 <HAL_RCC_OscConfig+0xfcc>
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001edc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ee0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eea:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f02:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f10:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fa93 f2a3 	rbit	r2, r3
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_RCC_OscConfig+0x1078>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f2c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f34:	6011      	str	r1, [r2, #0]
 8001f36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f3a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	fa92 f1a2 	rbit	r1, r2
 8001f44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f48:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f4c:	6011      	str	r1, [r2, #0]
  return result;
 8001f4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f52:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	fab2 f282 	clz	r2, r2
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f042 0220 	orr.w	r2, r2, #32
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	f002 021f 	and.w	r2, r2, #31
 8001f68:	2101      	movs	r1, #1
 8001f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d180      	bne.n	8001e76 <HAL_RCC_OscConfig+0xf1a>
 8001f74:	e027      	b.n	8001fc6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e01e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_RCC_OscConfig+0x1078>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f96:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001faa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001fae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b09e      	sub	sp, #120	@ 0x78
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e162      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b90      	ldr	r3, [pc, #576]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	498b      	ldr	r1, [pc, #556]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b89      	ldr	r3, [pc, #548]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e14a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b82      	ldr	r3, [pc, #520]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	497f      	ldr	r1, [pc, #508]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80dc 	beq.w	8002204 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d13c      	bne.n	80020ce <HAL_RCC_ClockConfig+0xf6>
 8002054:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002058:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b01      	cmp	r3, #1
 8002076:	d102      	bne.n	800207e <HAL_RCC_ClockConfig+0xa6>
 8002078:	4b6f      	ldr	r3, [pc, #444]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e00f      	b.n	800209e <HAL_RCC_ClockConfig+0xc6>
 800207e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002082:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	667b      	str	r3, [r7, #100]	@ 0x64
 800208c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002090:	663b      	str	r3, [r7, #96]	@ 0x60
 8002092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800209a:	4b67      	ldr	r3, [pc, #412]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020a6:	fa92 f2a2 	rbit	r2, r2
 80020aa:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80020ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d17b      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0f3      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d13c      	bne.n	8002150 <HAL_RCC_ClockConfig+0x178>
 80020d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80020e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_ClockConfig+0x128>
 80020fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e00f      	b.n	8002120 <HAL_RCC_ClockConfig+0x148>
 8002100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002104:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	647b      	str	r3, [r7, #68]	@ 0x44
 800210e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002112:	643b      	str	r3, [r7, #64]	@ 0x40
 8002114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800211c:	4b46      	ldr	r3, [pc, #280]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002124:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002128:	fa92 f2a2 	rbit	r2, r2
 800212c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800212e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d13a      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0b2      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
 8002150:	2302      	movs	r3, #2
 8002152:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1a0>
 8002172:	4b31      	ldr	r3, [pc, #196]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e00d      	b.n	8002194 <HAL_RCC_ClockConfig+0x1bc>
 8002178:	2302      	movs	r3, #2
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
 8002184:	2302      	movs	r3, #2
 8002186:	623b      	str	r3, [r7, #32]
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	2202      	movs	r2, #2
 8002196:	61ba      	str	r2, [r7, #24]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	fa92 f2a2 	rbit	r2, r2
 800219e:	617a      	str	r2, [r7, #20]
  return result;
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f042 0220 	orr.w	r2, r2, #32
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e079      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	491a      	ldr	r1, [pc, #104]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fc2e 	bl	8000a34 <HAL_GetTick>
 80021d8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fc2a 	bl	8000a34 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e061      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_RCC_ClockConfig+0x260>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d214      	bcs.n	800223c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4906      	ldr	r1, [pc, #24]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <HAL_RCC_ClockConfig+0x25c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d005      	beq.n	800223c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e040      	b.n	80022b6 <HAL_RCC_ClockConfig+0x2de>
 8002234:	40022000 	.word	0x40022000
 8002238:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <HAL_RCC_ClockConfig+0x2e8>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	491a      	ldr	r1, [pc, #104]	@ (80022c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4912      	ldr	r1, [pc, #72]	@ (80022c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800227a:	f000 f829 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800227e:	4601      	mov	r1, r0
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002288:	22f0      	movs	r2, #240	@ 0xf0
 800228a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	fa92 f2a2 	rbit	r2, r2
 8002292:	60fa      	str	r2, [r7, #12]
  return result;
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	fab2 f282 	clz	r2, r2
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	40d3      	lsrs	r3, r2
 800229e:	4a09      	ldr	r2, [pc, #36]	@ (80022c4 <HAL_RCC_ClockConfig+0x2ec>)
 80022a0:	5cd3      	ldrb	r3, [r2, r3]
 80022a2:	fa21 f303 	lsr.w	r3, r1, r3
 80022a6:	4a08      	ldr	r2, [pc, #32]	@ (80022c8 <HAL_RCC_ClockConfig+0x2f0>)
 80022a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <HAL_RCC_ClockConfig+0x2f4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fb7c 	bl	80009ac <HAL_InitTick>
  
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3778      	adds	r7, #120	@ 0x78
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	080032bc 	.word	0x080032bc
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x30>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x36>
 80022fe:	e026      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x98>)
 8002302:	613b      	str	r3, [r7, #16]
      break;
 8002304:	e026      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002314:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x94>)
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <HAL_RCC_GetSysClockFreq+0xa0>)
 800231e:	5cd3      	ldrb	r3, [r2, r3]
 8002320:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800232c:	4a0e      	ldr	r2, [pc, #56]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x98>)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	fbb2 f2f3 	udiv	r2, r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e004      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0c      	ldr	r2, [pc, #48]	@ (8002374 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
      break;
 800234c:	e002      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x98>)
 8002350:	613b      	str	r3, [r7, #16]
      break;
 8002352:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002354:	693b      	ldr	r3, [r7, #16]
}
 8002356:	4618      	mov	r0, r3
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200
 800236c:	080032cc 	.word	0x080032cc
 8002370:	080032dc 	.word	0x080032dc
 8002374:	003d0900 	.word	0x003d0900

08002378 <std>:
 8002378:	2300      	movs	r3, #0
 800237a:	b510      	push	{r4, lr}
 800237c:	4604      	mov	r4, r0
 800237e:	e9c0 3300 	strd	r3, r3, [r0]
 8002382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002386:	6083      	str	r3, [r0, #8]
 8002388:	8181      	strh	r1, [r0, #12]
 800238a:	6643      	str	r3, [r0, #100]	@ 0x64
 800238c:	81c2      	strh	r2, [r0, #14]
 800238e:	6183      	str	r3, [r0, #24]
 8002390:	4619      	mov	r1, r3
 8002392:	2208      	movs	r2, #8
 8002394:	305c      	adds	r0, #92	@ 0x5c
 8002396:	f000 f921 	bl	80025dc <memset>
 800239a:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <std+0x58>)
 800239c:	6263      	str	r3, [r4, #36]	@ 0x24
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <std+0x5c>)
 80023a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023a2:	4b0d      	ldr	r3, [pc, #52]	@ (80023d8 <std+0x60>)
 80023a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <std+0x64>)
 80023a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <std+0x68>)
 80023ac:	6224      	str	r4, [r4, #32]
 80023ae:	429c      	cmp	r4, r3
 80023b0:	d006      	beq.n	80023c0 <std+0x48>
 80023b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023b6:	4294      	cmp	r4, r2
 80023b8:	d002      	beq.n	80023c0 <std+0x48>
 80023ba:	33d0      	adds	r3, #208	@ 0xd0
 80023bc:	429c      	cmp	r4, r3
 80023be:	d105      	bne.n	80023cc <std+0x54>
 80023c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c8:	f000 b93a 	b.w	8002640 <__retarget_lock_init_recursive>
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	bf00      	nop
 80023d0:	08002e99 	.word	0x08002e99
 80023d4:	08002ebb 	.word	0x08002ebb
 80023d8:	08002ef3 	.word	0x08002ef3
 80023dc:	08002f17 	.word	0x08002f17
 80023e0:	2000008c 	.word	0x2000008c

080023e4 <stdio_exit_handler>:
 80023e4:	4a02      	ldr	r2, [pc, #8]	@ (80023f0 <stdio_exit_handler+0xc>)
 80023e6:	4903      	ldr	r1, [pc, #12]	@ (80023f4 <stdio_exit_handler+0x10>)
 80023e8:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <stdio_exit_handler+0x14>)
 80023ea:	f000 b869 	b.w	80024c0 <_fwalk_sglue>
 80023ee:	bf00      	nop
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	08002e31 	.word	0x08002e31
 80023f8:	2000001c 	.word	0x2000001c

080023fc <cleanup_stdio>:
 80023fc:	6841      	ldr	r1, [r0, #4]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <cleanup_stdio+0x34>)
 8002400:	4299      	cmp	r1, r3
 8002402:	b510      	push	{r4, lr}
 8002404:	4604      	mov	r4, r0
 8002406:	d001      	beq.n	800240c <cleanup_stdio+0x10>
 8002408:	f000 fd12 	bl	8002e30 <_fflush_r>
 800240c:	68a1      	ldr	r1, [r4, #8]
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <cleanup_stdio+0x38>)
 8002410:	4299      	cmp	r1, r3
 8002412:	d002      	beq.n	800241a <cleanup_stdio+0x1e>
 8002414:	4620      	mov	r0, r4
 8002416:	f000 fd0b 	bl	8002e30 <_fflush_r>
 800241a:	68e1      	ldr	r1, [r4, #12]
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <cleanup_stdio+0x3c>)
 800241e:	4299      	cmp	r1, r3
 8002420:	d004      	beq.n	800242c <cleanup_stdio+0x30>
 8002422:	4620      	mov	r0, r4
 8002424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002428:	f000 bd02 	b.w	8002e30 <_fflush_r>
 800242c:	bd10      	pop	{r4, pc}
 800242e:	bf00      	nop
 8002430:	2000008c 	.word	0x2000008c
 8002434:	200000f4 	.word	0x200000f4
 8002438:	2000015c 	.word	0x2000015c

0800243c <global_stdio_init.part.0>:
 800243c:	b510      	push	{r4, lr}
 800243e:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <global_stdio_init.part.0+0x30>)
 8002440:	4c0b      	ldr	r4, [pc, #44]	@ (8002470 <global_stdio_init.part.0+0x34>)
 8002442:	4a0c      	ldr	r2, [pc, #48]	@ (8002474 <global_stdio_init.part.0+0x38>)
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4620      	mov	r0, r4
 8002448:	2200      	movs	r2, #0
 800244a:	2104      	movs	r1, #4
 800244c:	f7ff ff94 	bl	8002378 <std>
 8002450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002454:	2201      	movs	r2, #1
 8002456:	2109      	movs	r1, #9
 8002458:	f7ff ff8e 	bl	8002378 <std>
 800245c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002460:	2202      	movs	r2, #2
 8002462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002466:	2112      	movs	r1, #18
 8002468:	f7ff bf86 	b.w	8002378 <std>
 800246c:	200001c4 	.word	0x200001c4
 8002470:	2000008c 	.word	0x2000008c
 8002474:	080023e5 	.word	0x080023e5

08002478 <__sfp_lock_acquire>:
 8002478:	4801      	ldr	r0, [pc, #4]	@ (8002480 <__sfp_lock_acquire+0x8>)
 800247a:	f000 b8e2 	b.w	8002642 <__retarget_lock_acquire_recursive>
 800247e:	bf00      	nop
 8002480:	200001c9 	.word	0x200001c9

08002484 <__sfp_lock_release>:
 8002484:	4801      	ldr	r0, [pc, #4]	@ (800248c <__sfp_lock_release+0x8>)
 8002486:	f000 b8dd 	b.w	8002644 <__retarget_lock_release_recursive>
 800248a:	bf00      	nop
 800248c:	200001c9 	.word	0x200001c9

08002490 <__sinit>:
 8002490:	b510      	push	{r4, lr}
 8002492:	4604      	mov	r4, r0
 8002494:	f7ff fff0 	bl	8002478 <__sfp_lock_acquire>
 8002498:	6a23      	ldr	r3, [r4, #32]
 800249a:	b11b      	cbz	r3, 80024a4 <__sinit+0x14>
 800249c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024a0:	f7ff bff0 	b.w	8002484 <__sfp_lock_release>
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <__sinit+0x28>)
 80024a6:	6223      	str	r3, [r4, #32]
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <__sinit+0x2c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f5      	bne.n	800249c <__sinit+0xc>
 80024b0:	f7ff ffc4 	bl	800243c <global_stdio_init.part.0>
 80024b4:	e7f2      	b.n	800249c <__sinit+0xc>
 80024b6:	bf00      	nop
 80024b8:	080023fd 	.word	0x080023fd
 80024bc:	200001c4 	.word	0x200001c4

080024c0 <_fwalk_sglue>:
 80024c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024c4:	4607      	mov	r7, r0
 80024c6:	4688      	mov	r8, r1
 80024c8:	4614      	mov	r4, r2
 80024ca:	2600      	movs	r6, #0
 80024cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024d0:	f1b9 0901 	subs.w	r9, r9, #1
 80024d4:	d505      	bpl.n	80024e2 <_fwalk_sglue+0x22>
 80024d6:	6824      	ldr	r4, [r4, #0]
 80024d8:	2c00      	cmp	r4, #0
 80024da:	d1f7      	bne.n	80024cc <_fwalk_sglue+0xc>
 80024dc:	4630      	mov	r0, r6
 80024de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024e2:	89ab      	ldrh	r3, [r5, #12]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d907      	bls.n	80024f8 <_fwalk_sglue+0x38>
 80024e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024ec:	3301      	adds	r3, #1
 80024ee:	d003      	beq.n	80024f8 <_fwalk_sglue+0x38>
 80024f0:	4629      	mov	r1, r5
 80024f2:	4638      	mov	r0, r7
 80024f4:	47c0      	blx	r8
 80024f6:	4306      	orrs	r6, r0
 80024f8:	3568      	adds	r5, #104	@ 0x68
 80024fa:	e7e9      	b.n	80024d0 <_fwalk_sglue+0x10>

080024fc <iprintf>:
 80024fc:	b40f      	push	{r0, r1, r2, r3}
 80024fe:	b507      	push	{r0, r1, r2, lr}
 8002500:	4906      	ldr	r1, [pc, #24]	@ (800251c <iprintf+0x20>)
 8002502:	ab04      	add	r3, sp, #16
 8002504:	6808      	ldr	r0, [r1, #0]
 8002506:	f853 2b04 	ldr.w	r2, [r3], #4
 800250a:	6881      	ldr	r1, [r0, #8]
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	f000 f8c3 	bl	8002698 <_vfiprintf_r>
 8002512:	b003      	add	sp, #12
 8002514:	f85d eb04 	ldr.w	lr, [sp], #4
 8002518:	b004      	add	sp, #16
 800251a:	4770      	bx	lr
 800251c:	20000018 	.word	0x20000018

08002520 <_puts_r>:
 8002520:	6a03      	ldr	r3, [r0, #32]
 8002522:	b570      	push	{r4, r5, r6, lr}
 8002524:	6884      	ldr	r4, [r0, #8]
 8002526:	4605      	mov	r5, r0
 8002528:	460e      	mov	r6, r1
 800252a:	b90b      	cbnz	r3, 8002530 <_puts_r+0x10>
 800252c:	f7ff ffb0 	bl	8002490 <__sinit>
 8002530:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002532:	07db      	lsls	r3, r3, #31
 8002534:	d405      	bmi.n	8002542 <_puts_r+0x22>
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	0598      	lsls	r0, r3, #22
 800253a:	d402      	bmi.n	8002542 <_puts_r+0x22>
 800253c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800253e:	f000 f880 	bl	8002642 <__retarget_lock_acquire_recursive>
 8002542:	89a3      	ldrh	r3, [r4, #12]
 8002544:	0719      	lsls	r1, r3, #28
 8002546:	d502      	bpl.n	800254e <_puts_r+0x2e>
 8002548:	6923      	ldr	r3, [r4, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d135      	bne.n	80025ba <_puts_r+0x9a>
 800254e:	4621      	mov	r1, r4
 8002550:	4628      	mov	r0, r5
 8002552:	f000 fd23 	bl	8002f9c <__swsetup_r>
 8002556:	b380      	cbz	r0, 80025ba <_puts_r+0x9a>
 8002558:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800255c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800255e:	07da      	lsls	r2, r3, #31
 8002560:	d405      	bmi.n	800256e <_puts_r+0x4e>
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	059b      	lsls	r3, r3, #22
 8002566:	d402      	bmi.n	800256e <_puts_r+0x4e>
 8002568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800256a:	f000 f86b 	bl	8002644 <__retarget_lock_release_recursive>
 800256e:	4628      	mov	r0, r5
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	2b00      	cmp	r3, #0
 8002574:	da04      	bge.n	8002580 <_puts_r+0x60>
 8002576:	69a2      	ldr	r2, [r4, #24]
 8002578:	429a      	cmp	r2, r3
 800257a:	dc17      	bgt.n	80025ac <_puts_r+0x8c>
 800257c:	290a      	cmp	r1, #10
 800257e:	d015      	beq.n	80025ac <_puts_r+0x8c>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	6022      	str	r2, [r4, #0]
 8002586:	7019      	strb	r1, [r3, #0]
 8002588:	68a3      	ldr	r3, [r4, #8]
 800258a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800258e:	3b01      	subs	r3, #1
 8002590:	60a3      	str	r3, [r4, #8]
 8002592:	2900      	cmp	r1, #0
 8002594:	d1ed      	bne.n	8002572 <_puts_r+0x52>
 8002596:	2b00      	cmp	r3, #0
 8002598:	da11      	bge.n	80025be <_puts_r+0x9e>
 800259a:	4622      	mov	r2, r4
 800259c:	210a      	movs	r1, #10
 800259e:	4628      	mov	r0, r5
 80025a0:	f000 fcbd 	bl	8002f1e <__swbuf_r>
 80025a4:	3001      	adds	r0, #1
 80025a6:	d0d7      	beq.n	8002558 <_puts_r+0x38>
 80025a8:	250a      	movs	r5, #10
 80025aa:	e7d7      	b.n	800255c <_puts_r+0x3c>
 80025ac:	4622      	mov	r2, r4
 80025ae:	4628      	mov	r0, r5
 80025b0:	f000 fcb5 	bl	8002f1e <__swbuf_r>
 80025b4:	3001      	adds	r0, #1
 80025b6:	d1e7      	bne.n	8002588 <_puts_r+0x68>
 80025b8:	e7ce      	b.n	8002558 <_puts_r+0x38>
 80025ba:	3e01      	subs	r6, #1
 80025bc:	e7e4      	b.n	8002588 <_puts_r+0x68>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	6022      	str	r2, [r4, #0]
 80025c4:	220a      	movs	r2, #10
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e7ee      	b.n	80025a8 <_puts_r+0x88>
	...

080025cc <puts>:
 80025cc:	4b02      	ldr	r3, [pc, #8]	@ (80025d8 <puts+0xc>)
 80025ce:	4601      	mov	r1, r0
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	f7ff bfa5 	b.w	8002520 <_puts_r>
 80025d6:	bf00      	nop
 80025d8:	20000018 	.word	0x20000018

080025dc <memset>:
 80025dc:	4402      	add	r2, r0
 80025de:	4603      	mov	r3, r0
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d100      	bne.n	80025e6 <memset+0xa>
 80025e4:	4770      	bx	lr
 80025e6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ea:	e7f9      	b.n	80025e0 <memset+0x4>

080025ec <__errno>:
 80025ec:	4b01      	ldr	r3, [pc, #4]	@ (80025f4 <__errno+0x8>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000018 	.word	0x20000018

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002630 <__libc_init_array+0x38>)
 80025fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002634 <__libc_init_array+0x3c>)
 80025fe:	1b64      	subs	r4, r4, r5
 8002600:	10a4      	asrs	r4, r4, #2
 8002602:	2600      	movs	r6, #0
 8002604:	42a6      	cmp	r6, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	4d0b      	ldr	r5, [pc, #44]	@ (8002638 <__libc_init_array+0x40>)
 800260a:	4c0c      	ldr	r4, [pc, #48]	@ (800263c <__libc_init_array+0x44>)
 800260c:	f000 fe40 	bl	8003290 <_init>
 8002610:	1b64      	subs	r4, r4, r5
 8002612:	10a4      	asrs	r4, r4, #2
 8002614:	2600      	movs	r6, #0
 8002616:	42a6      	cmp	r6, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002620:	4798      	blx	r3
 8002622:	3601      	adds	r6, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	f855 3b04 	ldr.w	r3, [r5], #4
 800262a:	4798      	blx	r3
 800262c:	3601      	adds	r6, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	08003328 	.word	0x08003328
 8002634:	08003328 	.word	0x08003328
 8002638:	08003328 	.word	0x08003328
 800263c:	0800332c 	.word	0x0800332c

08002640 <__retarget_lock_init_recursive>:
 8002640:	4770      	bx	lr

08002642 <__retarget_lock_acquire_recursive>:
 8002642:	4770      	bx	lr

08002644 <__retarget_lock_release_recursive>:
 8002644:	4770      	bx	lr

08002646 <__sfputc_r>:
 8002646:	6893      	ldr	r3, [r2, #8]
 8002648:	3b01      	subs	r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	b410      	push	{r4}
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	da08      	bge.n	8002664 <__sfputc_r+0x1e>
 8002652:	6994      	ldr	r4, [r2, #24]
 8002654:	42a3      	cmp	r3, r4
 8002656:	db01      	blt.n	800265c <__sfputc_r+0x16>
 8002658:	290a      	cmp	r1, #10
 800265a:	d103      	bne.n	8002664 <__sfputc_r+0x1e>
 800265c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002660:	f000 bc5d 	b.w	8002f1e <__swbuf_r>
 8002664:	6813      	ldr	r3, [r2, #0]
 8002666:	1c58      	adds	r0, r3, #1
 8002668:	6010      	str	r0, [r2, #0]
 800266a:	7019      	strb	r1, [r3, #0]
 800266c:	4608      	mov	r0, r1
 800266e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002672:	4770      	bx	lr

08002674 <__sfputs_r>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	4606      	mov	r6, r0
 8002678:	460f      	mov	r7, r1
 800267a:	4614      	mov	r4, r2
 800267c:	18d5      	adds	r5, r2, r3
 800267e:	42ac      	cmp	r4, r5
 8002680:	d101      	bne.n	8002686 <__sfputs_r+0x12>
 8002682:	2000      	movs	r0, #0
 8002684:	e007      	b.n	8002696 <__sfputs_r+0x22>
 8002686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800268a:	463a      	mov	r2, r7
 800268c:	4630      	mov	r0, r6
 800268e:	f7ff ffda 	bl	8002646 <__sfputc_r>
 8002692:	1c43      	adds	r3, r0, #1
 8002694:	d1f3      	bne.n	800267e <__sfputs_r+0xa>
 8002696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002698 <_vfiprintf_r>:
 8002698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800269c:	460d      	mov	r5, r1
 800269e:	b09d      	sub	sp, #116	@ 0x74
 80026a0:	4614      	mov	r4, r2
 80026a2:	4698      	mov	r8, r3
 80026a4:	4606      	mov	r6, r0
 80026a6:	b118      	cbz	r0, 80026b0 <_vfiprintf_r+0x18>
 80026a8:	6a03      	ldr	r3, [r0, #32]
 80026aa:	b90b      	cbnz	r3, 80026b0 <_vfiprintf_r+0x18>
 80026ac:	f7ff fef0 	bl	8002490 <__sinit>
 80026b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026b2:	07d9      	lsls	r1, r3, #31
 80026b4:	d405      	bmi.n	80026c2 <_vfiprintf_r+0x2a>
 80026b6:	89ab      	ldrh	r3, [r5, #12]
 80026b8:	059a      	lsls	r2, r3, #22
 80026ba:	d402      	bmi.n	80026c2 <_vfiprintf_r+0x2a>
 80026bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026be:	f7ff ffc0 	bl	8002642 <__retarget_lock_acquire_recursive>
 80026c2:	89ab      	ldrh	r3, [r5, #12]
 80026c4:	071b      	lsls	r3, r3, #28
 80026c6:	d501      	bpl.n	80026cc <_vfiprintf_r+0x34>
 80026c8:	692b      	ldr	r3, [r5, #16]
 80026ca:	b99b      	cbnz	r3, 80026f4 <_vfiprintf_r+0x5c>
 80026cc:	4629      	mov	r1, r5
 80026ce:	4630      	mov	r0, r6
 80026d0:	f000 fc64 	bl	8002f9c <__swsetup_r>
 80026d4:	b170      	cbz	r0, 80026f4 <_vfiprintf_r+0x5c>
 80026d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026d8:	07dc      	lsls	r4, r3, #31
 80026da:	d504      	bpl.n	80026e6 <_vfiprintf_r+0x4e>
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026e0:	b01d      	add	sp, #116	@ 0x74
 80026e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026e6:	89ab      	ldrh	r3, [r5, #12]
 80026e8:	0598      	lsls	r0, r3, #22
 80026ea:	d4f7      	bmi.n	80026dc <_vfiprintf_r+0x44>
 80026ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026ee:	f7ff ffa9 	bl	8002644 <__retarget_lock_release_recursive>
 80026f2:	e7f3      	b.n	80026dc <_vfiprintf_r+0x44>
 80026f4:	2300      	movs	r3, #0
 80026f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80026f8:	2320      	movs	r3, #32
 80026fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002702:	2330      	movs	r3, #48	@ 0x30
 8002704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80028b4 <_vfiprintf_r+0x21c>
 8002708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800270c:	f04f 0901 	mov.w	r9, #1
 8002710:	4623      	mov	r3, r4
 8002712:	469a      	mov	sl, r3
 8002714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002718:	b10a      	cbz	r2, 800271e <_vfiprintf_r+0x86>
 800271a:	2a25      	cmp	r2, #37	@ 0x25
 800271c:	d1f9      	bne.n	8002712 <_vfiprintf_r+0x7a>
 800271e:	ebba 0b04 	subs.w	fp, sl, r4
 8002722:	d00b      	beq.n	800273c <_vfiprintf_r+0xa4>
 8002724:	465b      	mov	r3, fp
 8002726:	4622      	mov	r2, r4
 8002728:	4629      	mov	r1, r5
 800272a:	4630      	mov	r0, r6
 800272c:	f7ff ffa2 	bl	8002674 <__sfputs_r>
 8002730:	3001      	adds	r0, #1
 8002732:	f000 80a7 	beq.w	8002884 <_vfiprintf_r+0x1ec>
 8002736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002738:	445a      	add	r2, fp
 800273a:	9209      	str	r2, [sp, #36]	@ 0x24
 800273c:	f89a 3000 	ldrb.w	r3, [sl]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 809f 	beq.w	8002884 <_vfiprintf_r+0x1ec>
 8002746:	2300      	movs	r3, #0
 8002748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800274c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002750:	f10a 0a01 	add.w	sl, sl, #1
 8002754:	9304      	str	r3, [sp, #16]
 8002756:	9307      	str	r3, [sp, #28]
 8002758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800275c:	931a      	str	r3, [sp, #104]	@ 0x68
 800275e:	4654      	mov	r4, sl
 8002760:	2205      	movs	r2, #5
 8002762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002766:	4853      	ldr	r0, [pc, #332]	@ (80028b4 <_vfiprintf_r+0x21c>)
 8002768:	f7fd fd32 	bl	80001d0 <memchr>
 800276c:	9a04      	ldr	r2, [sp, #16]
 800276e:	b9d8      	cbnz	r0, 80027a8 <_vfiprintf_r+0x110>
 8002770:	06d1      	lsls	r1, r2, #27
 8002772:	bf44      	itt	mi
 8002774:	2320      	movmi	r3, #32
 8002776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800277a:	0713      	lsls	r3, r2, #28
 800277c:	bf44      	itt	mi
 800277e:	232b      	movmi	r3, #43	@ 0x2b
 8002780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002784:	f89a 3000 	ldrb.w	r3, [sl]
 8002788:	2b2a      	cmp	r3, #42	@ 0x2a
 800278a:	d015      	beq.n	80027b8 <_vfiprintf_r+0x120>
 800278c:	9a07      	ldr	r2, [sp, #28]
 800278e:	4654      	mov	r4, sl
 8002790:	2000      	movs	r0, #0
 8002792:	f04f 0c0a 	mov.w	ip, #10
 8002796:	4621      	mov	r1, r4
 8002798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800279c:	3b30      	subs	r3, #48	@ 0x30
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d94b      	bls.n	800283a <_vfiprintf_r+0x1a2>
 80027a2:	b1b0      	cbz	r0, 80027d2 <_vfiprintf_r+0x13a>
 80027a4:	9207      	str	r2, [sp, #28]
 80027a6:	e014      	b.n	80027d2 <_vfiprintf_r+0x13a>
 80027a8:	eba0 0308 	sub.w	r3, r0, r8
 80027ac:	fa09 f303 	lsl.w	r3, r9, r3
 80027b0:	4313      	orrs	r3, r2
 80027b2:	9304      	str	r3, [sp, #16]
 80027b4:	46a2      	mov	sl, r4
 80027b6:	e7d2      	b.n	800275e <_vfiprintf_r+0xc6>
 80027b8:	9b03      	ldr	r3, [sp, #12]
 80027ba:	1d19      	adds	r1, r3, #4
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	9103      	str	r1, [sp, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bfbb      	ittet	lt
 80027c4:	425b      	neglt	r3, r3
 80027c6:	f042 0202 	orrlt.w	r2, r2, #2
 80027ca:	9307      	strge	r3, [sp, #28]
 80027cc:	9307      	strlt	r3, [sp, #28]
 80027ce:	bfb8      	it	lt
 80027d0:	9204      	strlt	r2, [sp, #16]
 80027d2:	7823      	ldrb	r3, [r4, #0]
 80027d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80027d6:	d10a      	bne.n	80027ee <_vfiprintf_r+0x156>
 80027d8:	7863      	ldrb	r3, [r4, #1]
 80027da:	2b2a      	cmp	r3, #42	@ 0x2a
 80027dc:	d132      	bne.n	8002844 <_vfiprintf_r+0x1ac>
 80027de:	9b03      	ldr	r3, [sp, #12]
 80027e0:	1d1a      	adds	r2, r3, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	9203      	str	r2, [sp, #12]
 80027e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027ea:	3402      	adds	r4, #2
 80027ec:	9305      	str	r3, [sp, #20]
 80027ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80028c4 <_vfiprintf_r+0x22c>
 80027f2:	7821      	ldrb	r1, [r4, #0]
 80027f4:	2203      	movs	r2, #3
 80027f6:	4650      	mov	r0, sl
 80027f8:	f7fd fcea 	bl	80001d0 <memchr>
 80027fc:	b138      	cbz	r0, 800280e <_vfiprintf_r+0x176>
 80027fe:	9b04      	ldr	r3, [sp, #16]
 8002800:	eba0 000a 	sub.w	r0, r0, sl
 8002804:	2240      	movs	r2, #64	@ 0x40
 8002806:	4082      	lsls	r2, r0
 8002808:	4313      	orrs	r3, r2
 800280a:	3401      	adds	r4, #1
 800280c:	9304      	str	r3, [sp, #16]
 800280e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002812:	4829      	ldr	r0, [pc, #164]	@ (80028b8 <_vfiprintf_r+0x220>)
 8002814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002818:	2206      	movs	r2, #6
 800281a:	f7fd fcd9 	bl	80001d0 <memchr>
 800281e:	2800      	cmp	r0, #0
 8002820:	d03f      	beq.n	80028a2 <_vfiprintf_r+0x20a>
 8002822:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <_vfiprintf_r+0x224>)
 8002824:	bb1b      	cbnz	r3, 800286e <_vfiprintf_r+0x1d6>
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	3307      	adds	r3, #7
 800282a:	f023 0307 	bic.w	r3, r3, #7
 800282e:	3308      	adds	r3, #8
 8002830:	9303      	str	r3, [sp, #12]
 8002832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002834:	443b      	add	r3, r7
 8002836:	9309      	str	r3, [sp, #36]	@ 0x24
 8002838:	e76a      	b.n	8002710 <_vfiprintf_r+0x78>
 800283a:	fb0c 3202 	mla	r2, ip, r2, r3
 800283e:	460c      	mov	r4, r1
 8002840:	2001      	movs	r0, #1
 8002842:	e7a8      	b.n	8002796 <_vfiprintf_r+0xfe>
 8002844:	2300      	movs	r3, #0
 8002846:	3401      	adds	r4, #1
 8002848:	9305      	str	r3, [sp, #20]
 800284a:	4619      	mov	r1, r3
 800284c:	f04f 0c0a 	mov.w	ip, #10
 8002850:	4620      	mov	r0, r4
 8002852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002856:	3a30      	subs	r2, #48	@ 0x30
 8002858:	2a09      	cmp	r2, #9
 800285a:	d903      	bls.n	8002864 <_vfiprintf_r+0x1cc>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0c6      	beq.n	80027ee <_vfiprintf_r+0x156>
 8002860:	9105      	str	r1, [sp, #20]
 8002862:	e7c4      	b.n	80027ee <_vfiprintf_r+0x156>
 8002864:	fb0c 2101 	mla	r1, ip, r1, r2
 8002868:	4604      	mov	r4, r0
 800286a:	2301      	movs	r3, #1
 800286c:	e7f0      	b.n	8002850 <_vfiprintf_r+0x1b8>
 800286e:	ab03      	add	r3, sp, #12
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	462a      	mov	r2, r5
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <_vfiprintf_r+0x228>)
 8002876:	a904      	add	r1, sp, #16
 8002878:	4630      	mov	r0, r6
 800287a:	f3af 8000 	nop.w
 800287e:	4607      	mov	r7, r0
 8002880:	1c78      	adds	r0, r7, #1
 8002882:	d1d6      	bne.n	8002832 <_vfiprintf_r+0x19a>
 8002884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002886:	07d9      	lsls	r1, r3, #31
 8002888:	d405      	bmi.n	8002896 <_vfiprintf_r+0x1fe>
 800288a:	89ab      	ldrh	r3, [r5, #12]
 800288c:	059a      	lsls	r2, r3, #22
 800288e:	d402      	bmi.n	8002896 <_vfiprintf_r+0x1fe>
 8002890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002892:	f7ff fed7 	bl	8002644 <__retarget_lock_release_recursive>
 8002896:	89ab      	ldrh	r3, [r5, #12]
 8002898:	065b      	lsls	r3, r3, #25
 800289a:	f53f af1f 	bmi.w	80026dc <_vfiprintf_r+0x44>
 800289e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028a0:	e71e      	b.n	80026e0 <_vfiprintf_r+0x48>
 80028a2:	ab03      	add	r3, sp, #12
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	462a      	mov	r2, r5
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <_vfiprintf_r+0x228>)
 80028aa:	a904      	add	r1, sp, #16
 80028ac:	4630      	mov	r0, r6
 80028ae:	f000 f91b 	bl	8002ae8 <_printf_i>
 80028b2:	e7e4      	b.n	800287e <_vfiprintf_r+0x1e6>
 80028b4:	080032ec 	.word	0x080032ec
 80028b8:	080032f6 	.word	0x080032f6
 80028bc:	00000000 	.word	0x00000000
 80028c0:	08002675 	.word	0x08002675
 80028c4:	080032f2 	.word	0x080032f2

080028c8 <sbrk_aligned>:
 80028c8:	b570      	push	{r4, r5, r6, lr}
 80028ca:	4e0f      	ldr	r6, [pc, #60]	@ (8002908 <sbrk_aligned+0x40>)
 80028cc:	460c      	mov	r4, r1
 80028ce:	6831      	ldr	r1, [r6, #0]
 80028d0:	4605      	mov	r5, r0
 80028d2:	b911      	cbnz	r1, 80028da <sbrk_aligned+0x12>
 80028d4:	f000 fc70 	bl	80031b8 <_sbrk_r>
 80028d8:	6030      	str	r0, [r6, #0]
 80028da:	4621      	mov	r1, r4
 80028dc:	4628      	mov	r0, r5
 80028de:	f000 fc6b 	bl	80031b8 <_sbrk_r>
 80028e2:	1c43      	adds	r3, r0, #1
 80028e4:	d103      	bne.n	80028ee <sbrk_aligned+0x26>
 80028e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80028ea:	4620      	mov	r0, r4
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
 80028ee:	1cc4      	adds	r4, r0, #3
 80028f0:	f024 0403 	bic.w	r4, r4, #3
 80028f4:	42a0      	cmp	r0, r4
 80028f6:	d0f8      	beq.n	80028ea <sbrk_aligned+0x22>
 80028f8:	1a21      	subs	r1, r4, r0
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 fc5c 	bl	80031b8 <_sbrk_r>
 8002900:	3001      	adds	r0, #1
 8002902:	d1f2      	bne.n	80028ea <sbrk_aligned+0x22>
 8002904:	e7ef      	b.n	80028e6 <sbrk_aligned+0x1e>
 8002906:	bf00      	nop
 8002908:	200001cc 	.word	0x200001cc

0800290c <_malloc_r>:
 800290c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002910:	1ccd      	adds	r5, r1, #3
 8002912:	f025 0503 	bic.w	r5, r5, #3
 8002916:	3508      	adds	r5, #8
 8002918:	2d0c      	cmp	r5, #12
 800291a:	bf38      	it	cc
 800291c:	250c      	movcc	r5, #12
 800291e:	2d00      	cmp	r5, #0
 8002920:	4606      	mov	r6, r0
 8002922:	db01      	blt.n	8002928 <_malloc_r+0x1c>
 8002924:	42a9      	cmp	r1, r5
 8002926:	d904      	bls.n	8002932 <_malloc_r+0x26>
 8002928:	230c      	movs	r3, #12
 800292a:	6033      	str	r3, [r6, #0]
 800292c:	2000      	movs	r0, #0
 800292e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a08 <_malloc_r+0xfc>
 8002936:	f000 faa3 	bl	8002e80 <__malloc_lock>
 800293a:	f8d8 3000 	ldr.w	r3, [r8]
 800293e:	461c      	mov	r4, r3
 8002940:	bb44      	cbnz	r4, 8002994 <_malloc_r+0x88>
 8002942:	4629      	mov	r1, r5
 8002944:	4630      	mov	r0, r6
 8002946:	f7ff ffbf 	bl	80028c8 <sbrk_aligned>
 800294a:	1c43      	adds	r3, r0, #1
 800294c:	4604      	mov	r4, r0
 800294e:	d158      	bne.n	8002a02 <_malloc_r+0xf6>
 8002950:	f8d8 4000 	ldr.w	r4, [r8]
 8002954:	4627      	mov	r7, r4
 8002956:	2f00      	cmp	r7, #0
 8002958:	d143      	bne.n	80029e2 <_malloc_r+0xd6>
 800295a:	2c00      	cmp	r4, #0
 800295c:	d04b      	beq.n	80029f6 <_malloc_r+0xea>
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	4639      	mov	r1, r7
 8002962:	4630      	mov	r0, r6
 8002964:	eb04 0903 	add.w	r9, r4, r3
 8002968:	f000 fc26 	bl	80031b8 <_sbrk_r>
 800296c:	4581      	cmp	r9, r0
 800296e:	d142      	bne.n	80029f6 <_malloc_r+0xea>
 8002970:	6821      	ldr	r1, [r4, #0]
 8002972:	1a6d      	subs	r5, r5, r1
 8002974:	4629      	mov	r1, r5
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff ffa6 	bl	80028c8 <sbrk_aligned>
 800297c:	3001      	adds	r0, #1
 800297e:	d03a      	beq.n	80029f6 <_malloc_r+0xea>
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	442b      	add	r3, r5
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	f8d8 3000 	ldr.w	r3, [r8]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	bb62      	cbnz	r2, 80029e8 <_malloc_r+0xdc>
 800298e:	f8c8 7000 	str.w	r7, [r8]
 8002992:	e00f      	b.n	80029b4 <_malloc_r+0xa8>
 8002994:	6822      	ldr	r2, [r4, #0]
 8002996:	1b52      	subs	r2, r2, r5
 8002998:	d420      	bmi.n	80029dc <_malloc_r+0xd0>
 800299a:	2a0b      	cmp	r2, #11
 800299c:	d917      	bls.n	80029ce <_malloc_r+0xc2>
 800299e:	1961      	adds	r1, r4, r5
 80029a0:	42a3      	cmp	r3, r4
 80029a2:	6025      	str	r5, [r4, #0]
 80029a4:	bf18      	it	ne
 80029a6:	6059      	strne	r1, [r3, #4]
 80029a8:	6863      	ldr	r3, [r4, #4]
 80029aa:	bf08      	it	eq
 80029ac:	f8c8 1000 	streq.w	r1, [r8]
 80029b0:	5162      	str	r2, [r4, r5]
 80029b2:	604b      	str	r3, [r1, #4]
 80029b4:	4630      	mov	r0, r6
 80029b6:	f000 fa69 	bl	8002e8c <__malloc_unlock>
 80029ba:	f104 000b 	add.w	r0, r4, #11
 80029be:	1d23      	adds	r3, r4, #4
 80029c0:	f020 0007 	bic.w	r0, r0, #7
 80029c4:	1ac2      	subs	r2, r0, r3
 80029c6:	bf1c      	itt	ne
 80029c8:	1a1b      	subne	r3, r3, r0
 80029ca:	50a3      	strne	r3, [r4, r2]
 80029cc:	e7af      	b.n	800292e <_malloc_r+0x22>
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	42a3      	cmp	r3, r4
 80029d2:	bf0c      	ite	eq
 80029d4:	f8c8 2000 	streq.w	r2, [r8]
 80029d8:	605a      	strne	r2, [r3, #4]
 80029da:	e7eb      	b.n	80029b4 <_malloc_r+0xa8>
 80029dc:	4623      	mov	r3, r4
 80029de:	6864      	ldr	r4, [r4, #4]
 80029e0:	e7ae      	b.n	8002940 <_malloc_r+0x34>
 80029e2:	463c      	mov	r4, r7
 80029e4:	687f      	ldr	r7, [r7, #4]
 80029e6:	e7b6      	b.n	8002956 <_malloc_r+0x4a>
 80029e8:	461a      	mov	r2, r3
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	42a3      	cmp	r3, r4
 80029ee:	d1fb      	bne.n	80029e8 <_malloc_r+0xdc>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6053      	str	r3, [r2, #4]
 80029f4:	e7de      	b.n	80029b4 <_malloc_r+0xa8>
 80029f6:	230c      	movs	r3, #12
 80029f8:	6033      	str	r3, [r6, #0]
 80029fa:	4630      	mov	r0, r6
 80029fc:	f000 fa46 	bl	8002e8c <__malloc_unlock>
 8002a00:	e794      	b.n	800292c <_malloc_r+0x20>
 8002a02:	6005      	str	r5, [r0, #0]
 8002a04:	e7d6      	b.n	80029b4 <_malloc_r+0xa8>
 8002a06:	bf00      	nop
 8002a08:	200001d0 	.word	0x200001d0

08002a0c <_printf_common>:
 8002a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a10:	4616      	mov	r6, r2
 8002a12:	4698      	mov	r8, r3
 8002a14:	688a      	ldr	r2, [r1, #8]
 8002a16:	690b      	ldr	r3, [r1, #16]
 8002a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	bfb8      	it	lt
 8002a20:	4613      	movlt	r3, r2
 8002a22:	6033      	str	r3, [r6, #0]
 8002a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a28:	4607      	mov	r7, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	b10a      	cbz	r2, 8002a32 <_printf_common+0x26>
 8002a2e:	3301      	adds	r3, #1
 8002a30:	6033      	str	r3, [r6, #0]
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	0699      	lsls	r1, r3, #26
 8002a36:	bf42      	ittt	mi
 8002a38:	6833      	ldrmi	r3, [r6, #0]
 8002a3a:	3302      	addmi	r3, #2
 8002a3c:	6033      	strmi	r3, [r6, #0]
 8002a3e:	6825      	ldr	r5, [r4, #0]
 8002a40:	f015 0506 	ands.w	r5, r5, #6
 8002a44:	d106      	bne.n	8002a54 <_printf_common+0x48>
 8002a46:	f104 0a19 	add.w	sl, r4, #25
 8002a4a:	68e3      	ldr	r3, [r4, #12]
 8002a4c:	6832      	ldr	r2, [r6, #0]
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	42ab      	cmp	r3, r5
 8002a52:	dc26      	bgt.n	8002aa2 <_printf_common+0x96>
 8002a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	3b00      	subs	r3, #0
 8002a5c:	bf18      	it	ne
 8002a5e:	2301      	movne	r3, #1
 8002a60:	0692      	lsls	r2, r2, #26
 8002a62:	d42b      	bmi.n	8002abc <_printf_common+0xb0>
 8002a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a68:	4641      	mov	r1, r8
 8002a6a:	4638      	mov	r0, r7
 8002a6c:	47c8      	blx	r9
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d01e      	beq.n	8002ab0 <_printf_common+0xa4>
 8002a72:	6823      	ldr	r3, [r4, #0]
 8002a74:	6922      	ldr	r2, [r4, #16]
 8002a76:	f003 0306 	and.w	r3, r3, #6
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf02      	ittt	eq
 8002a7e:	68e5      	ldreq	r5, [r4, #12]
 8002a80:	6833      	ldreq	r3, [r6, #0]
 8002a82:	1aed      	subeq	r5, r5, r3
 8002a84:	68a3      	ldr	r3, [r4, #8]
 8002a86:	bf0c      	ite	eq
 8002a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a8c:	2500      	movne	r5, #0
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	bfc4      	itt	gt
 8002a92:	1a9b      	subgt	r3, r3, r2
 8002a94:	18ed      	addgt	r5, r5, r3
 8002a96:	2600      	movs	r6, #0
 8002a98:	341a      	adds	r4, #26
 8002a9a:	42b5      	cmp	r5, r6
 8002a9c:	d11a      	bne.n	8002ad4 <_printf_common+0xc8>
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e008      	b.n	8002ab4 <_printf_common+0xa8>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4652      	mov	r2, sl
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	47c8      	blx	r9
 8002aac:	3001      	adds	r0, #1
 8002aae:	d103      	bne.n	8002ab8 <_printf_common+0xac>
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ab8:	3501      	adds	r5, #1
 8002aba:	e7c6      	b.n	8002a4a <_printf_common+0x3e>
 8002abc:	18e1      	adds	r1, r4, r3
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	2030      	movs	r0, #48	@ 0x30
 8002ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ac6:	4422      	add	r2, r4
 8002ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	e7c7      	b.n	8002a64 <_printf_common+0x58>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	4641      	mov	r1, r8
 8002ada:	4638      	mov	r0, r7
 8002adc:	47c8      	blx	r9
 8002ade:	3001      	adds	r0, #1
 8002ae0:	d0e6      	beq.n	8002ab0 <_printf_common+0xa4>
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7d9      	b.n	8002a9a <_printf_common+0x8e>
	...

08002ae8 <_printf_i>:
 8002ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002aec:	7e0f      	ldrb	r7, [r1, #24]
 8002aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002af0:	2f78      	cmp	r7, #120	@ 0x78
 8002af2:	4691      	mov	r9, r2
 8002af4:	4680      	mov	r8, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	469a      	mov	sl, r3
 8002afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002afe:	d807      	bhi.n	8002b10 <_printf_i+0x28>
 8002b00:	2f62      	cmp	r7, #98	@ 0x62
 8002b02:	d80a      	bhi.n	8002b1a <_printf_i+0x32>
 8002b04:	2f00      	cmp	r7, #0
 8002b06:	f000 80d2 	beq.w	8002cae <_printf_i+0x1c6>
 8002b0a:	2f58      	cmp	r7, #88	@ 0x58
 8002b0c:	f000 80b9 	beq.w	8002c82 <_printf_i+0x19a>
 8002b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b18:	e03a      	b.n	8002b90 <_printf_i+0xa8>
 8002b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b1e:	2b15      	cmp	r3, #21
 8002b20:	d8f6      	bhi.n	8002b10 <_printf_i+0x28>
 8002b22:	a101      	add	r1, pc, #4	@ (adr r1, 8002b28 <_printf_i+0x40>)
 8002b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b28:	08002b81 	.word	0x08002b81
 8002b2c:	08002b95 	.word	0x08002b95
 8002b30:	08002b11 	.word	0x08002b11
 8002b34:	08002b11 	.word	0x08002b11
 8002b38:	08002b11 	.word	0x08002b11
 8002b3c:	08002b11 	.word	0x08002b11
 8002b40:	08002b95 	.word	0x08002b95
 8002b44:	08002b11 	.word	0x08002b11
 8002b48:	08002b11 	.word	0x08002b11
 8002b4c:	08002b11 	.word	0x08002b11
 8002b50:	08002b11 	.word	0x08002b11
 8002b54:	08002c95 	.word	0x08002c95
 8002b58:	08002bbf 	.word	0x08002bbf
 8002b5c:	08002c4f 	.word	0x08002c4f
 8002b60:	08002b11 	.word	0x08002b11
 8002b64:	08002b11 	.word	0x08002b11
 8002b68:	08002cb7 	.word	0x08002cb7
 8002b6c:	08002b11 	.word	0x08002b11
 8002b70:	08002bbf 	.word	0x08002bbf
 8002b74:	08002b11 	.word	0x08002b11
 8002b78:	08002b11 	.word	0x08002b11
 8002b7c:	08002c57 	.word	0x08002c57
 8002b80:	6833      	ldr	r3, [r6, #0]
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6032      	str	r2, [r6, #0]
 8002b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b90:	2301      	movs	r3, #1
 8002b92:	e09d      	b.n	8002cd0 <_printf_i+0x1e8>
 8002b94:	6833      	ldr	r3, [r6, #0]
 8002b96:	6820      	ldr	r0, [r4, #0]
 8002b98:	1d19      	adds	r1, r3, #4
 8002b9a:	6031      	str	r1, [r6, #0]
 8002b9c:	0606      	lsls	r6, r0, #24
 8002b9e:	d501      	bpl.n	8002ba4 <_printf_i+0xbc>
 8002ba0:	681d      	ldr	r5, [r3, #0]
 8002ba2:	e003      	b.n	8002bac <_printf_i+0xc4>
 8002ba4:	0645      	lsls	r5, r0, #25
 8002ba6:	d5fb      	bpl.n	8002ba0 <_printf_i+0xb8>
 8002ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bac:	2d00      	cmp	r5, #0
 8002bae:	da03      	bge.n	8002bb8 <_printf_i+0xd0>
 8002bb0:	232d      	movs	r3, #45	@ 0x2d
 8002bb2:	426d      	negs	r5, r5
 8002bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bb8:	4859      	ldr	r0, [pc, #356]	@ (8002d20 <_printf_i+0x238>)
 8002bba:	230a      	movs	r3, #10
 8002bbc:	e011      	b.n	8002be2 <_printf_i+0xfa>
 8002bbe:	6821      	ldr	r1, [r4, #0]
 8002bc0:	6833      	ldr	r3, [r6, #0]
 8002bc2:	0608      	lsls	r0, r1, #24
 8002bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002bc8:	d402      	bmi.n	8002bd0 <_printf_i+0xe8>
 8002bca:	0649      	lsls	r1, r1, #25
 8002bcc:	bf48      	it	mi
 8002bce:	b2ad      	uxthmi	r5, r5
 8002bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bd2:	4853      	ldr	r0, [pc, #332]	@ (8002d20 <_printf_i+0x238>)
 8002bd4:	6033      	str	r3, [r6, #0]
 8002bd6:	bf14      	ite	ne
 8002bd8:	230a      	movne	r3, #10
 8002bda:	2308      	moveq	r3, #8
 8002bdc:	2100      	movs	r1, #0
 8002bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002be2:	6866      	ldr	r6, [r4, #4]
 8002be4:	60a6      	str	r6, [r4, #8]
 8002be6:	2e00      	cmp	r6, #0
 8002be8:	bfa2      	ittt	ge
 8002bea:	6821      	ldrge	r1, [r4, #0]
 8002bec:	f021 0104 	bicge.w	r1, r1, #4
 8002bf0:	6021      	strge	r1, [r4, #0]
 8002bf2:	b90d      	cbnz	r5, 8002bf8 <_printf_i+0x110>
 8002bf4:	2e00      	cmp	r6, #0
 8002bf6:	d04b      	beq.n	8002c90 <_printf_i+0x1a8>
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bfe:	fb03 5711 	mls	r7, r3, r1, r5
 8002c02:	5dc7      	ldrb	r7, [r0, r7]
 8002c04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c08:	462f      	mov	r7, r5
 8002c0a:	42bb      	cmp	r3, r7
 8002c0c:	460d      	mov	r5, r1
 8002c0e:	d9f4      	bls.n	8002bfa <_printf_i+0x112>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d10b      	bne.n	8002c2c <_printf_i+0x144>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	07df      	lsls	r7, r3, #31
 8002c18:	d508      	bpl.n	8002c2c <_printf_i+0x144>
 8002c1a:	6923      	ldr	r3, [r4, #16]
 8002c1c:	6861      	ldr	r1, [r4, #4]
 8002c1e:	4299      	cmp	r1, r3
 8002c20:	bfde      	ittt	le
 8002c22:	2330      	movle	r3, #48	@ 0x30
 8002c24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002c2c:	1b92      	subs	r2, r2, r6
 8002c2e:	6122      	str	r2, [r4, #16]
 8002c30:	f8cd a000 	str.w	sl, [sp]
 8002c34:	464b      	mov	r3, r9
 8002c36:	aa03      	add	r2, sp, #12
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	f7ff fee6 	bl	8002a0c <_printf_common>
 8002c40:	3001      	adds	r0, #1
 8002c42:	d14a      	bne.n	8002cda <_printf_i+0x1f2>
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c48:	b004      	add	sp, #16
 8002c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c4e:	6823      	ldr	r3, [r4, #0]
 8002c50:	f043 0320 	orr.w	r3, r3, #32
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	4833      	ldr	r0, [pc, #204]	@ (8002d24 <_printf_i+0x23c>)
 8002c58:	2778      	movs	r7, #120	@ 0x78
 8002c5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	6831      	ldr	r1, [r6, #0]
 8002c62:	061f      	lsls	r7, r3, #24
 8002c64:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c68:	d402      	bmi.n	8002c70 <_printf_i+0x188>
 8002c6a:	065f      	lsls	r7, r3, #25
 8002c6c:	bf48      	it	mi
 8002c6e:	b2ad      	uxthmi	r5, r5
 8002c70:	6031      	str	r1, [r6, #0]
 8002c72:	07d9      	lsls	r1, r3, #31
 8002c74:	bf44      	itt	mi
 8002c76:	f043 0320 	orrmi.w	r3, r3, #32
 8002c7a:	6023      	strmi	r3, [r4, #0]
 8002c7c:	b11d      	cbz	r5, 8002c86 <_printf_i+0x19e>
 8002c7e:	2310      	movs	r3, #16
 8002c80:	e7ac      	b.n	8002bdc <_printf_i+0xf4>
 8002c82:	4827      	ldr	r0, [pc, #156]	@ (8002d20 <_printf_i+0x238>)
 8002c84:	e7e9      	b.n	8002c5a <_printf_i+0x172>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	f023 0320 	bic.w	r3, r3, #32
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	e7f6      	b.n	8002c7e <_printf_i+0x196>
 8002c90:	4616      	mov	r6, r2
 8002c92:	e7bd      	b.n	8002c10 <_printf_i+0x128>
 8002c94:	6833      	ldr	r3, [r6, #0]
 8002c96:	6825      	ldr	r5, [r4, #0]
 8002c98:	6961      	ldr	r1, [r4, #20]
 8002c9a:	1d18      	adds	r0, r3, #4
 8002c9c:	6030      	str	r0, [r6, #0]
 8002c9e:	062e      	lsls	r6, r5, #24
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	d501      	bpl.n	8002ca8 <_printf_i+0x1c0>
 8002ca4:	6019      	str	r1, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <_printf_i+0x1c6>
 8002ca8:	0668      	lsls	r0, r5, #25
 8002caa:	d5fb      	bpl.n	8002ca4 <_printf_i+0x1bc>
 8002cac:	8019      	strh	r1, [r3, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	6123      	str	r3, [r4, #16]
 8002cb2:	4616      	mov	r6, r2
 8002cb4:	e7bc      	b.n	8002c30 <_printf_i+0x148>
 8002cb6:	6833      	ldr	r3, [r6, #0]
 8002cb8:	1d1a      	adds	r2, r3, #4
 8002cba:	6032      	str	r2, [r6, #0]
 8002cbc:	681e      	ldr	r6, [r3, #0]
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f7fd fa84 	bl	80001d0 <memchr>
 8002cc8:	b108      	cbz	r0, 8002cce <_printf_i+0x1e6>
 8002cca:	1b80      	subs	r0, r0, r6
 8002ccc:	6060      	str	r0, [r4, #4]
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	6123      	str	r3, [r4, #16]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cd8:	e7aa      	b.n	8002c30 <_printf_i+0x148>
 8002cda:	6923      	ldr	r3, [r4, #16]
 8002cdc:	4632      	mov	r2, r6
 8002cde:	4649      	mov	r1, r9
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	47d0      	blx	sl
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d0ad      	beq.n	8002c44 <_printf_i+0x15c>
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	079b      	lsls	r3, r3, #30
 8002cec:	d413      	bmi.n	8002d16 <_printf_i+0x22e>
 8002cee:	68e0      	ldr	r0, [r4, #12]
 8002cf0:	9b03      	ldr	r3, [sp, #12]
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	bfb8      	it	lt
 8002cf6:	4618      	movlt	r0, r3
 8002cf8:	e7a6      	b.n	8002c48 <_printf_i+0x160>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4632      	mov	r2, r6
 8002cfe:	4649      	mov	r1, r9
 8002d00:	4640      	mov	r0, r8
 8002d02:	47d0      	blx	sl
 8002d04:	3001      	adds	r0, #1
 8002d06:	d09d      	beq.n	8002c44 <_printf_i+0x15c>
 8002d08:	3501      	adds	r5, #1
 8002d0a:	68e3      	ldr	r3, [r4, #12]
 8002d0c:	9903      	ldr	r1, [sp, #12]
 8002d0e:	1a5b      	subs	r3, r3, r1
 8002d10:	42ab      	cmp	r3, r5
 8002d12:	dcf2      	bgt.n	8002cfa <_printf_i+0x212>
 8002d14:	e7eb      	b.n	8002cee <_printf_i+0x206>
 8002d16:	2500      	movs	r5, #0
 8002d18:	f104 0619 	add.w	r6, r4, #25
 8002d1c:	e7f5      	b.n	8002d0a <_printf_i+0x222>
 8002d1e:	bf00      	nop
 8002d20:	080032fd 	.word	0x080032fd
 8002d24:	0800330e 	.word	0x0800330e

08002d28 <__sflush_r>:
 8002d28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d30:	0716      	lsls	r6, r2, #28
 8002d32:	4605      	mov	r5, r0
 8002d34:	460c      	mov	r4, r1
 8002d36:	d454      	bmi.n	8002de2 <__sflush_r+0xba>
 8002d38:	684b      	ldr	r3, [r1, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dc02      	bgt.n	8002d44 <__sflush_r+0x1c>
 8002d3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	dd48      	ble.n	8002dd6 <__sflush_r+0xae>
 8002d44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d46:	2e00      	cmp	r6, #0
 8002d48:	d045      	beq.n	8002dd6 <__sflush_r+0xae>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d50:	682f      	ldr	r7, [r5, #0]
 8002d52:	6a21      	ldr	r1, [r4, #32]
 8002d54:	602b      	str	r3, [r5, #0]
 8002d56:	d030      	beq.n	8002dba <__sflush_r+0x92>
 8002d58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	0759      	lsls	r1, r3, #29
 8002d5e:	d505      	bpl.n	8002d6c <__sflush_r+0x44>
 8002d60:	6863      	ldr	r3, [r4, #4]
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d66:	b10b      	cbz	r3, 8002d6c <__sflush_r+0x44>
 8002d68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d6a:	1ad2      	subs	r2, r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d70:	6a21      	ldr	r1, [r4, #32]
 8002d72:	4628      	mov	r0, r5
 8002d74:	47b0      	blx	r6
 8002d76:	1c43      	adds	r3, r0, #1
 8002d78:	89a3      	ldrh	r3, [r4, #12]
 8002d7a:	d106      	bne.n	8002d8a <__sflush_r+0x62>
 8002d7c:	6829      	ldr	r1, [r5, #0]
 8002d7e:	291d      	cmp	r1, #29
 8002d80:	d82b      	bhi.n	8002dda <__sflush_r+0xb2>
 8002d82:	4a2a      	ldr	r2, [pc, #168]	@ (8002e2c <__sflush_r+0x104>)
 8002d84:	410a      	asrs	r2, r1
 8002d86:	07d6      	lsls	r6, r2, #31
 8002d88:	d427      	bmi.n	8002dda <__sflush_r+0xb2>
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	6062      	str	r2, [r4, #4]
 8002d8e:	04d9      	lsls	r1, r3, #19
 8002d90:	6922      	ldr	r2, [r4, #16]
 8002d92:	6022      	str	r2, [r4, #0]
 8002d94:	d504      	bpl.n	8002da0 <__sflush_r+0x78>
 8002d96:	1c42      	adds	r2, r0, #1
 8002d98:	d101      	bne.n	8002d9e <__sflush_r+0x76>
 8002d9a:	682b      	ldr	r3, [r5, #0]
 8002d9c:	b903      	cbnz	r3, 8002da0 <__sflush_r+0x78>
 8002d9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002da2:	602f      	str	r7, [r5, #0]
 8002da4:	b1b9      	cbz	r1, 8002dd6 <__sflush_r+0xae>
 8002da6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002daa:	4299      	cmp	r1, r3
 8002dac:	d002      	beq.n	8002db4 <__sflush_r+0x8c>
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 fa24 	bl	80031fc <_free_r>
 8002db4:	2300      	movs	r3, #0
 8002db6:	6363      	str	r3, [r4, #52]	@ 0x34
 8002db8:	e00d      	b.n	8002dd6 <__sflush_r+0xae>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	47b0      	blx	r6
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	1c50      	adds	r0, r2, #1
 8002dc4:	d1c9      	bne.n	8002d5a <__sflush_r+0x32>
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0c6      	beq.n	8002d5a <__sflush_r+0x32>
 8002dcc:	2b1d      	cmp	r3, #29
 8002dce:	d001      	beq.n	8002dd4 <__sflush_r+0xac>
 8002dd0:	2b16      	cmp	r3, #22
 8002dd2:	d11e      	bne.n	8002e12 <__sflush_r+0xea>
 8002dd4:	602f      	str	r7, [r5, #0]
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	e022      	b.n	8002e20 <__sflush_r+0xf8>
 8002dda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	e01b      	b.n	8002e1a <__sflush_r+0xf2>
 8002de2:	690f      	ldr	r7, [r1, #16]
 8002de4:	2f00      	cmp	r7, #0
 8002de6:	d0f6      	beq.n	8002dd6 <__sflush_r+0xae>
 8002de8:	0793      	lsls	r3, r2, #30
 8002dea:	680e      	ldr	r6, [r1, #0]
 8002dec:	bf08      	it	eq
 8002dee:	694b      	ldreq	r3, [r1, #20]
 8002df0:	600f      	str	r7, [r1, #0]
 8002df2:	bf18      	it	ne
 8002df4:	2300      	movne	r3, #0
 8002df6:	eba6 0807 	sub.w	r8, r6, r7
 8002dfa:	608b      	str	r3, [r1, #8]
 8002dfc:	f1b8 0f00 	cmp.w	r8, #0
 8002e00:	dde9      	ble.n	8002dd6 <__sflush_r+0xae>
 8002e02:	6a21      	ldr	r1, [r4, #32]
 8002e04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002e06:	4643      	mov	r3, r8
 8002e08:	463a      	mov	r2, r7
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	47b0      	blx	r6
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	dc08      	bgt.n	8002e24 <__sflush_r+0xfc>
 8002e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e1a:	81a3      	strh	r3, [r4, #12]
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e24:	4407      	add	r7, r0
 8002e26:	eba8 0800 	sub.w	r8, r8, r0
 8002e2a:	e7e7      	b.n	8002dfc <__sflush_r+0xd4>
 8002e2c:	dfbffffe 	.word	0xdfbffffe

08002e30 <_fflush_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	690b      	ldr	r3, [r1, #16]
 8002e34:	4605      	mov	r5, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	b913      	cbnz	r3, 8002e40 <_fflush_r+0x10>
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
 8002e40:	b118      	cbz	r0, 8002e4a <_fflush_r+0x1a>
 8002e42:	6a03      	ldr	r3, [r0, #32]
 8002e44:	b90b      	cbnz	r3, 8002e4a <_fflush_r+0x1a>
 8002e46:	f7ff fb23 	bl	8002490 <__sinit>
 8002e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f3      	beq.n	8002e3a <_fflush_r+0xa>
 8002e52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e54:	07d0      	lsls	r0, r2, #31
 8002e56:	d404      	bmi.n	8002e62 <_fflush_r+0x32>
 8002e58:	0599      	lsls	r1, r3, #22
 8002e5a:	d402      	bmi.n	8002e62 <_fflush_r+0x32>
 8002e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e5e:	f7ff fbf0 	bl	8002642 <__retarget_lock_acquire_recursive>
 8002e62:	4628      	mov	r0, r5
 8002e64:	4621      	mov	r1, r4
 8002e66:	f7ff ff5f 	bl	8002d28 <__sflush_r>
 8002e6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e6c:	07da      	lsls	r2, r3, #31
 8002e6e:	4605      	mov	r5, r0
 8002e70:	d4e4      	bmi.n	8002e3c <_fflush_r+0xc>
 8002e72:	89a3      	ldrh	r3, [r4, #12]
 8002e74:	059b      	lsls	r3, r3, #22
 8002e76:	d4e1      	bmi.n	8002e3c <_fflush_r+0xc>
 8002e78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e7a:	f7ff fbe3 	bl	8002644 <__retarget_lock_release_recursive>
 8002e7e:	e7dd      	b.n	8002e3c <_fflush_r+0xc>

08002e80 <__malloc_lock>:
 8002e80:	4801      	ldr	r0, [pc, #4]	@ (8002e88 <__malloc_lock+0x8>)
 8002e82:	f7ff bbde 	b.w	8002642 <__retarget_lock_acquire_recursive>
 8002e86:	bf00      	nop
 8002e88:	200001c8 	.word	0x200001c8

08002e8c <__malloc_unlock>:
 8002e8c:	4801      	ldr	r0, [pc, #4]	@ (8002e94 <__malloc_unlock+0x8>)
 8002e8e:	f7ff bbd9 	b.w	8002644 <__retarget_lock_release_recursive>
 8002e92:	bf00      	nop
 8002e94:	200001c8 	.word	0x200001c8

08002e98 <__sread>:
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea0:	f000 f978 	bl	8003194 <_read_r>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	bfab      	itete	ge
 8002ea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8002eac:	181b      	addge	r3, r3, r0
 8002eae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002eb2:	bfac      	ite	ge
 8002eb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002eb6:	81a3      	strhlt	r3, [r4, #12]
 8002eb8:	bd10      	pop	{r4, pc}

08002eba <__swrite>:
 8002eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ebe:	461f      	mov	r7, r3
 8002ec0:	898b      	ldrh	r3, [r1, #12]
 8002ec2:	05db      	lsls	r3, r3, #23
 8002ec4:	4605      	mov	r5, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4616      	mov	r6, r2
 8002eca:	d505      	bpl.n	8002ed8 <__swrite+0x1e>
 8002ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f000 f94c 	bl	8003170 <_lseek_r>
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ee2:	81a3      	strh	r3, [r4, #12]
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4628      	mov	r0, r5
 8002eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eee:	f000 b973 	b.w	80031d8 <_write_r>

08002ef2 <__sseek>:
 8002ef2:	b510      	push	{r4, lr}
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002efa:	f000 f939 	bl	8003170 <_lseek_r>
 8002efe:	1c43      	adds	r3, r0, #1
 8002f00:	89a3      	ldrh	r3, [r4, #12]
 8002f02:	bf15      	itete	ne
 8002f04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f0e:	81a3      	strheq	r3, [r4, #12]
 8002f10:	bf18      	it	ne
 8002f12:	81a3      	strhne	r3, [r4, #12]
 8002f14:	bd10      	pop	{r4, pc}

08002f16 <__sclose>:
 8002f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f1a:	f000 b8f7 	b.w	800310c <_close_r>

08002f1e <__swbuf_r>:
 8002f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f20:	460e      	mov	r6, r1
 8002f22:	4614      	mov	r4, r2
 8002f24:	4605      	mov	r5, r0
 8002f26:	b118      	cbz	r0, 8002f30 <__swbuf_r+0x12>
 8002f28:	6a03      	ldr	r3, [r0, #32]
 8002f2a:	b90b      	cbnz	r3, 8002f30 <__swbuf_r+0x12>
 8002f2c:	f7ff fab0 	bl	8002490 <__sinit>
 8002f30:	69a3      	ldr	r3, [r4, #24]
 8002f32:	60a3      	str	r3, [r4, #8]
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	071a      	lsls	r2, r3, #28
 8002f38:	d501      	bpl.n	8002f3e <__swbuf_r+0x20>
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	b943      	cbnz	r3, 8002f50 <__swbuf_r+0x32>
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 f82b 	bl	8002f9c <__swsetup_r>
 8002f46:	b118      	cbz	r0, 8002f50 <__swbuf_r+0x32>
 8002f48:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	6922      	ldr	r2, [r4, #16]
 8002f54:	1a98      	subs	r0, r3, r2
 8002f56:	6963      	ldr	r3, [r4, #20]
 8002f58:	b2f6      	uxtb	r6, r6
 8002f5a:	4283      	cmp	r3, r0
 8002f5c:	4637      	mov	r7, r6
 8002f5e:	dc05      	bgt.n	8002f6c <__swbuf_r+0x4e>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4628      	mov	r0, r5
 8002f64:	f7ff ff64 	bl	8002e30 <_fflush_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d1ed      	bne.n	8002f48 <__swbuf_r+0x2a>
 8002f6c:	68a3      	ldr	r3, [r4, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60a3      	str	r3, [r4, #8]
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	6022      	str	r2, [r4, #0]
 8002f78:	701e      	strb	r6, [r3, #0]
 8002f7a:	6962      	ldr	r2, [r4, #20]
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d004      	beq.n	8002f8c <__swbuf_r+0x6e>
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	07db      	lsls	r3, r3, #31
 8002f86:	d5e1      	bpl.n	8002f4c <__swbuf_r+0x2e>
 8002f88:	2e0a      	cmp	r6, #10
 8002f8a:	d1df      	bne.n	8002f4c <__swbuf_r+0x2e>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f7ff ff4e 	bl	8002e30 <_fflush_r>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d0d9      	beq.n	8002f4c <__swbuf_r+0x2e>
 8002f98:	e7d6      	b.n	8002f48 <__swbuf_r+0x2a>
	...

08002f9c <__swsetup_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4b29      	ldr	r3, [pc, #164]	@ (8003044 <__swsetup_r+0xa8>)
 8002fa0:	4605      	mov	r5, r0
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	b118      	cbz	r0, 8002fb0 <__swsetup_r+0x14>
 8002fa8:	6a03      	ldr	r3, [r0, #32]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <__swsetup_r+0x14>
 8002fac:	f7ff fa70 	bl	8002490 <__sinit>
 8002fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fb4:	0719      	lsls	r1, r3, #28
 8002fb6:	d422      	bmi.n	8002ffe <__swsetup_r+0x62>
 8002fb8:	06da      	lsls	r2, r3, #27
 8002fba:	d407      	bmi.n	8002fcc <__swsetup_r+0x30>
 8002fbc:	2209      	movs	r2, #9
 8002fbe:	602a      	str	r2, [r5, #0]
 8002fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fca:	e033      	b.n	8003034 <__swsetup_r+0x98>
 8002fcc:	0758      	lsls	r0, r3, #29
 8002fce:	d512      	bpl.n	8002ff6 <__swsetup_r+0x5a>
 8002fd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fd2:	b141      	cbz	r1, 8002fe6 <__swsetup_r+0x4a>
 8002fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fd8:	4299      	cmp	r1, r3
 8002fda:	d002      	beq.n	8002fe2 <__swsetup_r+0x46>
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f000 f90d 	bl	80031fc <_free_r>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6063      	str	r3, [r4, #4]
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	f043 0308 	orr.w	r3, r3, #8
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	6923      	ldr	r3, [r4, #16]
 8003000:	b94b      	cbnz	r3, 8003016 <__swsetup_r+0x7a>
 8003002:	89a3      	ldrh	r3, [r4, #12]
 8003004:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800300c:	d003      	beq.n	8003016 <__swsetup_r+0x7a>
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f83f 	bl	8003094 <__smakebuf_r>
 8003016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800301a:	f013 0201 	ands.w	r2, r3, #1
 800301e:	d00a      	beq.n	8003036 <__swsetup_r+0x9a>
 8003020:	2200      	movs	r2, #0
 8003022:	60a2      	str	r2, [r4, #8]
 8003024:	6962      	ldr	r2, [r4, #20]
 8003026:	4252      	negs	r2, r2
 8003028:	61a2      	str	r2, [r4, #24]
 800302a:	6922      	ldr	r2, [r4, #16]
 800302c:	b942      	cbnz	r2, 8003040 <__swsetup_r+0xa4>
 800302e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003032:	d1c5      	bne.n	8002fc0 <__swsetup_r+0x24>
 8003034:	bd38      	pop	{r3, r4, r5, pc}
 8003036:	0799      	lsls	r1, r3, #30
 8003038:	bf58      	it	pl
 800303a:	6962      	ldrpl	r2, [r4, #20]
 800303c:	60a2      	str	r2, [r4, #8]
 800303e:	e7f4      	b.n	800302a <__swsetup_r+0x8e>
 8003040:	2000      	movs	r0, #0
 8003042:	e7f7      	b.n	8003034 <__swsetup_r+0x98>
 8003044:	20000018 	.word	0x20000018

08003048 <__swhatbuf_r>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	460c      	mov	r4, r1
 800304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003050:	2900      	cmp	r1, #0
 8003052:	b096      	sub	sp, #88	@ 0x58
 8003054:	4615      	mov	r5, r2
 8003056:	461e      	mov	r6, r3
 8003058:	da0d      	bge.n	8003076 <__swhatbuf_r+0x2e>
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	bf14      	ite	ne
 8003066:	2340      	movne	r3, #64	@ 0x40
 8003068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800306c:	2000      	movs	r0, #0
 800306e:	6031      	str	r1, [r6, #0]
 8003070:	602b      	str	r3, [r5, #0]
 8003072:	b016      	add	sp, #88	@ 0x58
 8003074:	bd70      	pop	{r4, r5, r6, pc}
 8003076:	466a      	mov	r2, sp
 8003078:	f000 f858 	bl	800312c <_fstat_r>
 800307c:	2800      	cmp	r0, #0
 800307e:	dbec      	blt.n	800305a <__swhatbuf_r+0x12>
 8003080:	9901      	ldr	r1, [sp, #4]
 8003082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800308a:	4259      	negs	r1, r3
 800308c:	4159      	adcs	r1, r3
 800308e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003092:	e7eb      	b.n	800306c <__swhatbuf_r+0x24>

08003094 <__smakebuf_r>:
 8003094:	898b      	ldrh	r3, [r1, #12]
 8003096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003098:	079d      	lsls	r5, r3, #30
 800309a:	4606      	mov	r6, r0
 800309c:	460c      	mov	r4, r1
 800309e:	d507      	bpl.n	80030b0 <__smakebuf_r+0x1c>
 80030a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	6123      	str	r3, [r4, #16]
 80030a8:	2301      	movs	r3, #1
 80030aa:	6163      	str	r3, [r4, #20]
 80030ac:	b003      	add	sp, #12
 80030ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b0:	ab01      	add	r3, sp, #4
 80030b2:	466a      	mov	r2, sp
 80030b4:	f7ff ffc8 	bl	8003048 <__swhatbuf_r>
 80030b8:	9f00      	ldr	r7, [sp, #0]
 80030ba:	4605      	mov	r5, r0
 80030bc:	4639      	mov	r1, r7
 80030be:	4630      	mov	r0, r6
 80030c0:	f7ff fc24 	bl	800290c <_malloc_r>
 80030c4:	b948      	cbnz	r0, 80030da <__smakebuf_r+0x46>
 80030c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ca:	059a      	lsls	r2, r3, #22
 80030cc:	d4ee      	bmi.n	80030ac <__smakebuf_r+0x18>
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	81a3      	strh	r3, [r4, #12]
 80030d8:	e7e2      	b.n	80030a0 <__smakebuf_r+0xc>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	6020      	str	r0, [r4, #0]
 80030de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e2:	81a3      	strh	r3, [r4, #12]
 80030e4:	9b01      	ldr	r3, [sp, #4]
 80030e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80030ea:	b15b      	cbz	r3, 8003104 <__smakebuf_r+0x70>
 80030ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030f0:	4630      	mov	r0, r6
 80030f2:	f000 f82d 	bl	8003150 <_isatty_r>
 80030f6:	b128      	cbz	r0, 8003104 <__smakebuf_r+0x70>
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	81a3      	strh	r3, [r4, #12]
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	431d      	orrs	r5, r3
 8003108:	81a5      	strh	r5, [r4, #12]
 800310a:	e7cf      	b.n	80030ac <__smakebuf_r+0x18>

0800310c <_close_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4d06      	ldr	r5, [pc, #24]	@ (8003128 <_close_r+0x1c>)
 8003110:	2300      	movs	r3, #0
 8003112:	4604      	mov	r4, r0
 8003114:	4608      	mov	r0, r1
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	f7fd fb8c 	bl	8000834 <_close>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d102      	bne.n	8003126 <_close_r+0x1a>
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	b103      	cbz	r3, 8003126 <_close_r+0x1a>
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	200001d4 	.word	0x200001d4

0800312c <_fstat_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4d07      	ldr	r5, [pc, #28]	@ (800314c <_fstat_r+0x20>)
 8003130:	2300      	movs	r3, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	f7fd fb87 	bl	800084c <_fstat>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	d102      	bne.n	8003148 <_fstat_r+0x1c>
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	b103      	cbz	r3, 8003148 <_fstat_r+0x1c>
 8003146:	6023      	str	r3, [r4, #0]
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop
 800314c:	200001d4 	.word	0x200001d4

08003150 <_isatty_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d06      	ldr	r5, [pc, #24]	@ (800316c <_isatty_r+0x1c>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	f7fd fb86 	bl	800086c <_isatty>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_isatty_r+0x1a>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_isatty_r+0x1a>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	200001d4 	.word	0x200001d4

08003170 <_lseek_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d07      	ldr	r5, [pc, #28]	@ (8003190 <_lseek_r+0x20>)
 8003174:	4604      	mov	r4, r0
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	2200      	movs	r2, #0
 800317c:	602a      	str	r2, [r5, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f7fd fb7f 	bl	8000882 <_lseek>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_lseek_r+0x1e>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_lseek_r+0x1e>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	200001d4 	.word	0x200001d4

08003194 <_read_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	4d07      	ldr	r5, [pc, #28]	@ (80031b4 <_read_r+0x20>)
 8003198:	4604      	mov	r4, r0
 800319a:	4608      	mov	r0, r1
 800319c:	4611      	mov	r1, r2
 800319e:	2200      	movs	r2, #0
 80031a0:	602a      	str	r2, [r5, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f7fd fb29 	bl	80007fa <_read>
 80031a8:	1c43      	adds	r3, r0, #1
 80031aa:	d102      	bne.n	80031b2 <_read_r+0x1e>
 80031ac:	682b      	ldr	r3, [r5, #0]
 80031ae:	b103      	cbz	r3, 80031b2 <_read_r+0x1e>
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	200001d4 	.word	0x200001d4

080031b8 <_sbrk_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d06      	ldr	r5, [pc, #24]	@ (80031d4 <_sbrk_r+0x1c>)
 80031bc:	2300      	movs	r3, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	602b      	str	r3, [r5, #0]
 80031c4:	f7fd fb6a 	bl	800089c <_sbrk>
 80031c8:	1c43      	adds	r3, r0, #1
 80031ca:	d102      	bne.n	80031d2 <_sbrk_r+0x1a>
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	b103      	cbz	r3, 80031d2 <_sbrk_r+0x1a>
 80031d0:	6023      	str	r3, [r4, #0]
 80031d2:	bd38      	pop	{r3, r4, r5, pc}
 80031d4:	200001d4 	.word	0x200001d4

080031d8 <_write_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d07      	ldr	r5, [pc, #28]	@ (80031f8 <_write_r+0x20>)
 80031dc:	4604      	mov	r4, r0
 80031de:	4608      	mov	r0, r1
 80031e0:	4611      	mov	r1, r2
 80031e2:	2200      	movs	r2, #0
 80031e4:	602a      	str	r2, [r5, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f7fd f9fe 	bl	80005e8 <_write>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_write_r+0x1e>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_write_r+0x1e>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	200001d4 	.word	0x200001d4

080031fc <_free_r>:
 80031fc:	b538      	push	{r3, r4, r5, lr}
 80031fe:	4605      	mov	r5, r0
 8003200:	2900      	cmp	r1, #0
 8003202:	d041      	beq.n	8003288 <_free_r+0x8c>
 8003204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003208:	1f0c      	subs	r4, r1, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfb8      	it	lt
 800320e:	18e4      	addlt	r4, r4, r3
 8003210:	f7ff fe36 	bl	8002e80 <__malloc_lock>
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <_free_r+0x90>)
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	b933      	cbnz	r3, 8003228 <_free_r+0x2c>
 800321a:	6063      	str	r3, [r4, #4]
 800321c:	6014      	str	r4, [r2, #0]
 800321e:	4628      	mov	r0, r5
 8003220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003224:	f7ff be32 	b.w	8002e8c <__malloc_unlock>
 8003228:	42a3      	cmp	r3, r4
 800322a:	d908      	bls.n	800323e <_free_r+0x42>
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	1821      	adds	r1, r4, r0
 8003230:	428b      	cmp	r3, r1
 8003232:	bf01      	itttt	eq
 8003234:	6819      	ldreq	r1, [r3, #0]
 8003236:	685b      	ldreq	r3, [r3, #4]
 8003238:	1809      	addeq	r1, r1, r0
 800323a:	6021      	streq	r1, [r4, #0]
 800323c:	e7ed      	b.n	800321a <_free_r+0x1e>
 800323e:	461a      	mov	r2, r3
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b10b      	cbz	r3, 8003248 <_free_r+0x4c>
 8003244:	42a3      	cmp	r3, r4
 8003246:	d9fa      	bls.n	800323e <_free_r+0x42>
 8003248:	6811      	ldr	r1, [r2, #0]
 800324a:	1850      	adds	r0, r2, r1
 800324c:	42a0      	cmp	r0, r4
 800324e:	d10b      	bne.n	8003268 <_free_r+0x6c>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	4401      	add	r1, r0
 8003254:	1850      	adds	r0, r2, r1
 8003256:	4283      	cmp	r3, r0
 8003258:	6011      	str	r1, [r2, #0]
 800325a:	d1e0      	bne.n	800321e <_free_r+0x22>
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	6053      	str	r3, [r2, #4]
 8003262:	4408      	add	r0, r1
 8003264:	6010      	str	r0, [r2, #0]
 8003266:	e7da      	b.n	800321e <_free_r+0x22>
 8003268:	d902      	bls.n	8003270 <_free_r+0x74>
 800326a:	230c      	movs	r3, #12
 800326c:	602b      	str	r3, [r5, #0]
 800326e:	e7d6      	b.n	800321e <_free_r+0x22>
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	1821      	adds	r1, r4, r0
 8003274:	428b      	cmp	r3, r1
 8003276:	bf04      	itt	eq
 8003278:	6819      	ldreq	r1, [r3, #0]
 800327a:	685b      	ldreq	r3, [r3, #4]
 800327c:	6063      	str	r3, [r4, #4]
 800327e:	bf04      	itt	eq
 8003280:	1809      	addeq	r1, r1, r0
 8003282:	6021      	streq	r1, [r4, #0]
 8003284:	6054      	str	r4, [r2, #4]
 8003286:	e7ca      	b.n	800321e <_free_r+0x22>
 8003288:	bd38      	pop	{r3, r4, r5, pc}
 800328a:	bf00      	nop
 800328c:	200001d0 	.word	0x200001d0

08003290 <_init>:
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	bf00      	nop
 8003294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003296:	bc08      	pop	{r3}
 8003298:	469e      	mov	lr, r3
 800329a:	4770      	bx	lr

0800329c <_fini>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr
