
Keypad_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006004  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08006198  08006198  00007198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006558  08006558  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006558  08006558  00007558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800655c  0800655c  0000755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006560  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          000001f8  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003cc  200003cc  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088f6  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000150e  00000000  00000000  00010afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00012008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000533  00000000  00000000  000126e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b13a  00000000  00000000  00012c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000092f4  00000000  00000000  0002dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c3ac  00000000  00000000  00037041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d33ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac4  00000000  00000000  000d3430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000d5ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800617c 	.word	0x0800617c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800617c 	.word	0x0800617c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <read_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char read_keypad (void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //Pull the (GPIOA, GPIO_PIN_7)low
 8000bac:	2200      	movs	r2, #0
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f001 f83e 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2140      	movs	r1, #64	@ 0x40
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc0:	f001 f838 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bcc:	f001 f832 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f001 f82c 	bl	8001c34 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)))  // if the Col 1 is low
 8000bdc:	2108      	movs	r1, #8
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f001 f80f 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d10a      	bne.n	8000c02 <read_keypad+0x5a>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000bec:	bf00      	nop
 8000bee:	2108      	movs	r1, #8
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf4:	f001 f806 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f7      	beq.n	8000bee <read_keypad+0x46>
		return '1';
 8000bfe:	2331      	movs	r3, #49	@ 0x31
 8000c00:	e165      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000c02:	2104      	movs	r1, #4
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f000 fffc 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10a      	bne.n	8000c28 <read_keypad+0x80>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000c12:	bf00      	nop
 8000c14:	2108      	movs	r1, #8
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1a:	f000 fff3 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f7      	beq.n	8000c14 <read_keypad+0x6c>
		return '2';
 8000c24:	2332      	movs	r3, #50	@ 0x32
 8000c26:	e152      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000c28:	2102      	movs	r1, #2
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f000 ffe9 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10a      	bne.n	8000c4e <read_keypad+0xa6>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000c38:	bf00      	nop
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c40:	f000 ffe0 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f7      	beq.n	8000c3a <read_keypad+0x92>
		return '3';
 8000c4a:	2333      	movs	r3, #51	@ 0x33
 8000c4c:	e13f      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 8000c4e:	2101      	movs	r1, #1
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c54:	f000 ffd6 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10a      	bne.n	8000c74 <read_keypad+0xcc>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)));   // wait till the button is pressed
 8000c5e:	bf00      	nop
 8000c60:	2101      	movs	r1, #1
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c66:	f000 ffcd 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d0f7      	beq.n	8000c60 <read_keypad+0xb8>
		return 'A';
 8000c70:	2341      	movs	r3, #65	@ 0x41
 8000c72:	e12c      	b.n	8000ece <read_keypad+0x326>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 8000c74:	2201      	movs	r2, #1
 8000c76:	2180      	movs	r1, #128	@ 0x80
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f000 ffda 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  // Pull the PA6 High
 8000c80:	2200      	movs	r2, #0
 8000c82:	2140      	movs	r1, #64	@ 0x40
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c88:	f000 ffd4 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2120      	movs	r1, #32
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f000 ffce 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca0:	f000 ffc8 	bl	8001c34 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000caa:	f000 ffab 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d10a      	bne.n	8000cca <read_keypad+0x122>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000cb4:	bf00      	nop
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f000 ffa2 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f7      	beq.n	8000cb6 <read_keypad+0x10e>
		return '4';
 8000cc6:	2334      	movs	r3, #52	@ 0x34
 8000cc8:	e101      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000cca:	2104      	movs	r1, #4
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f000 ff98 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10a      	bne.n	8000cf0 <read_keypad+0x148>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 8000cda:	bf00      	nop
 8000cdc:	2104      	movs	r1, #4
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce2:	f000 ff8f 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f7      	beq.n	8000cdc <read_keypad+0x134>
		return '5';
 8000cec:	2335      	movs	r3, #53	@ 0x35
 8000cee:	e0ee      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f000 ff85 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10a      	bne.n	8000d16 <read_keypad+0x16e>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000d00:	bf00      	nop
 8000d02:	2102      	movs	r1, #2
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f000 ff7c 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f7      	beq.n	8000d02 <read_keypad+0x15a>
		return '6';
 8000d12:	2336      	movs	r3, #54	@ 0x36
 8000d14:	e0db      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 8000d16:	2101      	movs	r1, #1
 8000d18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1c:	f000 ff72 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10a      	bne.n	8000d3c <read_keypad+0x194>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000d26:	bf00      	nop
 8000d28:	2108      	movs	r1, #8
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2e:	f000 ff69 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f7      	beq.n	8000d28 <read_keypad+0x180>
		return 'B';
 8000d38:	2342      	movs	r3, #66	@ 0x42
 8000d3a:	e0c8      	b.n	8000ece <read_keypad+0x326>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	2180      	movs	r1, #128	@ 0x80
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d44:	f000 ff76 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2140      	movs	r1, #64	@ 0x40
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f000 ff70 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Pull the PA5 High
 8000d54:	2200      	movs	r2, #0
 8000d56:	2120      	movs	r1, #32
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5c:	f000 ff6a 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d68:	f000 ff64 	bl	8001c34 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d72:	f000 ff47 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d10a      	bne.n	8000d92 <read_keypad+0x1ea>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000d7c:	bf00      	nop
 8000d7e:	2108      	movs	r1, #8
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d84:	f000 ff3e 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f7      	beq.n	8000d7e <read_keypad+0x1d6>
		return '7';
 8000d8e:	2337      	movs	r3, #55	@ 0x37
 8000d90:	e09d      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000d92:	2104      	movs	r1, #4
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d98:	f000 ff34 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10a      	bne.n	8000db8 <read_keypad+0x210>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 8000da2:	bf00      	nop
 8000da4:	2104      	movs	r1, #4
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000daa:	f000 ff2b 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f7      	beq.n	8000da4 <read_keypad+0x1fc>
		return '8';
 8000db4:	2338      	movs	r3, #56	@ 0x38
 8000db6:	e08a      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000db8:	2102      	movs	r1, #2
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f000 ff21 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10a      	bne.n	8000dde <read_keypad+0x236>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000dc8:	bf00      	nop
 8000dca:	2102      	movs	r1, #2
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd0:	f000 ff18 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f7      	beq.n	8000dca <read_keypad+0x222>
		return '9';
 8000dda:	2339      	movs	r3, #57	@ 0x39
 8000ddc:	e077      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 8000dde:	2101      	movs	r1, #1
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f000 ff0e 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10a      	bne.n	8000e04 <read_keypad+0x25c>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)));   // wait till the button is pressed
 8000dee:	bf00      	nop
 8000df0:	2101      	movs	r1, #1
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df6:	f000 ff05 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f7      	beq.n	8000df0 <read_keypad+0x248>
		return 'C';
 8000e00:	2343      	movs	r3, #67	@ 0x43
 8000e02:	e064      	b.n	8000ece <read_keypad+0x326>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 8000e04:	2201      	movs	r2, #1
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0c:	f000 ff12 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 8000e10:	2201      	movs	r2, #1
 8000e12:	2140      	movs	r1, #64	@ 0x40
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f000 ff0c 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2120      	movs	r1, #32
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f000 ff06 	bl	8001c34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Pull the PA4 High
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f000 ff00 	bl	8001c34 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 8000e34:	2108      	movs	r1, #8
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f000 fee3 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10a      	bne.n	8000e5a <read_keypad+0x2b2>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000e44:	bf00      	nop
 8000e46:	2108      	movs	r1, #8
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e4c:	f000 feda 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f7      	beq.n	8000e46 <read_keypad+0x29e>
		return '*';
 8000e56:	232a      	movs	r3, #42	@ 0x2a
 8000e58:	e039      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f000 fed0 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10a      	bne.n	8000e80 <read_keypad+0x2d8>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 8000e6a:	bf00      	nop
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e72:	f000 fec7 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f7      	beq.n	8000e6c <read_keypad+0x2c4>
		return '0';
 8000e7c:	2330      	movs	r3, #48	@ 0x30
 8000e7e:	e026      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000e80:	2102      	movs	r1, #2
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f000 febd 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10a      	bne.n	8000ea6 <read_keypad+0x2fe>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000e90:	bf00      	nop
 8000e92:	2102      	movs	r1, #2
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f000 feb4 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f7      	beq.n	8000e92 <read_keypad+0x2ea>
		return '#';
 8000ea2:	2323      	movs	r3, #35	@ 0x23
 8000ea4:	e013      	b.n	8000ece <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f000 feaa 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10a      	bne.n	8000ecc <read_keypad+0x324>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000eb6:	bf00      	nop
 8000eb8:	2108      	movs	r1, #8
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebe:	f000 fea1 	bl	8001c04 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f7      	beq.n	8000eb8 <read_keypad+0x310>
		return 'D';
 8000ec8:	2344      	movs	r3, #68	@ 0x44
 8000eca:	e000      	b.n	8000ece <read_keypad+0x326>
	}

	return 0x11;  // /if nothing is pressed
 8000ecc:	2311      	movs	r3, #17

}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eda:	f000 fbb1 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ede:	f000 f923 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee2:	f000 f98d 	bl	8001200 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 f95b 	bl	80011a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char key = 0x11;
 8000eea:	2311      	movs	r3, #17
 8000eec:	71fb      	strb	r3, [r7, #7]
  char message[4] = "0000";
 8000eee:	f04f 3330 	mov.w	r3, #808464432	@ 0x30303030
 8000ef2:	603b      	str	r3, [r7, #0]
  int count=0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  int releaseflag=1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  key = read_keypad();
 8000efc:	f7ff fe54 	bl	8000ba8 <read_keypad>
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
	  if (count<4 & key!='*' & key!='\021' & releaseflag==1){
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	bfd4      	ite	le
 8000f0a:	2301      	movle	r3, #1
 8000f0c:	2300      	movgt	r3, #0
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f14:	bf14      	ite	ne
 8000f16:	2301      	movne	r3, #1
 8000f18:	2300      	moveq	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b11      	cmp	r3, #17
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	2a01      	cmp	r2, #1
 8000f34:	bf0c      	ite	eq
 8000f36:	2201      	moveq	r2, #1
 8000f38:	2200      	movne	r2, #0
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00a      	beq.n	8000f58 <main+0x84>
		  message[count]=key;
 8000f42:	463a      	mov	r2, r7
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	701a      	strb	r2, [r3, #0]
		  count+=1;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
		  releaseflag=0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e7d1      	b.n	8000efc <main+0x28>
	  }
	  else if (key=='*'){
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f5c:	d10a      	bne.n	8000f74 <main+0xa0>
		  message[0]='0';
 8000f5e:	2330      	movs	r3, #48	@ 0x30
 8000f60:	703b      	strb	r3, [r7, #0]
		  message[1]='0';
 8000f62:	2330      	movs	r3, #48	@ 0x30
 8000f64:	707b      	strb	r3, [r7, #1]
		  message[2]='0';
 8000f66:	2330      	movs	r3, #48	@ 0x30
 8000f68:	70bb      	strb	r3, [r7, #2]
		  message[3]='0';
 8000f6a:	2330      	movs	r3, #48	@ 0x30
 8000f6c:	70fb      	strb	r3, [r7, #3]
		  count=0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e7c3      	b.n	8000efc <main+0x28>
	  }
	  else if (count==4){
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	f040 80c5 	bne.w	8001106 <main+0x232>
		  if(message[0]=='2' & message[1]=='B' & message[2]=='0' & message[3]=='9'){
 8000f7c:	783b      	ldrb	r3, [r7, #0]
 8000f7e:	2b32      	cmp	r3, #50	@ 0x32
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b42      	cmp	r3, #66	@ 0x42
 8000f8c:	bf0c      	ite	eq
 8000f8e:	2301      	moveq	r3, #1
 8000f90:	2300      	movne	r3, #0
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	78bb      	ldrb	r3, [r7, #2]
 8000f9c:	2b30      	cmp	r3, #48	@ 0x30
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	78fa      	ldrb	r2, [r7, #3]
 8000faa:	2a39      	cmp	r2, #57	@ 0x39
 8000fac:	bf0c      	ite	eq
 8000fae:	2201      	moveq	r2, #1
 8000fb0:	2200      	movne	r2, #0
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d018      	beq.n	8000fec <main+0x118>
			  //Send message to servo to open door
			  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2180      	movs	r1, #128	@ 0x80
 8000fbe:	4858      	ldr	r0, [pc, #352]	@ (8001120 <main+0x24c>)
 8000fc0:	f000 fe38 	bl	8001c34 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8000fc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc8:	f000 fba0 	bl	800170c <HAL_Delay>
			  message[0]='0';
 8000fcc:	2330      	movs	r3, #48	@ 0x30
 8000fce:	703b      	strb	r3, [r7, #0]
			  message[1]='0';
 8000fd0:	2330      	movs	r3, #48	@ 0x30
 8000fd2:	707b      	strb	r3, [r7, #1]
			  message[2]='0';
 8000fd4:	2330      	movs	r3, #48	@ 0x30
 8000fd6:	70bb      	strb	r3, [r7, #2]
			  message[3]='0';
 8000fd8:	2330      	movs	r3, #48	@ 0x30
 8000fda:	70fb      	strb	r3, [r7, #3]
			  count=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
			  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2180      	movs	r1, #128	@ 0x80
 8000fe4:	484e      	ldr	r0, [pc, #312]	@ (8001120 <main+0x24c>)
 8000fe6:	f000 fe25 	bl	8001c34 <HAL_GPIO_WritePin>
 8000fea:	e787      	b.n	8000efc <main+0x28>
		  }
		  else if(message[0]=='D' & message[1]=='1' & message[2]=='A' & message[3]=='7'){
 8000fec:	783b      	ldrb	r3, [r7, #0]
 8000fee:	2b44      	cmp	r3, #68	@ 0x44
 8000ff0:	bf0c      	ite	eq
 8000ff2:	2301      	moveq	r3, #1
 8000ff4:	2300      	movne	r3, #0
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b31      	cmp	r3, #49	@ 0x31
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4013      	ands	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	78bb      	ldrb	r3, [r7, #2]
 800100c:	2b41      	cmp	r3, #65	@ 0x41
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4013      	ands	r3, r2
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	2a37      	cmp	r2, #55	@ 0x37
 800101c:	bf0c      	ite	eq
 800101e:	2201      	moveq	r2, #1
 8001020:	2200      	movne	r2, #0
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d018      	beq.n	800105c <main+0x188>
			  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2140      	movs	r1, #64	@ 0x40
 800102e:	483c      	ldr	r0, [pc, #240]	@ (8001120 <main+0x24c>)
 8001030:	f000 fe00 	bl	8001c34 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001038:	f000 fb68 	bl	800170c <HAL_Delay>
			  	  message[0]='0';
 800103c:	2330      	movs	r3, #48	@ 0x30
 800103e:	703b      	strb	r3, [r7, #0]
				  message[1]='0';
 8001040:	2330      	movs	r3, #48	@ 0x30
 8001042:	707b      	strb	r3, [r7, #1]
				  message[2]='0';
 8001044:	2330      	movs	r3, #48	@ 0x30
 8001046:	70bb      	strb	r3, [r7, #2]
				  message[3]='0';
 8001048:	2330      	movs	r3, #48	@ 0x30
 800104a:	70fb      	strb	r3, [r7, #3]
				  count=0;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
				  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2140      	movs	r1, #64	@ 0x40
 8001054:	4832      	ldr	r0, [pc, #200]	@ (8001120 <main+0x24c>)
 8001056:	f000 fded 	bl	8001c34 <HAL_GPIO_WritePin>
 800105a:	e74f      	b.n	8000efc <main+0x28>
		  }
		  else if(message[0]=='3' & message[1]=='6' & message[2]=='5' & message[3]=='C'){
 800105c:	783b      	ldrb	r3, [r7, #0]
 800105e:	2b33      	cmp	r3, #51	@ 0x33
 8001060:	bf0c      	ite	eq
 8001062:	2301      	moveq	r3, #1
 8001064:	2300      	movne	r3, #0
 8001066:	b2da      	uxtb	r2, r3
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b36      	cmp	r3, #54	@ 0x36
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4013      	ands	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	2b35      	cmp	r3, #53	@ 0x35
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4013      	ands	r3, r2
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	2a43      	cmp	r2, #67	@ 0x43
 800108c:	bf0c      	ite	eq
 800108e:	2201      	moveq	r2, #1
 8001090:	2200      	movne	r2, #0
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d018      	beq.n	80010cc <main+0x1f8>
			  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2102      	movs	r1, #2
 800109e:	4820      	ldr	r0, [pc, #128]	@ (8001120 <main+0x24c>)
 80010a0:	f000 fdc8 	bl	8001c34 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80010a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a8:	f000 fb30 	bl	800170c <HAL_Delay>
			  message[0]='0';
 80010ac:	2330      	movs	r3, #48	@ 0x30
 80010ae:	703b      	strb	r3, [r7, #0]
			  message[1]='0';
 80010b0:	2330      	movs	r3, #48	@ 0x30
 80010b2:	707b      	strb	r3, [r7, #1]
			  message[2]='0';
 80010b4:	2330      	movs	r3, #48	@ 0x30
 80010b6:	70bb      	strb	r3, [r7, #2]
			  message[3]='0';
 80010b8:	2330      	movs	r3, #48	@ 0x30
 80010ba:	70fb      	strb	r3, [r7, #3]
			  count=0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
			  HAL_GPIO_WritePin (GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2102      	movs	r1, #2
 80010c4:	4816      	ldr	r0, [pc, #88]	@ (8001120 <main+0x24c>)
 80010c6:	f000 fdb5 	bl	8001c34 <HAL_GPIO_WritePin>
 80010ca:	e717      	b.n	8000efc <main+0x28>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d6:	f000 fdad 	bl	8001c34 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80010da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010de:	f000 fb15 	bl	800170c <HAL_Delay>
			  message[0]='0';
 80010e2:	2330      	movs	r3, #48	@ 0x30
 80010e4:	703b      	strb	r3, [r7, #0]
			  message[1]='0';
 80010e6:	2330      	movs	r3, #48	@ 0x30
 80010e8:	707b      	strb	r3, [r7, #1]
			  message[2]='0';
 80010ea:	2330      	movs	r3, #48	@ 0x30
 80010ec:	70bb      	strb	r3, [r7, #2]
			  message[3]='0';
 80010ee:	2330      	movs	r3, #48	@ 0x30
 80010f0:	70fb      	strb	r3, [r7, #3]
			  count=0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
			  HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f000 fd98 	bl	8001c34 <HAL_GPIO_WritePin>
 8001104:	e6fa      	b.n	8000efc <main+0x28>
		  }
	  }
	  else if (key=='\021'){
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b11      	cmp	r3, #17
 800110a:	d105      	bne.n	8001118 <main+0x244>
		  releaseflag=1;
 800110c:	2301      	movs	r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
		  HAL_Delay(100);
 8001110:	2064      	movs	r0, #100	@ 0x64
 8001112:	f000 fafb 	bl	800170c <HAL_Delay>
 8001116:	e6f1      	b.n	8000efc <main+0x28>
	  }else{
		  printf("Do Nothing");
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <main+0x250>)
 800111a:	f003 f8b9 	bl	8004290 <iprintf>
	  key = read_keypad();
 800111e:	e6ed      	b.n	8000efc <main+0x28>
 8001120:	48000400 	.word	0x48000400
 8001124:	08006198 	.word	0x08006198

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	@ 0x40
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2228      	movs	r2, #40	@ 0x28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 f8bc 	bl	80042b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fd80 	bl	8001c64 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800116a:	f000 f8ab 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fdaa 	bl	8002ce0 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001192:	f000 f897 	bl	80012c4 <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3740      	adds	r7, #64	@ 0x40
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011a6:	4a15      	ldr	r2, [pc, #84]	@ (80011fc <MX_USART2_UART_Init+0x5c>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ac:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <MX_USART2_UART_Init+0x58>)
 80011e4:	f001 ff9c 	bl	8003120 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f869 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f0 	.word	0x200001f0
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <MX_GPIO_Init+0xbc>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a28      	ldr	r2, [pc, #160]	@ (80012bc <MX_GPIO_Init+0xbc>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b26      	ldr	r3, [pc, #152]	@ (80012bc <MX_GPIO_Init+0xbc>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <MX_GPIO_Init+0xbc>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a22      	ldr	r2, [pc, #136]	@ (80012bc <MX_GPIO_Init+0xbc>)
 8001234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <MX_GPIO_Init+0xbc>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 800124c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001250:	f000 fcf0 	bl	8001c34 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	21c2      	movs	r1, #194	@ 0xc2
 8001258:	4819      	ldr	r0, [pc, #100]	@ (80012c0 <MX_GPIO_Init+0xc0>)
 800125a:	f000 fceb 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800125e:	230f      	movs	r3, #15
 8001260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001274:	f000 fb54 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001278:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800127c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001294:	f000 fb44 	bl	8001920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001298:	23c2      	movs	r3, #194	@ 0xc2
 800129a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_GPIO_Init+0xc0>)
 80012b0:	f000 fb36 	bl	8001920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	48000400 	.word	0x48000400

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <Error_Handler+0x8>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_MspInit+0x44>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <HAL_MspInit+0x44>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <HAL_MspInit+0x44>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_MspInit+0x44>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_MspInit+0x44>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_MspInit+0x44>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <HAL_UART_MspInit+0xb8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d145      	bne.n	80013c6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a1f      	ldr	r2, [pc, #124]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <HAL_UART_MspInit+0xbc>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001394:	2307      	movs	r3, #7
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f000 fabd 	bl	8001920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a6:	2308      	movs	r3, #8
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b6:	2307      	movs	r3, #7
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_UART_MspInit+0xc0>)
 80013c2:	f000 faad 	bl	8001920 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	@ 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40004400 	.word	0x40004400
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000400 	.word	0x48000400

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f94b 	bl	80016cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  return 1;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <_kill>:

int _kill(int pid, int sig)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001454:	f002 ff3a 	bl	80042cc <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	2216      	movs	r2, #22
 800145c:	601a      	str	r2, [r3, #0]
  return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <_exit>:

void _exit (int status)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001472:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffe7 	bl	800144a <_kill>
  while (1) {}    /* Make sure we hang here */
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <_exit+0x12>

08001480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
  }

  return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e009      	b.n	80014e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf1      	blt.n	80014cc <_write+0x12>
  }
  return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_close>:

int _close(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800151a:	605a      	str	r2, [r3, #4]
  return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	@ (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f002 fe9e 	bl	80042cc <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20003000 	.word	0x20003000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	20000278 	.word	0x20000278
 80015c4:	200003d0 	.word	0x200003d0

080015c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001624 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f0:	f7ff ffea 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopForever+0xe>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopForever+0x16>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800161a:	f002 fe5d 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7ff fc59 	bl	8000ed4 <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001624:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001630:	08006560 	.word	0x08006560
  ldr r2, =_sbss
 8001634:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001638:	200003cc 	.word	0x200003cc

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>
	...

08001640 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	4b08      	ldr	r3, [pc, #32]	@ (8001668 <HAL_Init+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <HAL_Init+0x28>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f931 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001656:	200f      	movs	r0, #15
 8001658:	f000 f808 	bl	800166c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165c:	f7ff fe38 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000

0800166c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_InitTick+0x54>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_InitTick+0x58>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
 8001686:	fbb2 f3f3 	udiv	r3, r2, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f93b 	bl	8001906 <HAL_SYSTICK_Config>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e00e      	b.n	80016b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b0f      	cmp	r3, #15
 800169e:	d80a      	bhi.n	80016b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a0:	2200      	movs	r2, #0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016a8:	f000 f911 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ac:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <HAL_InitTick+0x5c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	2000027c 	.word	0x2000027c

080016f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000027c 	.word	0x2000027c

0800170c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	@ (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	@ (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	@ 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff47 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff5c 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffb0 	bl	8001874 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001920:	b480      	push	{r7}
 8001922:	b087      	sub	sp, #28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192e:	e14e      	b.n	8001bce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	4013      	ands	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8140 	beq.w	8001bc8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d005      	beq.n	8001960 <HAL_GPIO_Init+0x40>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d130      	bne.n	80019c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001996:	2201      	movs	r2, #1
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f003 0201 	and.w	r2, r3, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d017      	beq.n	80019fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d123      	bne.n	8001a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	08da      	lsrs	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3208      	adds	r2, #8
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0203 	and.w	r2, r3, #3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 809a 	beq.w	8001bc8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a94:	4b55      	ldr	r3, [pc, #340]	@ (8001bec <HAL_GPIO_Init+0x2cc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a54      	ldr	r2, [pc, #336]	@ (8001bec <HAL_GPIO_Init+0x2cc>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b52      	ldr	r3, [pc, #328]	@ (8001bec <HAL_GPIO_Init+0x2cc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aac:	4a50      	ldr	r2, [pc, #320]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ad6:	d013      	beq.n	8001b00 <HAL_GPIO_Init+0x1e0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a46      	ldr	r2, [pc, #280]	@ (8001bf4 <HAL_GPIO_Init+0x2d4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00d      	beq.n	8001afc <HAL_GPIO_Init+0x1dc>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a45      	ldr	r2, [pc, #276]	@ (8001bf8 <HAL_GPIO_Init+0x2d8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d007      	beq.n	8001af8 <HAL_GPIO_Init+0x1d8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a44      	ldr	r2, [pc, #272]	@ (8001bfc <HAL_GPIO_Init+0x2dc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_GPIO_Init+0x1d4>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001af4:	2305      	movs	r3, #5
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_Init+0x1e2>
 8001b00:	2300      	movs	r3, #0
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b12:	4937      	ldr	r1, [pc, #220]	@ (8001bf0 <HAL_GPIO_Init+0x2d0>)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b20:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b44:	4a2e      	ldr	r2, [pc, #184]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b6e:	4a24      	ldr	r2, [pc, #144]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b98:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <HAL_GPIO_Init+0x2e0>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f47f aea9 	bne.w	8001930 <HAL_GPIO_Init+0x10>
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f001 b823 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 817d 	beq.w	8001f9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ca0:	4bbc      	ldr	r3, [pc, #752]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d00c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cac:	4bb9      	ldr	r3, [pc, #740]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d15c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x10e>
 8001cb8:	4bb6      	ldr	r3, [pc, #728]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc4:	d155      	bne.n	8001d72 <HAL_RCC_OscConfig+0x10e>
 8001cc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x94>
 8001cf2:	4ba8      	ldr	r3, [pc, #672]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e015      	b.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cfc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d10:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d20:	4b9c      	ldr	r3, [pc, #624]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d24:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d28:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 811f 	beq.w	8001f98 <HAL_RCC_OscConfig+0x334>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8116 	bne.w	8001f98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f000 bfaf 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12e>
 8001d84:	4b83      	ldr	r3, [pc, #524]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a82      	ldr	r2, [pc, #520]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e036      	b.n	8001e00 <HAL_RCC_OscConfig+0x19c>
 8001d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x158>
 8001da2:	4b7c      	ldr	r3, [pc, #496]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7b      	ldr	r2, [pc, #492]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b79      	ldr	r3, [pc, #484]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a78      	ldr	r2, [pc, #480]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e021      	b.n	8001e00 <HAL_RCC_OscConfig+0x19c>
 8001dbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x184>
 8001dce:	4b71      	ldr	r3, [pc, #452]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a70      	ldr	r2, [pc, #448]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6e      	ldr	r3, [pc, #440]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6d      	ldr	r2, [pc, #436]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0x19c>
 8001de8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b67      	ldr	r3, [pc, #412]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a66      	ldr	r2, [pc, #408]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e00:	4b64      	ldr	r3, [pc, #400]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e04:	f023 020f 	bic.w	r2, r3, #15
 8001e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	495f      	ldr	r1, [pc, #380]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d059      	beq.n	8001ede <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fc63 	bl	80016f4 <HAL_GetTick>
 8001e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fc5e 	bl	80016f4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	@ 0x64
 8001e42:	d902      	bls.n	8001e4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	f000 bf43 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e4e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0x218>
 8001e76:	4b47      	ldr	r3, [pc, #284]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e015      	b.n	8001ea8 <HAL_RCC_OscConfig+0x244>
 8001e7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e80:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e94:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001eac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001eb0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001eb4:	fa92 f2a2 	rbit	r2, r2
 8001eb8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ebc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ec0:	fab2 f282 	clz	r2, r2
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	f042 0220 	orr.w	r2, r2, #32
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	f002 021f 	and.w	r2, r2, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ab      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1d0>
 8001edc:	e05d      	b.n	8001f9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fc09 	bl	80016f4 <HAL_GetTick>
 8001ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc04 	bl	80016f4 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	@ 0x64
 8001ef6:	d902      	bls.n	8001efe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	f000 bee9 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8001efe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f02:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2cc>
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	e015      	b.n	8001f5c <HAL_RCC_OscConfig+0x2f8>
 8001f30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f34:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_RCC_OscConfig+0x330>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f60:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f64:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f70:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f042 0220 	orr.w	r2, r2, #32
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f002 021f 	and.w	r2, r2, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ab      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x284>
 8001f90:	e003      	b.n	8001f9a <HAL_RCC_OscConfig+0x336>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 817d 	beq.w	80022aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fb0:	4ba6      	ldr	r3, [pc, #664]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fbc:	4ba3      	ldr	r3, [pc, #652]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d172      	bne.n	80020ae <HAL_RCC_OscConfig+0x44a>
 8001fc8:	4ba0      	ldr	r3, [pc, #640]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d16c      	bne.n	80020ae <HAL_RCC_OscConfig+0x44a>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001fe6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_RCC_OscConfig+0x3a0>
 8001ffe:	4b93      	ldr	r3, [pc, #588]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0x3c8>
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800201c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002028:	4b88      	ldr	r3, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	2202      	movs	r2, #2
 800202e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002032:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002036:	fa92 f2a2 	rbit	r2, r2
 800203a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800203e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f042 0220 	orr.w	r2, r2, #32
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f002 021f 	and.w	r2, r2, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f202 	lsl.w	r2, r1, r2
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCC_OscConfig+0x410>
 800205e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002062:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 be2e 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	4b75      	ldr	r3, [pc, #468]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	21f8      	movs	r1, #248	@ 0xf8
 800208a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002092:	fa91 f1a1 	rbit	r1, r1
 8002096:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800209a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800209e:	fab1 f181 	clz	r1, r1
 80020a2:	b2c9      	uxtb	r1, r1
 80020a4:	408b      	lsls	r3, r1
 80020a6:	4969      	ldr	r1, [pc, #420]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ac:	e0fd      	b.n	80022aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8088 	beq.w	80021d0 <HAL_RCC_OscConfig+0x56c>
 80020c0:	2301      	movs	r3, #1
 80020c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	461a      	mov	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7ff fb02 	bl	80016f4 <HAL_GetTick>
 80020f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff fafd 	bl	80016f4 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d902      	bls.n	800210c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	f000 bde2 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800211e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_RCC_OscConfig+0x4d8>
 8002136:	4b45      	ldr	r3, [pc, #276]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	e013      	b.n	8002164 <HAL_RCC_OscConfig+0x500>
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002154:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002160:	4b3a      	ldr	r3, [pc, #232]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	2202      	movs	r2, #2
 8002166:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800216a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800216e:	fa92 f2a2 	rbit	r2, r2
 8002172:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002176:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0220 	orr.w	r2, r2, #32
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0af      	beq.n	80020f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	21f8      	movs	r1, #248	@ 0xf8
 80021ac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021b4:	fa91 f1a1 	rbit	r1, r1
 80021b8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021c0:	fab1 f181 	clz	r1, r1
 80021c4:	b2c9      	uxtb	r1, r1
 80021c6:	408b      	lsls	r3, r1
 80021c8:	4920      	ldr	r1, [pc, #128]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
 80021ce:	e06c      	b.n	80022aa <HAL_RCC_OscConfig+0x646>
 80021d0:	2301      	movs	r3, #1
 80021d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80021e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fa7a 	bl	80016f4 <HAL_GetTick>
 8002200:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fa75 	bl	80016f4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d902      	bls.n	800221c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	f000 bd5a 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800222e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	095b      	lsrs	r3, r3, #5
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d104      	bne.n	8002250 <HAL_RCC_OscConfig+0x5ec>
 8002246:	4b01      	ldr	r3, [pc, #4]	@ (800224c <HAL_RCC_OscConfig+0x5e8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	e015      	b.n	8002278 <HAL_RCC_OscConfig+0x614>
 800224c:	40021000 	.word	0x40021000
 8002250:	2302      	movs	r3, #2
 8002252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002268:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800226c:	fa93 f3a3 	rbit	r3, r3
 8002270:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002274:	4bc8      	ldr	r3, [pc, #800]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	2202      	movs	r2, #2
 800227a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800227e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002282:	fa92 f2a2 	rbit	r2, r2
 8002286:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800228a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ad      	bne.n	8002206 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8110 	beq.w	80024e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d079      	beq.n	80023c4 <HAL_RCC_OscConfig+0x760>
 80022d0:	2301      	movs	r3, #1
 80022d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80022e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4bab      	ldr	r3, [pc, #684]	@ (800259c <HAL_RCC_OscConfig+0x938>)
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	461a      	mov	r2, r3
 80022f6:	2301      	movs	r3, #1
 80022f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff f9fb 	bl	80016f4 <HAL_GetTick>
 80022fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff f9f6 	bl	80016f4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d902      	bls.n	800231a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	f000 bcdb 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800232c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002330:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002334:	2202      	movs	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002358:	2202      	movs	r2, #2
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002372:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002374:	4b88      	ldr	r3, [pc, #544]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 8002376:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002380:	2102      	movs	r1, #2
 8002382:	6019      	str	r1, [r3, #0]
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f1a3 	rbit	r1, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800239a:	6019      	str	r1, [r3, #0]
  return result;
 800239c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0a0      	beq.n	8002304 <HAL_RCC_OscConfig+0x6a0>
 80023c2:	e08d      	b.n	80024e0 <HAL_RCC_OscConfig+0x87c>
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023e6:	601a      	str	r2, [r3, #0]
  return result;
 80023e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b68      	ldr	r3, [pc, #416]	@ (800259c <HAL_RCC_OscConfig+0x938>)
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	461a      	mov	r2, r3
 8002402:	2300      	movs	r3, #0
 8002404:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff f975 	bl	80016f4 <HAL_GetTick>
 800240a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff f970 	bl	80016f4 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	f000 bc55 	b.w	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800242e:	2202      	movs	r2, #2
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002452:	2202      	movs	r2, #2
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002468:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002476:	2202      	movs	r2, #2
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	fa93 f2a3 	rbit	r2, r3
 8002488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002490:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 8002494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800249e:	2102      	movs	r1, #2
 80024a0:	6019      	str	r1, [r3, #0]
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f1a3 	rbit	r1, r3
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024b8:	6019      	str	r1, [r3, #0]
  return result;
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d197      	bne.n	8002410 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 81a1 	beq.w	8002838 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fc:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d116      	bne.n	8002536 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800251c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002520:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800252e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <HAL_RCC_OscConfig+0x93c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11a      	bne.n	8002578 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <HAL_RCC_OscConfig+0x93c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a16      	ldr	r2, [pc, #88]	@ (80025a0 <HAL_RCC_OscConfig+0x93c>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7ff f8d1 	bl	80016f4 <HAL_GetTick>
 8002552:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	e009      	b.n	800256c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7ff f8cc 	bl	80016f4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	@ 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e3b1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <HAL_RCC_OscConfig+0x93c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10d      	bne.n	80025a4 <HAL_RCC_OscConfig+0x940>
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a02      	ldr	r2, [pc, #8]	@ (8002598 <HAL_RCC_OscConfig+0x934>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	e03c      	b.n	8002610 <HAL_RCC_OscConfig+0x9ac>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	10908120 	.word	0x10908120
 80025a0:	40007000 	.word	0x40007000
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <HAL_RCC_OscConfig+0x96a>
 80025b4:	4bc1      	ldr	r3, [pc, #772]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4ac0      	ldr	r2, [pc, #768]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6213      	str	r3, [r2, #32]
 80025c0:	4bbe      	ldr	r3, [pc, #760]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	4abd      	ldr	r2, [pc, #756]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6213      	str	r3, [r2, #32]
 80025cc:	e020      	b.n	8002610 <HAL_RCC_OscConfig+0x9ac>
 80025ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x994>
 80025de:	4bb7      	ldr	r3, [pc, #732]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4ab6      	ldr	r2, [pc, #728]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4bb4      	ldr	r3, [pc, #720]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4ab3      	ldr	r2, [pc, #716]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x9ac>
 80025f8:	4bb0      	ldr	r3, [pc, #704]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4aaf      	ldr	r2, [pc, #700]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	4bad      	ldr	r3, [pc, #692]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4aac      	ldr	r2, [pc, #688]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8081 	beq.w	8002724 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff f867 	bl	80016f4 <HAL_GetTick>
 8002626:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7ff f862 	bl	80016f4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e345      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	fa93 f2a3 	rbit	r2, r3
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002686:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800268a:	601a      	str	r2, [r3, #0]
  return result;
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002694:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0xa4c>
 80026aa:	4b84      	ldr	r3, [pc, #528]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	e013      	b.n	80026d8 <HAL_RCC_OscConfig+0xa74>
 80026b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026b8:	2202      	movs	r2, #2
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4b79      	ldr	r3, [pc, #484]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026dc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026e0:	2102      	movs	r1, #2
 80026e2:	6011      	str	r1, [r2, #0]
 80026e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	fa92 f1a2 	rbit	r1, r2
 80026f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026fa:	6011      	str	r1, [r2, #0]
  return result;
 80026fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002700:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	fab2 f282 	clz	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	f002 021f 	and.w	r2, r2, #31
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d084      	beq.n	800262c <HAL_RCC_OscConfig+0x9c8>
 8002722:	e07f      	b.n	8002824 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002724:	f7fe ffe6 	bl	80016f4 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	e00b      	b.n	8002746 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe ffe1 	bl	80016f4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e2c4      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800274e:	2202      	movs	r2, #2
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002772:	2202      	movs	r2, #2
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	fa93 f2a3 	rbit	r2, r3
 8002784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002788:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800278c:	601a      	str	r2, [r3, #0]
  return result;
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002796:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_OscConfig+0xb4e>
 80027ac:	4b43      	ldr	r3, [pc, #268]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	e013      	b.n	80027da <HAL_RCC_OscConfig+0xb76>
 80027b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027ba:	2202      	movs	r2, #2
 80027bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027de:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027e2:	2102      	movs	r1, #2
 80027e4:	6011      	str	r1, [r2, #0]
 80027e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fa92 f1a2 	rbit	r1, r2
 80027f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027fc:	6011      	str	r1, [r2, #0]
  return result;
 80027fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002802:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	f002 021f 	and.w	r2, r2, #31
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d184      	bne.n	800272e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002824:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b23      	ldr	r3, [pc, #140]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a22      	ldr	r2, [pc, #136]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002836:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8242 	beq.w	8002cce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284a:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_RCC_OscConfig+0xc58>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	f000 8213 	beq.w	8002c7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	2b02      	cmp	r3, #2
 8002866:	f040 8162 	bne.w	8002b2e <HAL_RCC_OscConfig+0xeca>
 800286a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002872:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002894:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002898:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	461a      	mov	r2, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe ff20 	bl	80016f4 <HAL_GetTick>
 80028b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b8:	e00c      	b.n	80028d4 <HAL_RCC_OscConfig+0xc70>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe ff18 	bl	80016f4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1fd      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 80028d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028f8:	601a      	str	r2, [r3, #0]
  return result;
 80028fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002902:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	b2db      	uxtb	r3, r3
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_RCC_OscConfig+0xcba>
 8002918:	4bb0      	ldr	r3, [pc, #704]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	e027      	b.n	800296e <HAL_RCC_OscConfig+0xd0a>
 800291e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002922:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002926:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800292a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002930:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002948:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800294c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002956:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002964:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002972:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002976:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800297a:	6011      	str	r1, [r2, #0]
 800297c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002980:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	fa92 f1a2 	rbit	r1, r2
 800298a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002992:	6011      	str	r1, [r2, #0]
  return result;
 8002994:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002998:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	f042 0220 	orr.w	r2, r2, #32
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	f002 021f 	and.w	r2, r2, #31
 80029ae:	2101      	movs	r1, #1
 80029b0:	fa01 f202 	lsl.w	r2, r1, r2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d182      	bne.n	80028c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ba:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	430b      	orrs	r3, r1
 80029dc:	497f      	ldr	r1, [pc, #508]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
 80029e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a02:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a06:	601a      	str	r2, [r3, #0]
  return result;
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a1c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	461a      	mov	r2, r3
 8002a24:	2301      	movs	r3, #1
 8002a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe fe64 	bl	80016f4 <HAL_GetTick>
 8002a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fe5f 	bl	80016f4 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e144      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a6a:	601a      	str	r2, [r3, #0]
  return result;
 8002a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a70:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe2c>
 8002a8a:	4b54      	ldr	r3, [pc, #336]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	e027      	b.n	8002ae0 <HAL_RCC_OscConfig+0xe7c>
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ae8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002aec:	6011      	str	r1, [r2, #0]
 8002aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002af2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	fa92 f1a2 	rbit	r1, r2
 8002afc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b00:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b04:	6011      	str	r1, [r2, #0]
  return result;
 8002b06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b0a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	f042 0220 	orr.w	r2, r2, #32
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f002 021f 	and.w	r2, r2, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f202 	lsl.w	r2, r1, r2
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d082      	beq.n	8002a32 <HAL_RCC_OscConfig+0xdce>
 8002b2c:	e0cf      	b.n	8002cce <HAL_RCC_OscConfig+0x106a>
 8002b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b32:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b40:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b52:	601a      	str	r2, [r3, #0]
  return result;
 8002b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b58:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b5c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fdbe 	bl	80016f4 <HAL_GetTick>
 8002b78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7c:	e009      	b.n	8002b92 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fdb9 	bl	80016f4 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e09e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d104      	bne.n	8002be0 <HAL_RCC_OscConfig+0xf7c>
 8002bd6:	4b01      	ldr	r3, [pc, #4]	@ (8002bdc <HAL_RCC_OscConfig+0xf78>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	e029      	b.n	8002c30 <HAL_RCC_OscConfig+0xfcc>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	fa93 f2a3 	rbit	r2, r3
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c18:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	fa93 f2a3 	rbit	r2, r3
 8002c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c26:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <HAL_RCC_OscConfig+0x1078>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c34:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c3c:	6011      	str	r1, [r2, #0]
 8002c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c42:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fa92 f1a2 	rbit	r1, r2
 8002c4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c50:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c54:	6011      	str	r1, [r2, #0]
  return result;
 8002c56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	fab2 f282 	clz	r2, r2
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f002 021f 	and.w	r2, r2, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d180      	bne.n	8002b7e <HAL_RCC_OscConfig+0xf1a>
 8002c7c:	e027      	b.n	8002cce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e01e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c92:	4b12      	ldr	r3, [pc, #72]	@ (8002cdc <HAL_RCC_OscConfig+0x1078>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c9e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10b      	bne.n	8002cca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b09e      	sub	sp, #120	@ 0x78
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e162      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b90      	ldr	r3, [pc, #576]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b8d      	ldr	r3, [pc, #564]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	498b      	ldr	r1, [pc, #556]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b89      	ldr	r3, [pc, #548]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e14a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	497f      	ldr	r1, [pc, #508]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80dc 	beq.w	8002f0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d13c      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xf6>
 8002d5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d60:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xa6>
 8002d80:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e00f      	b.n	8002da6 <HAL_RCC_ClockConfig+0xc6>
 8002d86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d98:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002da2:	4b67      	ldr	r3, [pc, #412]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002daa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dae:	fa92 f2a2 	rbit	r2, r2
 8002db2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002db4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f002 021f 	and.w	r2, r2, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d17b      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0f3      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d13c      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x178>
 8002dde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002de2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x128>
 8002e02:	4b4f      	ldr	r3, [pc, #316]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e00f      	b.n	8002e28 <HAL_RCC_ClockConfig+0x148>
 8002e08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e24:	4b46      	ldr	r3, [pc, #280]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e2c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e30:	fa92 f2a2 	rbit	r2, r2
 8002e34:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0220 	orr.w	r2, r2, #32
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d13a      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b2      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x1a0>
 8002e7a:	4b31      	ldr	r3, [pc, #196]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	e00d      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1bc>
 8002e80:	2302      	movs	r3, #2
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	623b      	str	r3, [r7, #32]
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	4b29      	ldr	r3, [pc, #164]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	61ba      	str	r2, [r7, #24]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	fa92 f2a2 	rbit	r2, r2
 8002ea6:	617a      	str	r2, [r7, #20]
  return result;
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e079      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eca:	4b1d      	ldr	r3, [pc, #116]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f023 0203 	bic.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	491a      	ldr	r1, [pc, #104]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fc0a 	bl	80016f4 <HAL_GetTick>
 8002ee0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee4:	f7fe fc06 	bl	80016f4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e061      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <HAL_RCC_ClockConfig+0x260>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 020c 	and.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d1eb      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d214      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4906      	ldr	r1, [pc, #24]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <HAL_RCC_ClockConfig+0x25c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e040      	b.n	8002fbe <HAL_RCC_ClockConfig+0x2de>
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	491a      	ldr	r1, [pc, #104]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6e:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4912      	ldr	r1, [pc, #72]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f82:	f000 f829 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f86:	4601      	mov	r1, r0
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2e8>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f90:	22f0      	movs	r2, #240	@ 0xf0
 8002f92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	fa92 f2a2 	rbit	r2, r2
 8002f9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	fab2 f282 	clz	r2, r2
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	40d3      	lsrs	r3, r2
 8002fa6:	4a09      	ldr	r2, [pc, #36]	@ (8002fcc <HAL_RCC_ClockConfig+0x2ec>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	fa21 f303 	lsr.w	r3, r1, r3
 8002fae:	4a08      	ldr	r2, [pc, #32]	@ (8002fd0 <HAL_RCC_ClockConfig+0x2f0>)
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <HAL_RCC_ClockConfig+0x2f4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb58 	bl	800166c <HAL_InitTick>
  
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3778      	adds	r7, #120	@ 0x78
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	080061a4 	.word	0x080061a4
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800306c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d002      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x30>
 8003002:	2b08      	cmp	r3, #8
 8003004:	d003      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0x36>
 8003006:	e026      	b.n	8003056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x98>)
 800300a:	613b      	str	r3, [r7, #16]
      break;
 800300c:	e026      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0c9b      	lsrs	r3, r3, #18
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003018:	5cd3      	ldrb	r3, [r2, r3]
 800301a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800301c:	4b13      	ldr	r3, [pc, #76]	@ (800306c <HAL_RCC_GetSysClockFreq+0x94>)
 800301e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003026:	5cd3      	ldrb	r3, [r2, r3]
 8003028:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003034:	4a0e      	ldr	r2, [pc, #56]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x98>)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	fbb2 f2f3 	udiv	r2, r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e004      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a0c      	ldr	r2, [pc, #48]	@ (800307c <HAL_RCC_GetSysClockFreq+0xa4>)
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	613b      	str	r3, [r7, #16]
      break;
 8003054:	e002      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x98>)
 8003058:	613b      	str	r3, [r7, #16]
      break;
 800305a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800305c:	693b      	ldr	r3, [r7, #16]
}
 800305e:	4618      	mov	r0, r3
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	007a1200 	.word	0x007a1200
 8003074:	080061bc 	.word	0x080061bc
 8003078:	080061cc 	.word	0x080061cc
 800307c:	003d0900 	.word	0x003d0900

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800309e:	f7ff ffef 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030ac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	603a      	str	r2, [r7, #0]
  return result;
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	40d3      	lsrs	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	080061b4 	.word	0x080061b4

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030e2:	f7ff ffcd 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030e6:	4601      	mov	r1, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030f0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	fa92 f2a2 	rbit	r2, r2
 80030fc:	603a      	str	r2, [r7, #0]
  return result;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	fab2 f282 	clz	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	40d3      	lsrs	r3, r2
 8003108:	4a04      	ldr	r2, [pc, #16]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x40>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	080061b4 	.word	0x080061b4

08003120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e040      	b.n	80031b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f8e8 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	@ 0x24
 800314c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f95e 	bl	8003428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f825 	bl	80031bc <UART_SetConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e01b      	b.n	80031b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800318a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800319a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f9dd 	bl	800356c <UART_CheckIdleState>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003410 <UART_SetConfig+0x254>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a78      	ldr	r2, [pc, #480]	@ (8003414 <UART_SetConfig+0x258>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d120      	bne.n	800327a <UART_SetConfig+0xbe>
 8003238:	4b77      	ldr	r3, [pc, #476]	@ (8003418 <UART_SetConfig+0x25c>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b03      	cmp	r3, #3
 8003242:	d817      	bhi.n	8003274 <UART_SetConfig+0xb8>
 8003244:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <UART_SetConfig+0x90>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003269 	.word	0x08003269
 8003254:	0800326f 	.word	0x0800326f
 8003258:	08003263 	.word	0x08003263
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e01d      	b.n	800329e <UART_SetConfig+0xe2>
 8003262:	2302      	movs	r3, #2
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e01a      	b.n	800329e <UART_SetConfig+0xe2>
 8003268:	2304      	movs	r3, #4
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e017      	b.n	800329e <UART_SetConfig+0xe2>
 800326e:	2308      	movs	r3, #8
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e014      	b.n	800329e <UART_SetConfig+0xe2>
 8003274:	2310      	movs	r3, #16
 8003276:	77fb      	strb	r3, [r7, #31]
 8003278:	e011      	b.n	800329e <UART_SetConfig+0xe2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a67      	ldr	r2, [pc, #412]	@ (800341c <UART_SetConfig+0x260>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d102      	bne.n	800328a <UART_SetConfig+0xce>
 8003284:	2300      	movs	r3, #0
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e009      	b.n	800329e <UART_SetConfig+0xe2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a64      	ldr	r2, [pc, #400]	@ (8003420 <UART_SetConfig+0x264>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d102      	bne.n	800329a <UART_SetConfig+0xde>
 8003294:	2300      	movs	r3, #0
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e001      	b.n	800329e <UART_SetConfig+0xe2>
 800329a:	2310      	movs	r3, #16
 800329c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a6:	d15a      	bne.n	800335e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80032a8:	7ffb      	ldrb	r3, [r7, #31]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d827      	bhi.n	80032fe <UART_SetConfig+0x142>
 80032ae:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <UART_SetConfig+0xf8>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	080032ff 	.word	0x080032ff
 80032c4:	080032ef 	.word	0x080032ef
 80032c8:	080032ff 	.word	0x080032ff
 80032cc:	080032ff 	.word	0x080032ff
 80032d0:	080032ff 	.word	0x080032ff
 80032d4:	080032f7 	.word	0x080032f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7ff fede 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 80032dc:	61b8      	str	r0, [r7, #24]
        break;
 80032de:	e013      	b.n	8003308 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7ff fefc 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 80032e4:	61b8      	str	r0, [r7, #24]
        break;
 80032e6:	e00f      	b.n	8003308 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003424 <UART_SetConfig+0x268>)
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e00c      	b.n	8003308 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ee:	f7ff fe73 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80032f2:	61b8      	str	r0, [r7, #24]
        break;
 80032f4:	e008      	b.n	8003308 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fa:	61bb      	str	r3, [r7, #24]
        break;
 80032fc:	e004      	b.n	8003308 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	77bb      	strb	r3, [r7, #30]
        break;
 8003306:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d074      	beq.n	80033f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	441a      	add	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d916      	bls.n	8003358 <UART_SetConfig+0x19c>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003330:	d212      	bcs.n	8003358 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	b29b      	uxth	r3, r3
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	b29a      	uxth	r2, r3
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	4313      	orrs	r3, r2
 800334c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	89fa      	ldrh	r2, [r7, #14]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e04f      	b.n	80033f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	77bb      	strb	r3, [r7, #30]
 800335c:	e04c      	b.n	80033f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d828      	bhi.n	80033b6 <UART_SetConfig+0x1fa>
 8003364:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <UART_SetConfig+0x1b0>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003391 	.word	0x08003391
 8003370:	08003399 	.word	0x08003399
 8003374:	080033a1 	.word	0x080033a1
 8003378:	080033b7 	.word	0x080033b7
 800337c:	080033a7 	.word	0x080033a7
 8003380:	080033b7 	.word	0x080033b7
 8003384:	080033b7 	.word	0x080033b7
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033af 	.word	0x080033af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7ff fe82 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003394:	61b8      	str	r0, [r7, #24]
        break;
 8003396:	e013      	b.n	80033c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003398:	f7ff fea0 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 800339c:	61b8      	str	r0, [r7, #24]
        break;
 800339e:	e00f      	b.n	80033c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b20      	ldr	r3, [pc, #128]	@ (8003424 <UART_SetConfig+0x268>)
 80033a2:	61bb      	str	r3, [r7, #24]
        break;
 80033a4:	e00c      	b.n	80033c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7ff fe17 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80033aa:	61b8      	str	r0, [r7, #24]
        break;
 80033ac:	e008      	b.n	80033c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b2:	61bb      	str	r3, [r7, #24]
        break;
 80033b4:	e004      	b.n	80033c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	77bb      	strb	r3, [r7, #30]
        break;
 80033be:	bf00      	nop
    }

    if (pclk != 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	085a      	lsrs	r2, r3, #1
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	441a      	add	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	2b0f      	cmp	r3, #15
 80033de:	d909      	bls.n	80033f4 <UART_SetConfig+0x238>
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e6:	d205      	bcs.n	80033f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	e001      	b.n	80033f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003404:	7fbb      	ldrb	r3, [r7, #30]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	efff69f3 	.word	0xefff69f3
 8003414:	40013800 	.word	0x40013800
 8003418:	40021000 	.word	0x40021000
 800341c:	40004400 	.word	0x40004400
 8003420:	40004800 	.word	0x40004800
 8003424:	007a1200 	.word	0x007a1200

08003428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01a      	beq.n	800353e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003526:	d10a      	bne.n	800353e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b098      	sub	sp, #96	@ 0x60
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800357c:	f7fe f8ba 	bl	80016f4 <HAL_GetTick>
 8003580:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0308 	and.w	r3, r3, #8
 800358c:	2b08      	cmp	r3, #8
 800358e:	d12e      	bne.n	80035ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f88c 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d021      	beq.n	80035ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035be:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e6      	bne.n	80035aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e062      	b.n	80036b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d149      	bne.n	8003690 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	2200      	movs	r2, #0
 8003606:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f856 	bl	80036bc <UART_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03c      	beq.n	8003690 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	623b      	str	r3, [r7, #32]
   return(result);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
 8003636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800363a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363c:	e841 2300 	strex	r3, r2, [r1]
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e6      	bne.n	8003616 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	60fb      	str	r3, [r7, #12]
   return(result);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3308      	adds	r3, #8
 8003666:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	617b      	str	r3, [r7, #20]
   return(result);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e5      	bne.n	8003648 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e011      	b.n	80036b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3758      	adds	r7, #88	@ 0x58
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036cc:	e04f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036d4:	d04b      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fe f80d 	bl	80016f4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <UART_WaitOnFlagUntilTimeout+0x30>
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e04e      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d037      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b80      	cmp	r3, #128	@ 0x80
 8003702:	d034      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d031      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b08      	cmp	r3, #8
 8003716:	d110      	bne.n	800373a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2208      	movs	r2, #8
 800371e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f838 	bl	8003796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2208      	movs	r2, #8
 800372a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e029      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003748:	d111      	bne.n	800376e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f81e 	bl	8003796 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e00f      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	bf0c      	ite	eq
 800377e:	2301      	moveq	r3, #1
 8003780:	2300      	movne	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	429a      	cmp	r2, r3
 800378a:	d0a0      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003796:	b480      	push	{r7}
 8003798:	b095      	sub	sp, #84	@ 0x54
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e6      	bne.n	800379e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e5      	bne.n	80037d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003808:	2b01      	cmp	r3, #1
 800380a:	d118      	bne.n	800383e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	60bb      	str	r3, [r7, #8]
   return(result);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f023 0310 	bic.w	r3, r3, #16
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	613b      	str	r3, [r7, #16]
   return(result);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e6      	bne.n	800380c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003852:	bf00      	nop
 8003854:	3754      	adds	r7, #84	@ 0x54
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <__cvt>:
 800385e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003862:	ec57 6b10 	vmov	r6, r7, d0
 8003866:	2f00      	cmp	r7, #0
 8003868:	460c      	mov	r4, r1
 800386a:	4619      	mov	r1, r3
 800386c:	463b      	mov	r3, r7
 800386e:	bfbb      	ittet	lt
 8003870:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003874:	461f      	movlt	r7, r3
 8003876:	2300      	movge	r3, #0
 8003878:	232d      	movlt	r3, #45	@ 0x2d
 800387a:	700b      	strb	r3, [r1, #0]
 800387c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800387e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003882:	4691      	mov	r9, r2
 8003884:	f023 0820 	bic.w	r8, r3, #32
 8003888:	bfbc      	itt	lt
 800388a:	4632      	movlt	r2, r6
 800388c:	4616      	movlt	r6, r2
 800388e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003892:	d005      	beq.n	80038a0 <__cvt+0x42>
 8003894:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003898:	d100      	bne.n	800389c <__cvt+0x3e>
 800389a:	3401      	adds	r4, #1
 800389c:	2102      	movs	r1, #2
 800389e:	e000      	b.n	80038a2 <__cvt+0x44>
 80038a0:	2103      	movs	r1, #3
 80038a2:	ab03      	add	r3, sp, #12
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	ab02      	add	r3, sp, #8
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	ec47 6b10 	vmov	d0, r6, r7
 80038ae:	4653      	mov	r3, sl
 80038b0:	4622      	mov	r2, r4
 80038b2:	f000 fdc1 	bl	8004438 <_dtoa_r>
 80038b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80038ba:	4605      	mov	r5, r0
 80038bc:	d119      	bne.n	80038f2 <__cvt+0x94>
 80038be:	f019 0f01 	tst.w	r9, #1
 80038c2:	d00e      	beq.n	80038e2 <__cvt+0x84>
 80038c4:	eb00 0904 	add.w	r9, r0, r4
 80038c8:	2200      	movs	r2, #0
 80038ca:	2300      	movs	r3, #0
 80038cc:	4630      	mov	r0, r6
 80038ce:	4639      	mov	r1, r7
 80038d0:	f7fd f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80038d4:	b108      	cbz	r0, 80038da <__cvt+0x7c>
 80038d6:	f8cd 900c 	str.w	r9, [sp, #12]
 80038da:	2230      	movs	r2, #48	@ 0x30
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	454b      	cmp	r3, r9
 80038e0:	d31e      	bcc.n	8003920 <__cvt+0xc2>
 80038e2:	9b03      	ldr	r3, [sp, #12]
 80038e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038e6:	1b5b      	subs	r3, r3, r5
 80038e8:	4628      	mov	r0, r5
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	b004      	add	sp, #16
 80038ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038f6:	eb00 0904 	add.w	r9, r0, r4
 80038fa:	d1e5      	bne.n	80038c8 <__cvt+0x6a>
 80038fc:	7803      	ldrb	r3, [r0, #0]
 80038fe:	2b30      	cmp	r3, #48	@ 0x30
 8003900:	d10a      	bne.n	8003918 <__cvt+0xba>
 8003902:	2200      	movs	r2, #0
 8003904:	2300      	movs	r3, #0
 8003906:	4630      	mov	r0, r6
 8003908:	4639      	mov	r1, r7
 800390a:	f7fd f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800390e:	b918      	cbnz	r0, 8003918 <__cvt+0xba>
 8003910:	f1c4 0401 	rsb	r4, r4, #1
 8003914:	f8ca 4000 	str.w	r4, [sl]
 8003918:	f8da 3000 	ldr.w	r3, [sl]
 800391c:	4499      	add	r9, r3
 800391e:	e7d3      	b.n	80038c8 <__cvt+0x6a>
 8003920:	1c59      	adds	r1, r3, #1
 8003922:	9103      	str	r1, [sp, #12]
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e7d9      	b.n	80038dc <__cvt+0x7e>

08003928 <__exponent>:
 8003928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800392a:	2900      	cmp	r1, #0
 800392c:	bfba      	itte	lt
 800392e:	4249      	neglt	r1, r1
 8003930:	232d      	movlt	r3, #45	@ 0x2d
 8003932:	232b      	movge	r3, #43	@ 0x2b
 8003934:	2909      	cmp	r1, #9
 8003936:	7002      	strb	r2, [r0, #0]
 8003938:	7043      	strb	r3, [r0, #1]
 800393a:	dd29      	ble.n	8003990 <__exponent+0x68>
 800393c:	f10d 0307 	add.w	r3, sp, #7
 8003940:	461d      	mov	r5, r3
 8003942:	270a      	movs	r7, #10
 8003944:	461a      	mov	r2, r3
 8003946:	fbb1 f6f7 	udiv	r6, r1, r7
 800394a:	fb07 1416 	mls	r4, r7, r6, r1
 800394e:	3430      	adds	r4, #48	@ 0x30
 8003950:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003954:	460c      	mov	r4, r1
 8003956:	2c63      	cmp	r4, #99	@ 0x63
 8003958:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800395c:	4631      	mov	r1, r6
 800395e:	dcf1      	bgt.n	8003944 <__exponent+0x1c>
 8003960:	3130      	adds	r1, #48	@ 0x30
 8003962:	1e94      	subs	r4, r2, #2
 8003964:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003968:	1c41      	adds	r1, r0, #1
 800396a:	4623      	mov	r3, r4
 800396c:	42ab      	cmp	r3, r5
 800396e:	d30a      	bcc.n	8003986 <__exponent+0x5e>
 8003970:	f10d 0309 	add.w	r3, sp, #9
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	42ac      	cmp	r4, r5
 8003978:	bf88      	it	hi
 800397a:	2300      	movhi	r3, #0
 800397c:	3302      	adds	r3, #2
 800397e:	4403      	add	r3, r0
 8003980:	1a18      	subs	r0, r3, r0
 8003982:	b003      	add	sp, #12
 8003984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003986:	f813 6b01 	ldrb.w	r6, [r3], #1
 800398a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800398e:	e7ed      	b.n	800396c <__exponent+0x44>
 8003990:	2330      	movs	r3, #48	@ 0x30
 8003992:	3130      	adds	r1, #48	@ 0x30
 8003994:	7083      	strb	r3, [r0, #2]
 8003996:	70c1      	strb	r1, [r0, #3]
 8003998:	1d03      	adds	r3, r0, #4
 800399a:	e7f1      	b.n	8003980 <__exponent+0x58>

0800399c <_printf_float>:
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	b08d      	sub	sp, #52	@ 0x34
 80039a2:	460c      	mov	r4, r1
 80039a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80039a8:	4616      	mov	r6, r2
 80039aa:	461f      	mov	r7, r3
 80039ac:	4605      	mov	r5, r0
 80039ae:	f000 fc89 	bl	80042c4 <_localeconv_r>
 80039b2:	6803      	ldr	r3, [r0, #0]
 80039b4:	9304      	str	r3, [sp, #16]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fc5a 	bl	8000270 <strlen>
 80039bc:	2300      	movs	r3, #0
 80039be:	930a      	str	r3, [sp, #40]	@ 0x28
 80039c0:	f8d8 3000 	ldr.w	r3, [r8]
 80039c4:	9005      	str	r0, [sp, #20]
 80039c6:	3307      	adds	r3, #7
 80039c8:	f023 0307 	bic.w	r3, r3, #7
 80039cc:	f103 0208 	add.w	r2, r3, #8
 80039d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039d4:	f8d4 b000 	ldr.w	fp, [r4]
 80039d8:	f8c8 2000 	str.w	r2, [r8]
 80039dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80039e4:	9307      	str	r3, [sp, #28]
 80039e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80039ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039f2:	4b9c      	ldr	r3, [pc, #624]	@ (8003c64 <_printf_float+0x2c8>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f8:	f7fd f898 	bl	8000b2c <__aeabi_dcmpun>
 80039fc:	bb70      	cbnz	r0, 8003a5c <_printf_float+0xc0>
 80039fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a02:	4b98      	ldr	r3, [pc, #608]	@ (8003c64 <_printf_float+0x2c8>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a08:	f7fd f872 	bl	8000af0 <__aeabi_dcmple>
 8003a0c:	bb30      	cbnz	r0, 8003a5c <_printf_float+0xc0>
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2300      	movs	r3, #0
 8003a12:	4640      	mov	r0, r8
 8003a14:	4649      	mov	r1, r9
 8003a16:	f7fd f861 	bl	8000adc <__aeabi_dcmplt>
 8003a1a:	b110      	cbz	r0, 8003a22 <_printf_float+0x86>
 8003a1c:	232d      	movs	r3, #45	@ 0x2d
 8003a1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a22:	4a91      	ldr	r2, [pc, #580]	@ (8003c68 <_printf_float+0x2cc>)
 8003a24:	4b91      	ldr	r3, [pc, #580]	@ (8003c6c <_printf_float+0x2d0>)
 8003a26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a2a:	bf94      	ite	ls
 8003a2c:	4690      	movls	r8, r2
 8003a2e:	4698      	movhi	r8, r3
 8003a30:	2303      	movs	r3, #3
 8003a32:	6123      	str	r3, [r4, #16]
 8003a34:	f02b 0304 	bic.w	r3, fp, #4
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	f04f 0900 	mov.w	r9, #0
 8003a3e:	9700      	str	r7, [sp, #0]
 8003a40:	4633      	mov	r3, r6
 8003a42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003a44:	4621      	mov	r1, r4
 8003a46:	4628      	mov	r0, r5
 8003a48:	f000 f9d2 	bl	8003df0 <_printf_common>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	f040 808d 	bne.w	8003b6c <_printf_float+0x1d0>
 8003a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a56:	b00d      	add	sp, #52	@ 0x34
 8003a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	4640      	mov	r0, r8
 8003a62:	4649      	mov	r1, r9
 8003a64:	f7fd f862 	bl	8000b2c <__aeabi_dcmpun>
 8003a68:	b140      	cbz	r0, 8003a7c <_printf_float+0xe0>
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bfbc      	itt	lt
 8003a70:	232d      	movlt	r3, #45	@ 0x2d
 8003a72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a76:	4a7e      	ldr	r2, [pc, #504]	@ (8003c70 <_printf_float+0x2d4>)
 8003a78:	4b7e      	ldr	r3, [pc, #504]	@ (8003c74 <_printf_float+0x2d8>)
 8003a7a:	e7d4      	b.n	8003a26 <_printf_float+0x8a>
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003a82:	9206      	str	r2, [sp, #24]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	d13b      	bne.n	8003b00 <_printf_float+0x164>
 8003a88:	2306      	movs	r3, #6
 8003a8a:	6063      	str	r3, [r4, #4]
 8003a8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003a90:	2300      	movs	r3, #0
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	9303      	str	r3, [sp, #12]
 8003a96:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003a9c:	ab09      	add	r3, sp, #36	@ 0x24
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	6861      	ldr	r1, [r4, #4]
 8003aa2:	ec49 8b10 	vmov	d0, r8, r9
 8003aa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7ff fed7 	bl	800385e <__cvt>
 8003ab0:	9b06      	ldr	r3, [sp, #24]
 8003ab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003ab4:	2b47      	cmp	r3, #71	@ 0x47
 8003ab6:	4680      	mov	r8, r0
 8003ab8:	d129      	bne.n	8003b0e <_printf_float+0x172>
 8003aba:	1cc8      	adds	r0, r1, #3
 8003abc:	db02      	blt.n	8003ac4 <_printf_float+0x128>
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	dd41      	ble.n	8003b48 <_printf_float+0x1ac>
 8003ac4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ac8:	fa5f fa8a 	uxtb.w	sl, sl
 8003acc:	3901      	subs	r1, #1
 8003ace:	4652      	mov	r2, sl
 8003ad0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ad4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ad6:	f7ff ff27 	bl	8003928 <__exponent>
 8003ada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003adc:	1813      	adds	r3, r2, r0
 8003ade:	2a01      	cmp	r2, #1
 8003ae0:	4681      	mov	r9, r0
 8003ae2:	6123      	str	r3, [r4, #16]
 8003ae4:	dc02      	bgt.n	8003aec <_printf_float+0x150>
 8003ae6:	6822      	ldr	r2, [r4, #0]
 8003ae8:	07d2      	lsls	r2, r2, #31
 8003aea:	d501      	bpl.n	8003af0 <_printf_float+0x154>
 8003aec:	3301      	adds	r3, #1
 8003aee:	6123      	str	r3, [r4, #16]
 8003af0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0a2      	beq.n	8003a3e <_printf_float+0xa2>
 8003af8:	232d      	movs	r3, #45	@ 0x2d
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003afe:	e79e      	b.n	8003a3e <_printf_float+0xa2>
 8003b00:	9a06      	ldr	r2, [sp, #24]
 8003b02:	2a47      	cmp	r2, #71	@ 0x47
 8003b04:	d1c2      	bne.n	8003a8c <_printf_float+0xf0>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1c0      	bne.n	8003a8c <_printf_float+0xf0>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e7bd      	b.n	8003a8a <_printf_float+0xee>
 8003b0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b12:	d9db      	bls.n	8003acc <_printf_float+0x130>
 8003b14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b18:	d118      	bne.n	8003b4c <_printf_float+0x1b0>
 8003b1a:	2900      	cmp	r1, #0
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	dd0b      	ble.n	8003b38 <_printf_float+0x19c>
 8003b20:	6121      	str	r1, [r4, #16]
 8003b22:	b913      	cbnz	r3, 8003b2a <_printf_float+0x18e>
 8003b24:	6822      	ldr	r2, [r4, #0]
 8003b26:	07d0      	lsls	r0, r2, #31
 8003b28:	d502      	bpl.n	8003b30 <_printf_float+0x194>
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	440b      	add	r3, r1
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b32:	f04f 0900 	mov.w	r9, #0
 8003b36:	e7db      	b.n	8003af0 <_printf_float+0x154>
 8003b38:	b913      	cbnz	r3, 8003b40 <_printf_float+0x1a4>
 8003b3a:	6822      	ldr	r2, [r4, #0]
 8003b3c:	07d2      	lsls	r2, r2, #31
 8003b3e:	d501      	bpl.n	8003b44 <_printf_float+0x1a8>
 8003b40:	3302      	adds	r3, #2
 8003b42:	e7f4      	b.n	8003b2e <_printf_float+0x192>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e7f2      	b.n	8003b2e <_printf_float+0x192>
 8003b48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b4e:	4299      	cmp	r1, r3
 8003b50:	db05      	blt.n	8003b5e <_printf_float+0x1c2>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	6121      	str	r1, [r4, #16]
 8003b56:	07d8      	lsls	r0, r3, #31
 8003b58:	d5ea      	bpl.n	8003b30 <_printf_float+0x194>
 8003b5a:	1c4b      	adds	r3, r1, #1
 8003b5c:	e7e7      	b.n	8003b2e <_printf_float+0x192>
 8003b5e:	2900      	cmp	r1, #0
 8003b60:	bfd4      	ite	le
 8003b62:	f1c1 0202 	rsble	r2, r1, #2
 8003b66:	2201      	movgt	r2, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	e7e0      	b.n	8003b2e <_printf_float+0x192>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	055a      	lsls	r2, r3, #21
 8003b70:	d407      	bmi.n	8003b82 <_printf_float+0x1e6>
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	4642      	mov	r2, r8
 8003b76:	4631      	mov	r1, r6
 8003b78:	4628      	mov	r0, r5
 8003b7a:	47b8      	blx	r7
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d12b      	bne.n	8003bd8 <_printf_float+0x23c>
 8003b80:	e767      	b.n	8003a52 <_printf_float+0xb6>
 8003b82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b86:	f240 80dd 	bls.w	8003d44 <_printf_float+0x3a8>
 8003b8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2300      	movs	r3, #0
 8003b92:	f7fc ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d033      	beq.n	8003c02 <_printf_float+0x266>
 8003b9a:	4a37      	ldr	r2, [pc, #220]	@ (8003c78 <_printf_float+0x2dc>)
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	47b8      	blx	r7
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	f43f af54 	beq.w	8003a52 <_printf_float+0xb6>
 8003baa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003bae:	4543      	cmp	r3, r8
 8003bb0:	db02      	blt.n	8003bb8 <_printf_float+0x21c>
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	07d8      	lsls	r0, r3, #31
 8003bb6:	d50f      	bpl.n	8003bd8 <_printf_float+0x23c>
 8003bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b8      	blx	r7
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f43f af45 	beq.w	8003a52 <_printf_float+0xb6>
 8003bc8:	f04f 0900 	mov.w	r9, #0
 8003bcc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003bd0:	f104 0a1a 	add.w	sl, r4, #26
 8003bd4:	45c8      	cmp	r8, r9
 8003bd6:	dc09      	bgt.n	8003bec <_printf_float+0x250>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	079b      	lsls	r3, r3, #30
 8003bdc:	f100 8103 	bmi.w	8003de6 <_printf_float+0x44a>
 8003be0:	68e0      	ldr	r0, [r4, #12]
 8003be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003be4:	4298      	cmp	r0, r3
 8003be6:	bfb8      	it	lt
 8003be8:	4618      	movlt	r0, r3
 8003bea:	e734      	b.n	8003a56 <_printf_float+0xba>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4652      	mov	r2, sl
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b8      	blx	r7
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f43f af2b 	beq.w	8003a52 <_printf_float+0xb6>
 8003bfc:	f109 0901 	add.w	r9, r9, #1
 8003c00:	e7e8      	b.n	8003bd4 <_printf_float+0x238>
 8003c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	dc39      	bgt.n	8003c7c <_printf_float+0x2e0>
 8003c08:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <_printf_float+0x2dc>)
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	4628      	mov	r0, r5
 8003c10:	47b8      	blx	r7
 8003c12:	3001      	adds	r0, #1
 8003c14:	f43f af1d 	beq.w	8003a52 <_printf_float+0xb6>
 8003c18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003c1c:	ea59 0303 	orrs.w	r3, r9, r3
 8003c20:	d102      	bne.n	8003c28 <_printf_float+0x28c>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	07d9      	lsls	r1, r3, #31
 8003c26:	d5d7      	bpl.n	8003bd8 <_printf_float+0x23c>
 8003c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4628      	mov	r0, r5
 8003c30:	47b8      	blx	r7
 8003c32:	3001      	adds	r0, #1
 8003c34:	f43f af0d 	beq.w	8003a52 <_printf_float+0xb6>
 8003c38:	f04f 0a00 	mov.w	sl, #0
 8003c3c:	f104 0b1a 	add.w	fp, r4, #26
 8003c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c42:	425b      	negs	r3, r3
 8003c44:	4553      	cmp	r3, sl
 8003c46:	dc01      	bgt.n	8003c4c <_printf_float+0x2b0>
 8003c48:	464b      	mov	r3, r9
 8003c4a:	e793      	b.n	8003b74 <_printf_float+0x1d8>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	465a      	mov	r2, fp
 8003c50:	4631      	mov	r1, r6
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b8      	blx	r7
 8003c56:	3001      	adds	r0, #1
 8003c58:	f43f aefb 	beq.w	8003a52 <_printf_float+0xb6>
 8003c5c:	f10a 0a01 	add.w	sl, sl, #1
 8003c60:	e7ee      	b.n	8003c40 <_printf_float+0x2a4>
 8003c62:	bf00      	nop
 8003c64:	7fefffff 	.word	0x7fefffff
 8003c68:	080061dc 	.word	0x080061dc
 8003c6c:	080061e0 	.word	0x080061e0
 8003c70:	080061e4 	.word	0x080061e4
 8003c74:	080061e8 	.word	0x080061e8
 8003c78:	080061ec 	.word	0x080061ec
 8003c7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003c82:	4553      	cmp	r3, sl
 8003c84:	bfa8      	it	ge
 8003c86:	4653      	movge	r3, sl
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	dc36      	bgt.n	8003cfc <_printf_float+0x360>
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c96:	f104 021a 	add.w	r2, r4, #26
 8003c9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c9c:	9306      	str	r3, [sp, #24]
 8003c9e:	eba3 0309 	sub.w	r3, r3, r9
 8003ca2:	455b      	cmp	r3, fp
 8003ca4:	dc31      	bgt.n	8003d0a <_printf_float+0x36e>
 8003ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ca8:	459a      	cmp	sl, r3
 8003caa:	dc3a      	bgt.n	8003d22 <_printf_float+0x386>
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	07da      	lsls	r2, r3, #31
 8003cb0:	d437      	bmi.n	8003d22 <_printf_float+0x386>
 8003cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cb4:	ebaa 0903 	sub.w	r9, sl, r3
 8003cb8:	9b06      	ldr	r3, [sp, #24]
 8003cba:	ebaa 0303 	sub.w	r3, sl, r3
 8003cbe:	4599      	cmp	r9, r3
 8003cc0:	bfa8      	it	ge
 8003cc2:	4699      	movge	r9, r3
 8003cc4:	f1b9 0f00 	cmp.w	r9, #0
 8003cc8:	dc33      	bgt.n	8003d32 <_printf_float+0x396>
 8003cca:	f04f 0800 	mov.w	r8, #0
 8003cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cd2:	f104 0b1a 	add.w	fp, r4, #26
 8003cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8003cdc:	eba3 0309 	sub.w	r3, r3, r9
 8003ce0:	4543      	cmp	r3, r8
 8003ce2:	f77f af79 	ble.w	8003bd8 <_printf_float+0x23c>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	465a      	mov	r2, fp
 8003cea:	4631      	mov	r1, r6
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b8      	blx	r7
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	f43f aeae 	beq.w	8003a52 <_printf_float+0xb6>
 8003cf6:	f108 0801 	add.w	r8, r8, #1
 8003cfa:	e7ec      	b.n	8003cd6 <_printf_float+0x33a>
 8003cfc:	4642      	mov	r2, r8
 8003cfe:	4631      	mov	r1, r6
 8003d00:	4628      	mov	r0, r5
 8003d02:	47b8      	blx	r7
 8003d04:	3001      	adds	r0, #1
 8003d06:	d1c2      	bne.n	8003c8e <_printf_float+0x2f2>
 8003d08:	e6a3      	b.n	8003a52 <_printf_float+0xb6>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4628      	mov	r0, r5
 8003d10:	9206      	str	r2, [sp, #24]
 8003d12:	47b8      	blx	r7
 8003d14:	3001      	adds	r0, #1
 8003d16:	f43f ae9c 	beq.w	8003a52 <_printf_float+0xb6>
 8003d1a:	9a06      	ldr	r2, [sp, #24]
 8003d1c:	f10b 0b01 	add.w	fp, fp, #1
 8003d20:	e7bb      	b.n	8003c9a <_printf_float+0x2fe>
 8003d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d1c0      	bne.n	8003cb2 <_printf_float+0x316>
 8003d30:	e68f      	b.n	8003a52 <_printf_float+0xb6>
 8003d32:	9a06      	ldr	r2, [sp, #24]
 8003d34:	464b      	mov	r3, r9
 8003d36:	4442      	add	r2, r8
 8003d38:	4631      	mov	r1, r6
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	47b8      	blx	r7
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d1c3      	bne.n	8003cca <_printf_float+0x32e>
 8003d42:	e686      	b.n	8003a52 <_printf_float+0xb6>
 8003d44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d48:	f1ba 0f01 	cmp.w	sl, #1
 8003d4c:	dc01      	bgt.n	8003d52 <_printf_float+0x3b6>
 8003d4e:	07db      	lsls	r3, r3, #31
 8003d50:	d536      	bpl.n	8003dc0 <_printf_float+0x424>
 8003d52:	2301      	movs	r3, #1
 8003d54:	4642      	mov	r2, r8
 8003d56:	4631      	mov	r1, r6
 8003d58:	4628      	mov	r0, r5
 8003d5a:	47b8      	blx	r7
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	f43f ae78 	beq.w	8003a52 <_printf_float+0xb6>
 8003d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d66:	4631      	mov	r1, r6
 8003d68:	4628      	mov	r0, r5
 8003d6a:	47b8      	blx	r7
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	f43f ae70 	beq.w	8003a52 <_printf_float+0xb6>
 8003d72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d76:	2200      	movs	r2, #0
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003d7e:	f7fc fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d82:	b9c0      	cbnz	r0, 8003db6 <_printf_float+0x41a>
 8003d84:	4653      	mov	r3, sl
 8003d86:	f108 0201 	add.w	r2, r8, #1
 8003d8a:	4631      	mov	r1, r6
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	47b8      	blx	r7
 8003d90:	3001      	adds	r0, #1
 8003d92:	d10c      	bne.n	8003dae <_printf_float+0x412>
 8003d94:	e65d      	b.n	8003a52 <_printf_float+0xb6>
 8003d96:	2301      	movs	r3, #1
 8003d98:	465a      	mov	r2, fp
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b8      	blx	r7
 8003da0:	3001      	adds	r0, #1
 8003da2:	f43f ae56 	beq.w	8003a52 <_printf_float+0xb6>
 8003da6:	f108 0801 	add.w	r8, r8, #1
 8003daa:	45d0      	cmp	r8, sl
 8003dac:	dbf3      	blt.n	8003d96 <_printf_float+0x3fa>
 8003dae:	464b      	mov	r3, r9
 8003db0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003db4:	e6df      	b.n	8003b76 <_printf_float+0x1da>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	f104 0b1a 	add.w	fp, r4, #26
 8003dbe:	e7f4      	b.n	8003daa <_printf_float+0x40e>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	e7e1      	b.n	8003d8a <_printf_float+0x3ee>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	464a      	mov	r2, r9
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4628      	mov	r0, r5
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f ae3e 	beq.w	8003a52 <_printf_float+0xb6>
 8003dd6:	f108 0801 	add.w	r8, r8, #1
 8003dda:	68e3      	ldr	r3, [r4, #12]
 8003ddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003dde:	1a5b      	subs	r3, r3, r1
 8003de0:	4543      	cmp	r3, r8
 8003de2:	dcf0      	bgt.n	8003dc6 <_printf_float+0x42a>
 8003de4:	e6fc      	b.n	8003be0 <_printf_float+0x244>
 8003de6:	f04f 0800 	mov.w	r8, #0
 8003dea:	f104 0919 	add.w	r9, r4, #25
 8003dee:	e7f4      	b.n	8003dda <_printf_float+0x43e>

08003df0 <_printf_common>:
 8003df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	4616      	mov	r6, r2
 8003df6:	4698      	mov	r8, r3
 8003df8:	688a      	ldr	r2, [r1, #8]
 8003dfa:	690b      	ldr	r3, [r1, #16]
 8003dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e00:	4293      	cmp	r3, r2
 8003e02:	bfb8      	it	lt
 8003e04:	4613      	movlt	r3, r2
 8003e06:	6033      	str	r3, [r6, #0]
 8003e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	b10a      	cbz	r2, 8003e16 <_printf_common+0x26>
 8003e12:	3301      	adds	r3, #1
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	0699      	lsls	r1, r3, #26
 8003e1a:	bf42      	ittt	mi
 8003e1c:	6833      	ldrmi	r3, [r6, #0]
 8003e1e:	3302      	addmi	r3, #2
 8003e20:	6033      	strmi	r3, [r6, #0]
 8003e22:	6825      	ldr	r5, [r4, #0]
 8003e24:	f015 0506 	ands.w	r5, r5, #6
 8003e28:	d106      	bne.n	8003e38 <_printf_common+0x48>
 8003e2a:	f104 0a19 	add.w	sl, r4, #25
 8003e2e:	68e3      	ldr	r3, [r4, #12]
 8003e30:	6832      	ldr	r2, [r6, #0]
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	42ab      	cmp	r3, r5
 8003e36:	dc26      	bgt.n	8003e86 <_printf_common+0x96>
 8003e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e3c:	6822      	ldr	r2, [r4, #0]
 8003e3e:	3b00      	subs	r3, #0
 8003e40:	bf18      	it	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	0692      	lsls	r2, r2, #26
 8003e46:	d42b      	bmi.n	8003ea0 <_printf_common+0xb0>
 8003e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c8      	blx	r9
 8003e52:	3001      	adds	r0, #1
 8003e54:	d01e      	beq.n	8003e94 <_printf_common+0xa4>
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	6922      	ldr	r2, [r4, #16]
 8003e5a:	f003 0306 	and.w	r3, r3, #6
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	bf02      	ittt	eq
 8003e62:	68e5      	ldreq	r5, [r4, #12]
 8003e64:	6833      	ldreq	r3, [r6, #0]
 8003e66:	1aed      	subeq	r5, r5, r3
 8003e68:	68a3      	ldr	r3, [r4, #8]
 8003e6a:	bf0c      	ite	eq
 8003e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e70:	2500      	movne	r5, #0
 8003e72:	4293      	cmp	r3, r2
 8003e74:	bfc4      	itt	gt
 8003e76:	1a9b      	subgt	r3, r3, r2
 8003e78:	18ed      	addgt	r5, r5, r3
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	341a      	adds	r4, #26
 8003e7e:	42b5      	cmp	r5, r6
 8003e80:	d11a      	bne.n	8003eb8 <_printf_common+0xc8>
 8003e82:	2000      	movs	r0, #0
 8003e84:	e008      	b.n	8003e98 <_printf_common+0xa8>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4652      	mov	r2, sl
 8003e8a:	4641      	mov	r1, r8
 8003e8c:	4638      	mov	r0, r7
 8003e8e:	47c8      	blx	r9
 8003e90:	3001      	adds	r0, #1
 8003e92:	d103      	bne.n	8003e9c <_printf_common+0xac>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	e7c6      	b.n	8003e2e <_printf_common+0x3e>
 8003ea0:	18e1      	adds	r1, r4, r3
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	2030      	movs	r0, #48	@ 0x30
 8003ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eaa:	4422      	add	r2, r4
 8003eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	e7c7      	b.n	8003e48 <_printf_common+0x58>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4622      	mov	r2, r4
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c8      	blx	r9
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d0e6      	beq.n	8003e94 <_printf_common+0xa4>
 8003ec6:	3601      	adds	r6, #1
 8003ec8:	e7d9      	b.n	8003e7e <_printf_common+0x8e>
	...

08003ecc <_printf_i>:
 8003ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	7e0f      	ldrb	r7, [r1, #24]
 8003ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ed4:	2f78      	cmp	r7, #120	@ 0x78
 8003ed6:	4691      	mov	r9, r2
 8003ed8:	4680      	mov	r8, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	469a      	mov	sl, r3
 8003ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ee2:	d807      	bhi.n	8003ef4 <_printf_i+0x28>
 8003ee4:	2f62      	cmp	r7, #98	@ 0x62
 8003ee6:	d80a      	bhi.n	8003efe <_printf_i+0x32>
 8003ee8:	2f00      	cmp	r7, #0
 8003eea:	f000 80d2 	beq.w	8004092 <_printf_i+0x1c6>
 8003eee:	2f58      	cmp	r7, #88	@ 0x58
 8003ef0:	f000 80b9 	beq.w	8004066 <_printf_i+0x19a>
 8003ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003efc:	e03a      	b.n	8003f74 <_printf_i+0xa8>
 8003efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f02:	2b15      	cmp	r3, #21
 8003f04:	d8f6      	bhi.n	8003ef4 <_printf_i+0x28>
 8003f06:	a101      	add	r1, pc, #4	@ (adr r1, 8003f0c <_printf_i+0x40>)
 8003f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f79 	.word	0x08003f79
 8003f14:	08003ef5 	.word	0x08003ef5
 8003f18:	08003ef5 	.word	0x08003ef5
 8003f1c:	08003ef5 	.word	0x08003ef5
 8003f20:	08003ef5 	.word	0x08003ef5
 8003f24:	08003f79 	.word	0x08003f79
 8003f28:	08003ef5 	.word	0x08003ef5
 8003f2c:	08003ef5 	.word	0x08003ef5
 8003f30:	08003ef5 	.word	0x08003ef5
 8003f34:	08003ef5 	.word	0x08003ef5
 8003f38:	08004079 	.word	0x08004079
 8003f3c:	08003fa3 	.word	0x08003fa3
 8003f40:	08004033 	.word	0x08004033
 8003f44:	08003ef5 	.word	0x08003ef5
 8003f48:	08003ef5 	.word	0x08003ef5
 8003f4c:	0800409b 	.word	0x0800409b
 8003f50:	08003ef5 	.word	0x08003ef5
 8003f54:	08003fa3 	.word	0x08003fa3
 8003f58:	08003ef5 	.word	0x08003ef5
 8003f5c:	08003ef5 	.word	0x08003ef5
 8003f60:	0800403b 	.word	0x0800403b
 8003f64:	6833      	ldr	r3, [r6, #0]
 8003f66:	1d1a      	adds	r2, r3, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6032      	str	r2, [r6, #0]
 8003f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f74:	2301      	movs	r3, #1
 8003f76:	e09d      	b.n	80040b4 <_printf_i+0x1e8>
 8003f78:	6833      	ldr	r3, [r6, #0]
 8003f7a:	6820      	ldr	r0, [r4, #0]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	6031      	str	r1, [r6, #0]
 8003f80:	0606      	lsls	r6, r0, #24
 8003f82:	d501      	bpl.n	8003f88 <_printf_i+0xbc>
 8003f84:	681d      	ldr	r5, [r3, #0]
 8003f86:	e003      	b.n	8003f90 <_printf_i+0xc4>
 8003f88:	0645      	lsls	r5, r0, #25
 8003f8a:	d5fb      	bpl.n	8003f84 <_printf_i+0xb8>
 8003f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f90:	2d00      	cmp	r5, #0
 8003f92:	da03      	bge.n	8003f9c <_printf_i+0xd0>
 8003f94:	232d      	movs	r3, #45	@ 0x2d
 8003f96:	426d      	negs	r5, r5
 8003f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f9c:	4859      	ldr	r0, [pc, #356]	@ (8004104 <_printf_i+0x238>)
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	e011      	b.n	8003fc6 <_printf_i+0xfa>
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	6833      	ldr	r3, [r6, #0]
 8003fa6:	0608      	lsls	r0, r1, #24
 8003fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fac:	d402      	bmi.n	8003fb4 <_printf_i+0xe8>
 8003fae:	0649      	lsls	r1, r1, #25
 8003fb0:	bf48      	it	mi
 8003fb2:	b2ad      	uxthmi	r5, r5
 8003fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fb6:	4853      	ldr	r0, [pc, #332]	@ (8004104 <_printf_i+0x238>)
 8003fb8:	6033      	str	r3, [r6, #0]
 8003fba:	bf14      	ite	ne
 8003fbc:	230a      	movne	r3, #10
 8003fbe:	2308      	moveq	r3, #8
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fc6:	6866      	ldr	r6, [r4, #4]
 8003fc8:	60a6      	str	r6, [r4, #8]
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	bfa2      	ittt	ge
 8003fce:	6821      	ldrge	r1, [r4, #0]
 8003fd0:	f021 0104 	bicge.w	r1, r1, #4
 8003fd4:	6021      	strge	r1, [r4, #0]
 8003fd6:	b90d      	cbnz	r5, 8003fdc <_printf_i+0x110>
 8003fd8:	2e00      	cmp	r6, #0
 8003fda:	d04b      	beq.n	8004074 <_printf_i+0x1a8>
 8003fdc:	4616      	mov	r6, r2
 8003fde:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fe2:	fb03 5711 	mls	r7, r3, r1, r5
 8003fe6:	5dc7      	ldrb	r7, [r0, r7]
 8003fe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fec:	462f      	mov	r7, r5
 8003fee:	42bb      	cmp	r3, r7
 8003ff0:	460d      	mov	r5, r1
 8003ff2:	d9f4      	bls.n	8003fde <_printf_i+0x112>
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d10b      	bne.n	8004010 <_printf_i+0x144>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	07df      	lsls	r7, r3, #31
 8003ffc:	d508      	bpl.n	8004010 <_printf_i+0x144>
 8003ffe:	6923      	ldr	r3, [r4, #16]
 8004000:	6861      	ldr	r1, [r4, #4]
 8004002:	4299      	cmp	r1, r3
 8004004:	bfde      	ittt	le
 8004006:	2330      	movle	r3, #48	@ 0x30
 8004008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800400c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004010:	1b92      	subs	r2, r2, r6
 8004012:	6122      	str	r2, [r4, #16]
 8004014:	f8cd a000 	str.w	sl, [sp]
 8004018:	464b      	mov	r3, r9
 800401a:	aa03      	add	r2, sp, #12
 800401c:	4621      	mov	r1, r4
 800401e:	4640      	mov	r0, r8
 8004020:	f7ff fee6 	bl	8003df0 <_printf_common>
 8004024:	3001      	adds	r0, #1
 8004026:	d14a      	bne.n	80040be <_printf_i+0x1f2>
 8004028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800402c:	b004      	add	sp, #16
 800402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	f043 0320 	orr.w	r3, r3, #32
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	4833      	ldr	r0, [pc, #204]	@ (8004108 <_printf_i+0x23c>)
 800403c:	2778      	movs	r7, #120	@ 0x78
 800403e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	6831      	ldr	r1, [r6, #0]
 8004046:	061f      	lsls	r7, r3, #24
 8004048:	f851 5b04 	ldr.w	r5, [r1], #4
 800404c:	d402      	bmi.n	8004054 <_printf_i+0x188>
 800404e:	065f      	lsls	r7, r3, #25
 8004050:	bf48      	it	mi
 8004052:	b2ad      	uxthmi	r5, r5
 8004054:	6031      	str	r1, [r6, #0]
 8004056:	07d9      	lsls	r1, r3, #31
 8004058:	bf44      	itt	mi
 800405a:	f043 0320 	orrmi.w	r3, r3, #32
 800405e:	6023      	strmi	r3, [r4, #0]
 8004060:	b11d      	cbz	r5, 800406a <_printf_i+0x19e>
 8004062:	2310      	movs	r3, #16
 8004064:	e7ac      	b.n	8003fc0 <_printf_i+0xf4>
 8004066:	4827      	ldr	r0, [pc, #156]	@ (8004104 <_printf_i+0x238>)
 8004068:	e7e9      	b.n	800403e <_printf_i+0x172>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	f023 0320 	bic.w	r3, r3, #32
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	e7f6      	b.n	8004062 <_printf_i+0x196>
 8004074:	4616      	mov	r6, r2
 8004076:	e7bd      	b.n	8003ff4 <_printf_i+0x128>
 8004078:	6833      	ldr	r3, [r6, #0]
 800407a:	6825      	ldr	r5, [r4, #0]
 800407c:	6961      	ldr	r1, [r4, #20]
 800407e:	1d18      	adds	r0, r3, #4
 8004080:	6030      	str	r0, [r6, #0]
 8004082:	062e      	lsls	r6, r5, #24
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	d501      	bpl.n	800408c <_printf_i+0x1c0>
 8004088:	6019      	str	r1, [r3, #0]
 800408a:	e002      	b.n	8004092 <_printf_i+0x1c6>
 800408c:	0668      	lsls	r0, r5, #25
 800408e:	d5fb      	bpl.n	8004088 <_printf_i+0x1bc>
 8004090:	8019      	strh	r1, [r3, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	4616      	mov	r6, r2
 8004098:	e7bc      	b.n	8004014 <_printf_i+0x148>
 800409a:	6833      	ldr	r3, [r6, #0]
 800409c:	1d1a      	adds	r2, r3, #4
 800409e:	6032      	str	r2, [r6, #0]
 80040a0:	681e      	ldr	r6, [r3, #0]
 80040a2:	6862      	ldr	r2, [r4, #4]
 80040a4:	2100      	movs	r1, #0
 80040a6:	4630      	mov	r0, r6
 80040a8:	f7fc f892 	bl	80001d0 <memchr>
 80040ac:	b108      	cbz	r0, 80040b2 <_printf_i+0x1e6>
 80040ae:	1b80      	subs	r0, r0, r6
 80040b0:	6060      	str	r0, [r4, #4]
 80040b2:	6863      	ldr	r3, [r4, #4]
 80040b4:	6123      	str	r3, [r4, #16]
 80040b6:	2300      	movs	r3, #0
 80040b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040bc:	e7aa      	b.n	8004014 <_printf_i+0x148>
 80040be:	6923      	ldr	r3, [r4, #16]
 80040c0:	4632      	mov	r2, r6
 80040c2:	4649      	mov	r1, r9
 80040c4:	4640      	mov	r0, r8
 80040c6:	47d0      	blx	sl
 80040c8:	3001      	adds	r0, #1
 80040ca:	d0ad      	beq.n	8004028 <_printf_i+0x15c>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	079b      	lsls	r3, r3, #30
 80040d0:	d413      	bmi.n	80040fa <_printf_i+0x22e>
 80040d2:	68e0      	ldr	r0, [r4, #12]
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	4298      	cmp	r0, r3
 80040d8:	bfb8      	it	lt
 80040da:	4618      	movlt	r0, r3
 80040dc:	e7a6      	b.n	800402c <_printf_i+0x160>
 80040de:	2301      	movs	r3, #1
 80040e0:	4632      	mov	r2, r6
 80040e2:	4649      	mov	r1, r9
 80040e4:	4640      	mov	r0, r8
 80040e6:	47d0      	blx	sl
 80040e8:	3001      	adds	r0, #1
 80040ea:	d09d      	beq.n	8004028 <_printf_i+0x15c>
 80040ec:	3501      	adds	r5, #1
 80040ee:	68e3      	ldr	r3, [r4, #12]
 80040f0:	9903      	ldr	r1, [sp, #12]
 80040f2:	1a5b      	subs	r3, r3, r1
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	dcf2      	bgt.n	80040de <_printf_i+0x212>
 80040f8:	e7eb      	b.n	80040d2 <_printf_i+0x206>
 80040fa:	2500      	movs	r5, #0
 80040fc:	f104 0619 	add.w	r6, r4, #25
 8004100:	e7f5      	b.n	80040ee <_printf_i+0x222>
 8004102:	bf00      	nop
 8004104:	080061ee 	.word	0x080061ee
 8004108:	080061ff 	.word	0x080061ff

0800410c <std>:
 800410c:	2300      	movs	r3, #0
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
 8004112:	e9c0 3300 	strd	r3, r3, [r0]
 8004116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800411a:	6083      	str	r3, [r0, #8]
 800411c:	8181      	strh	r1, [r0, #12]
 800411e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004120:	81c2      	strh	r2, [r0, #14]
 8004122:	6183      	str	r3, [r0, #24]
 8004124:	4619      	mov	r1, r3
 8004126:	2208      	movs	r2, #8
 8004128:	305c      	adds	r0, #92	@ 0x5c
 800412a:	f000 f8c3 	bl	80042b4 <memset>
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <std+0x58>)
 8004130:	6263      	str	r3, [r4, #36]	@ 0x24
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <std+0x5c>)
 8004134:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <std+0x60>)
 8004138:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <std+0x64>)
 800413c:	6323      	str	r3, [r4, #48]	@ 0x30
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <std+0x68>)
 8004140:	6224      	str	r4, [r4, #32]
 8004142:	429c      	cmp	r4, r3
 8004144:	d006      	beq.n	8004154 <std+0x48>
 8004146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800414a:	4294      	cmp	r4, r2
 800414c:	d002      	beq.n	8004154 <std+0x48>
 800414e:	33d0      	adds	r3, #208	@ 0xd0
 8004150:	429c      	cmp	r4, r3
 8004152:	d105      	bne.n	8004160 <std+0x54>
 8004154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800415c:	f000 b8e0 	b.w	8004320 <__retarget_lock_init_recursive>
 8004160:	bd10      	pop	{r4, pc}
 8004162:	bf00      	nop
 8004164:	08005c0d 	.word	0x08005c0d
 8004168:	08005c2f 	.word	0x08005c2f
 800416c:	08005c67 	.word	0x08005c67
 8004170:	08005c8b 	.word	0x08005c8b
 8004174:	20000280 	.word	0x20000280

08004178 <stdio_exit_handler>:
 8004178:	4a02      	ldr	r2, [pc, #8]	@ (8004184 <stdio_exit_handler+0xc>)
 800417a:	4903      	ldr	r1, [pc, #12]	@ (8004188 <stdio_exit_handler+0x10>)
 800417c:	4803      	ldr	r0, [pc, #12]	@ (800418c <stdio_exit_handler+0x14>)
 800417e:	f000 b869 	b.w	8004254 <_fwalk_sglue>
 8004182:	bf00      	nop
 8004184:	2000000c 	.word	0x2000000c
 8004188:	080054a1 	.word	0x080054a1
 800418c:	2000001c 	.word	0x2000001c

08004190 <cleanup_stdio>:
 8004190:	6841      	ldr	r1, [r0, #4]
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <cleanup_stdio+0x34>)
 8004194:	4299      	cmp	r1, r3
 8004196:	b510      	push	{r4, lr}
 8004198:	4604      	mov	r4, r0
 800419a:	d001      	beq.n	80041a0 <cleanup_stdio+0x10>
 800419c:	f001 f980 	bl	80054a0 <_fflush_r>
 80041a0:	68a1      	ldr	r1, [r4, #8]
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <cleanup_stdio+0x38>)
 80041a4:	4299      	cmp	r1, r3
 80041a6:	d002      	beq.n	80041ae <cleanup_stdio+0x1e>
 80041a8:	4620      	mov	r0, r4
 80041aa:	f001 f979 	bl	80054a0 <_fflush_r>
 80041ae:	68e1      	ldr	r1, [r4, #12]
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <cleanup_stdio+0x3c>)
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d004      	beq.n	80041c0 <cleanup_stdio+0x30>
 80041b6:	4620      	mov	r0, r4
 80041b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041bc:	f001 b970 	b.w	80054a0 <_fflush_r>
 80041c0:	bd10      	pop	{r4, pc}
 80041c2:	bf00      	nop
 80041c4:	20000280 	.word	0x20000280
 80041c8:	200002e8 	.word	0x200002e8
 80041cc:	20000350 	.word	0x20000350

080041d0 <global_stdio_init.part.0>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <global_stdio_init.part.0+0x30>)
 80041d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004204 <global_stdio_init.part.0+0x34>)
 80041d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004208 <global_stdio_init.part.0+0x38>)
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	4620      	mov	r0, r4
 80041dc:	2200      	movs	r2, #0
 80041de:	2104      	movs	r1, #4
 80041e0:	f7ff ff94 	bl	800410c <std>
 80041e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041e8:	2201      	movs	r2, #1
 80041ea:	2109      	movs	r1, #9
 80041ec:	f7ff ff8e 	bl	800410c <std>
 80041f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041f4:	2202      	movs	r2, #2
 80041f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fa:	2112      	movs	r1, #18
 80041fc:	f7ff bf86 	b.w	800410c <std>
 8004200:	200003b8 	.word	0x200003b8
 8004204:	20000280 	.word	0x20000280
 8004208:	08004179 	.word	0x08004179

0800420c <__sfp_lock_acquire>:
 800420c:	4801      	ldr	r0, [pc, #4]	@ (8004214 <__sfp_lock_acquire+0x8>)
 800420e:	f000 b888 	b.w	8004322 <__retarget_lock_acquire_recursive>
 8004212:	bf00      	nop
 8004214:	200003bd 	.word	0x200003bd

08004218 <__sfp_lock_release>:
 8004218:	4801      	ldr	r0, [pc, #4]	@ (8004220 <__sfp_lock_release+0x8>)
 800421a:	f000 b883 	b.w	8004324 <__retarget_lock_release_recursive>
 800421e:	bf00      	nop
 8004220:	200003bd 	.word	0x200003bd

08004224 <__sinit>:
 8004224:	b510      	push	{r4, lr}
 8004226:	4604      	mov	r4, r0
 8004228:	f7ff fff0 	bl	800420c <__sfp_lock_acquire>
 800422c:	6a23      	ldr	r3, [r4, #32]
 800422e:	b11b      	cbz	r3, 8004238 <__sinit+0x14>
 8004230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004234:	f7ff bff0 	b.w	8004218 <__sfp_lock_release>
 8004238:	4b04      	ldr	r3, [pc, #16]	@ (800424c <__sinit+0x28>)
 800423a:	6223      	str	r3, [r4, #32]
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__sinit+0x2c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f5      	bne.n	8004230 <__sinit+0xc>
 8004244:	f7ff ffc4 	bl	80041d0 <global_stdio_init.part.0>
 8004248:	e7f2      	b.n	8004230 <__sinit+0xc>
 800424a:	bf00      	nop
 800424c:	08004191 	.word	0x08004191
 8004250:	200003b8 	.word	0x200003b8

08004254 <_fwalk_sglue>:
 8004254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004258:	4607      	mov	r7, r0
 800425a:	4688      	mov	r8, r1
 800425c:	4614      	mov	r4, r2
 800425e:	2600      	movs	r6, #0
 8004260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004264:	f1b9 0901 	subs.w	r9, r9, #1
 8004268:	d505      	bpl.n	8004276 <_fwalk_sglue+0x22>
 800426a:	6824      	ldr	r4, [r4, #0]
 800426c:	2c00      	cmp	r4, #0
 800426e:	d1f7      	bne.n	8004260 <_fwalk_sglue+0xc>
 8004270:	4630      	mov	r0, r6
 8004272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d907      	bls.n	800428c <_fwalk_sglue+0x38>
 800427c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004280:	3301      	adds	r3, #1
 8004282:	d003      	beq.n	800428c <_fwalk_sglue+0x38>
 8004284:	4629      	mov	r1, r5
 8004286:	4638      	mov	r0, r7
 8004288:	47c0      	blx	r8
 800428a:	4306      	orrs	r6, r0
 800428c:	3568      	adds	r5, #104	@ 0x68
 800428e:	e7e9      	b.n	8004264 <_fwalk_sglue+0x10>

08004290 <iprintf>:
 8004290:	b40f      	push	{r0, r1, r2, r3}
 8004292:	b507      	push	{r0, r1, r2, lr}
 8004294:	4906      	ldr	r1, [pc, #24]	@ (80042b0 <iprintf+0x20>)
 8004296:	ab04      	add	r3, sp, #16
 8004298:	6808      	ldr	r0, [r1, #0]
 800429a:	f853 2b04 	ldr.w	r2, [r3], #4
 800429e:	6881      	ldr	r1, [r0, #8]
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	f000 feb7 	bl	8005014 <_vfiprintf_r>
 80042a6:	b003      	add	sp, #12
 80042a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr
 80042b0:	20000018 	.word	0x20000018

080042b4 <memset>:
 80042b4:	4402      	add	r2, r0
 80042b6:	4603      	mov	r3, r0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d100      	bne.n	80042be <memset+0xa>
 80042bc:	4770      	bx	lr
 80042be:	f803 1b01 	strb.w	r1, [r3], #1
 80042c2:	e7f9      	b.n	80042b8 <memset+0x4>

080042c4 <_localeconv_r>:
 80042c4:	4800      	ldr	r0, [pc, #0]	@ (80042c8 <_localeconv_r+0x4>)
 80042c6:	4770      	bx	lr
 80042c8:	20000158 	.word	0x20000158

080042cc <__errno>:
 80042cc:	4b01      	ldr	r3, [pc, #4]	@ (80042d4 <__errno+0x8>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000018 	.word	0x20000018

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4d0d      	ldr	r5, [pc, #52]	@ (8004310 <__libc_init_array+0x38>)
 80042dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004314 <__libc_init_array+0x3c>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	2600      	movs	r6, #0
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004318 <__libc_init_array+0x40>)
 80042ea:	4c0c      	ldr	r4, [pc, #48]	@ (800431c <__libc_init_array+0x44>)
 80042ec:	f001 ff46 	bl	800617c <_init>
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	2600      	movs	r6, #0
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08006558 	.word	0x08006558
 8004314:	08006558 	.word	0x08006558
 8004318:	08006558 	.word	0x08006558
 800431c:	0800655c 	.word	0x0800655c

08004320 <__retarget_lock_init_recursive>:
 8004320:	4770      	bx	lr

08004322 <__retarget_lock_acquire_recursive>:
 8004322:	4770      	bx	lr

08004324 <__retarget_lock_release_recursive>:
 8004324:	4770      	bx	lr

08004326 <quorem>:
 8004326:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	6903      	ldr	r3, [r0, #16]
 800432c:	690c      	ldr	r4, [r1, #16]
 800432e:	42a3      	cmp	r3, r4
 8004330:	4607      	mov	r7, r0
 8004332:	db7e      	blt.n	8004432 <quorem+0x10c>
 8004334:	3c01      	subs	r4, #1
 8004336:	f101 0814 	add.w	r8, r1, #20
 800433a:	00a3      	lsls	r3, r4, #2
 800433c:	f100 0514 	add.w	r5, r0, #20
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800434c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004350:	3301      	adds	r3, #1
 8004352:	429a      	cmp	r2, r3
 8004354:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004358:	fbb2 f6f3 	udiv	r6, r2, r3
 800435c:	d32e      	bcc.n	80043bc <quorem+0x96>
 800435e:	f04f 0a00 	mov.w	sl, #0
 8004362:	46c4      	mov	ip, r8
 8004364:	46ae      	mov	lr, r5
 8004366:	46d3      	mov	fp, sl
 8004368:	f85c 3b04 	ldr.w	r3, [ip], #4
 800436c:	b298      	uxth	r0, r3
 800436e:	fb06 a000 	mla	r0, r6, r0, sl
 8004372:	0c02      	lsrs	r2, r0, #16
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	fb06 2303 	mla	r3, r6, r3, r2
 800437a:	f8de 2000 	ldr.w	r2, [lr]
 800437e:	b280      	uxth	r0, r0
 8004380:	b292      	uxth	r2, r2
 8004382:	1a12      	subs	r2, r2, r0
 8004384:	445a      	add	r2, fp
 8004386:	f8de 0000 	ldr.w	r0, [lr]
 800438a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800438e:	b29b      	uxth	r3, r3
 8004390:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004394:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004398:	b292      	uxth	r2, r2
 800439a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800439e:	45e1      	cmp	r9, ip
 80043a0:	f84e 2b04 	str.w	r2, [lr], #4
 80043a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80043a8:	d2de      	bcs.n	8004368 <quorem+0x42>
 80043aa:	9b00      	ldr	r3, [sp, #0]
 80043ac:	58eb      	ldr	r3, [r5, r3]
 80043ae:	b92b      	cbnz	r3, 80043bc <quorem+0x96>
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	429d      	cmp	r5, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	d32f      	bcc.n	800441a <quorem+0xf4>
 80043ba:	613c      	str	r4, [r7, #16]
 80043bc:	4638      	mov	r0, r7
 80043be:	f001 fb1d 	bl	80059fc <__mcmp>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	db25      	blt.n	8004412 <quorem+0xec>
 80043c6:	4629      	mov	r1, r5
 80043c8:	2000      	movs	r0, #0
 80043ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80043ce:	f8d1 c000 	ldr.w	ip, [r1]
 80043d2:	fa1f fe82 	uxth.w	lr, r2
 80043d6:	fa1f f38c 	uxth.w	r3, ip
 80043da:	eba3 030e 	sub.w	r3, r3, lr
 80043de:	4403      	add	r3, r0
 80043e0:	0c12      	lsrs	r2, r2, #16
 80043e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80043e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043f0:	45c1      	cmp	r9, r8
 80043f2:	f841 3b04 	str.w	r3, [r1], #4
 80043f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80043fa:	d2e6      	bcs.n	80043ca <quorem+0xa4>
 80043fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004400:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004404:	b922      	cbnz	r2, 8004410 <quorem+0xea>
 8004406:	3b04      	subs	r3, #4
 8004408:	429d      	cmp	r5, r3
 800440a:	461a      	mov	r2, r3
 800440c:	d30b      	bcc.n	8004426 <quorem+0x100>
 800440e:	613c      	str	r4, [r7, #16]
 8004410:	3601      	adds	r6, #1
 8004412:	4630      	mov	r0, r6
 8004414:	b003      	add	sp, #12
 8004416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	3b04      	subs	r3, #4
 800441e:	2a00      	cmp	r2, #0
 8004420:	d1cb      	bne.n	80043ba <quorem+0x94>
 8004422:	3c01      	subs	r4, #1
 8004424:	e7c6      	b.n	80043b4 <quorem+0x8e>
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	3b04      	subs	r3, #4
 800442a:	2a00      	cmp	r2, #0
 800442c:	d1ef      	bne.n	800440e <quorem+0xe8>
 800442e:	3c01      	subs	r4, #1
 8004430:	e7ea      	b.n	8004408 <quorem+0xe2>
 8004432:	2000      	movs	r0, #0
 8004434:	e7ee      	b.n	8004414 <quorem+0xee>
	...

08004438 <_dtoa_r>:
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	69c7      	ldr	r7, [r0, #28]
 800443e:	b099      	sub	sp, #100	@ 0x64
 8004440:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004444:	ec55 4b10 	vmov	r4, r5, d0
 8004448:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800444a:	9109      	str	r1, [sp, #36]	@ 0x24
 800444c:	4683      	mov	fp, r0
 800444e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004450:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004452:	b97f      	cbnz	r7, 8004474 <_dtoa_r+0x3c>
 8004454:	2010      	movs	r0, #16
 8004456:	f000 fef5 	bl	8005244 <malloc>
 800445a:	4602      	mov	r2, r0
 800445c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004460:	b920      	cbnz	r0, 800446c <_dtoa_r+0x34>
 8004462:	4ba7      	ldr	r3, [pc, #668]	@ (8004700 <_dtoa_r+0x2c8>)
 8004464:	21ef      	movs	r1, #239	@ 0xef
 8004466:	48a7      	ldr	r0, [pc, #668]	@ (8004704 <_dtoa_r+0x2cc>)
 8004468:	f001 fd90 	bl	8005f8c <__assert_func>
 800446c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004470:	6007      	str	r7, [r0, #0]
 8004472:	60c7      	str	r7, [r0, #12]
 8004474:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	b159      	cbz	r1, 8004494 <_dtoa_r+0x5c>
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	604a      	str	r2, [r1, #4]
 8004480:	2301      	movs	r3, #1
 8004482:	4093      	lsls	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
 8004486:	4658      	mov	r0, fp
 8004488:	f001 f87e 	bl	8005588 <_Bfree>
 800448c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	1e2b      	subs	r3, r5, #0
 8004496:	bfb9      	ittee	lt
 8004498:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800449c:	9303      	strlt	r3, [sp, #12]
 800449e:	2300      	movge	r3, #0
 80044a0:	6033      	strge	r3, [r6, #0]
 80044a2:	9f03      	ldr	r7, [sp, #12]
 80044a4:	4b98      	ldr	r3, [pc, #608]	@ (8004708 <_dtoa_r+0x2d0>)
 80044a6:	bfbc      	itt	lt
 80044a8:	2201      	movlt	r2, #1
 80044aa:	6032      	strlt	r2, [r6, #0]
 80044ac:	43bb      	bics	r3, r7
 80044ae:	d112      	bne.n	80044d6 <_dtoa_r+0x9e>
 80044b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80044b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80044bc:	4323      	orrs	r3, r4
 80044be:	f000 854d 	beq.w	8004f5c <_dtoa_r+0xb24>
 80044c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80044c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800471c <_dtoa_r+0x2e4>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 854f 	beq.w	8004f6c <_dtoa_r+0xb34>
 80044ce:	f10a 0303 	add.w	r3, sl, #3
 80044d2:	f000 bd49 	b.w	8004f68 <_dtoa_r+0xb30>
 80044d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	ec51 0b17 	vmov	r0, r1, d7
 80044e0:	2300      	movs	r3, #0
 80044e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80044e6:	f7fc faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80044ea:	4680      	mov	r8, r0
 80044ec:	b158      	cbz	r0, 8004506 <_dtoa_r+0xce>
 80044ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80044f0:	2301      	movs	r3, #1
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80044f6:	b113      	cbz	r3, 80044fe <_dtoa_r+0xc6>
 80044f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80044fa:	4b84      	ldr	r3, [pc, #528]	@ (800470c <_dtoa_r+0x2d4>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004720 <_dtoa_r+0x2e8>
 8004502:	f000 bd33 	b.w	8004f6c <_dtoa_r+0xb34>
 8004506:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800450a:	aa16      	add	r2, sp, #88	@ 0x58
 800450c:	a917      	add	r1, sp, #92	@ 0x5c
 800450e:	4658      	mov	r0, fp
 8004510:	f001 fb24 	bl	8005b5c <__d2b>
 8004514:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004518:	4681      	mov	r9, r0
 800451a:	2e00      	cmp	r6, #0
 800451c:	d077      	beq.n	800460e <_dtoa_r+0x1d6>
 800451e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004520:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800452c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004530:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004534:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004538:	4619      	mov	r1, r3
 800453a:	2200      	movs	r2, #0
 800453c:	4b74      	ldr	r3, [pc, #464]	@ (8004710 <_dtoa_r+0x2d8>)
 800453e:	f7fb fea3 	bl	8000288 <__aeabi_dsub>
 8004542:	a369      	add	r3, pc, #420	@ (adr r3, 80046e8 <_dtoa_r+0x2b0>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc f856 	bl	80005f8 <__aeabi_dmul>
 800454c:	a368      	add	r3, pc, #416	@ (adr r3, 80046f0 <_dtoa_r+0x2b8>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fb fe9b 	bl	800028c <__adddf3>
 8004556:	4604      	mov	r4, r0
 8004558:	4630      	mov	r0, r6
 800455a:	460d      	mov	r5, r1
 800455c:	f7fb ffe2 	bl	8000524 <__aeabi_i2d>
 8004560:	a365      	add	r3, pc, #404	@ (adr r3, 80046f8 <_dtoa_r+0x2c0>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fc f847 	bl	80005f8 <__aeabi_dmul>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fb fe8b 	bl	800028c <__adddf3>
 8004576:	4604      	mov	r4, r0
 8004578:	460d      	mov	r5, r1
 800457a:	f7fc faed 	bl	8000b58 <__aeabi_d2iz>
 800457e:	2200      	movs	r2, #0
 8004580:	4607      	mov	r7, r0
 8004582:	2300      	movs	r3, #0
 8004584:	4620      	mov	r0, r4
 8004586:	4629      	mov	r1, r5
 8004588:	f7fc faa8 	bl	8000adc <__aeabi_dcmplt>
 800458c:	b140      	cbz	r0, 80045a0 <_dtoa_r+0x168>
 800458e:	4638      	mov	r0, r7
 8004590:	f7fb ffc8 	bl	8000524 <__aeabi_i2d>
 8004594:	4622      	mov	r2, r4
 8004596:	462b      	mov	r3, r5
 8004598:	f7fc fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800459c:	b900      	cbnz	r0, 80045a0 <_dtoa_r+0x168>
 800459e:	3f01      	subs	r7, #1
 80045a0:	2f16      	cmp	r7, #22
 80045a2:	d851      	bhi.n	8004648 <_dtoa_r+0x210>
 80045a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004714 <_dtoa_r+0x2dc>)
 80045a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045b2:	f7fc fa93 	bl	8000adc <__aeabi_dcmplt>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d048      	beq.n	800464c <_dtoa_r+0x214>
 80045ba:	3f01      	subs	r7, #1
 80045bc:	2300      	movs	r3, #0
 80045be:	9312      	str	r3, [sp, #72]	@ 0x48
 80045c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80045c2:	1b9b      	subs	r3, r3, r6
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	bf44      	itt	mi
 80045c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80045cc:	2300      	movmi	r3, #0
 80045ce:	9208      	str	r2, [sp, #32]
 80045d0:	bf54      	ite	pl
 80045d2:	f04f 0800 	movpl.w	r8, #0
 80045d6:	9308      	strmi	r3, [sp, #32]
 80045d8:	2f00      	cmp	r7, #0
 80045da:	db39      	blt.n	8004650 <_dtoa_r+0x218>
 80045dc:	9b08      	ldr	r3, [sp, #32]
 80045de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80045e0:	443b      	add	r3, r7
 80045e2:	9308      	str	r3, [sp, #32]
 80045e4:	2300      	movs	r3, #0
 80045e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80045e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045ea:	2b09      	cmp	r3, #9
 80045ec:	d864      	bhi.n	80046b8 <_dtoa_r+0x280>
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	bfc4      	itt	gt
 80045f2:	3b04      	subgt	r3, #4
 80045f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80045f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045f8:	f1a3 0302 	sub.w	r3, r3, #2
 80045fc:	bfcc      	ite	gt
 80045fe:	2400      	movgt	r4, #0
 8004600:	2401      	movle	r4, #1
 8004602:	2b03      	cmp	r3, #3
 8004604:	d863      	bhi.n	80046ce <_dtoa_r+0x296>
 8004606:	e8df f003 	tbb	[pc, r3]
 800460a:	372a      	.short	0x372a
 800460c:	5535      	.short	0x5535
 800460e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004612:	441e      	add	r6, r3
 8004614:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004618:	2b20      	cmp	r3, #32
 800461a:	bfc1      	itttt	gt
 800461c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004620:	409f      	lslgt	r7, r3
 8004622:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004626:	fa24 f303 	lsrgt.w	r3, r4, r3
 800462a:	bfd6      	itet	le
 800462c:	f1c3 0320 	rsble	r3, r3, #32
 8004630:	ea47 0003 	orrgt.w	r0, r7, r3
 8004634:	fa04 f003 	lslle.w	r0, r4, r3
 8004638:	f7fb ff64 	bl	8000504 <__aeabi_ui2d>
 800463c:	2201      	movs	r2, #1
 800463e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004642:	3e01      	subs	r6, #1
 8004644:	9214      	str	r2, [sp, #80]	@ 0x50
 8004646:	e777      	b.n	8004538 <_dtoa_r+0x100>
 8004648:	2301      	movs	r3, #1
 800464a:	e7b8      	b.n	80045be <_dtoa_r+0x186>
 800464c:	9012      	str	r0, [sp, #72]	@ 0x48
 800464e:	e7b7      	b.n	80045c0 <_dtoa_r+0x188>
 8004650:	427b      	negs	r3, r7
 8004652:	930a      	str	r3, [sp, #40]	@ 0x28
 8004654:	2300      	movs	r3, #0
 8004656:	eba8 0807 	sub.w	r8, r8, r7
 800465a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800465c:	e7c4      	b.n	80045e8 <_dtoa_r+0x1b0>
 800465e:	2300      	movs	r3, #0
 8004660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	dc35      	bgt.n	80046d4 <_dtoa_r+0x29c>
 8004668:	2301      	movs	r3, #1
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	9307      	str	r3, [sp, #28]
 800466e:	461a      	mov	r2, r3
 8004670:	920e      	str	r2, [sp, #56]	@ 0x38
 8004672:	e00b      	b.n	800468c <_dtoa_r+0x254>
 8004674:	2301      	movs	r3, #1
 8004676:	e7f3      	b.n	8004660 <_dtoa_r+0x228>
 8004678:	2300      	movs	r3, #0
 800467a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800467c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	9307      	str	r3, [sp, #28]
 8004688:	bfb8      	it	lt
 800468a:	2301      	movlt	r3, #1
 800468c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004690:	2100      	movs	r1, #0
 8004692:	2204      	movs	r2, #4
 8004694:	f102 0514 	add.w	r5, r2, #20
 8004698:	429d      	cmp	r5, r3
 800469a:	d91f      	bls.n	80046dc <_dtoa_r+0x2a4>
 800469c:	6041      	str	r1, [r0, #4]
 800469e:	4658      	mov	r0, fp
 80046a0:	f000 ff32 	bl	8005508 <_Balloc>
 80046a4:	4682      	mov	sl, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d13c      	bne.n	8004724 <_dtoa_r+0x2ec>
 80046aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004718 <_dtoa_r+0x2e0>)
 80046ac:	4602      	mov	r2, r0
 80046ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80046b2:	e6d8      	b.n	8004466 <_dtoa_r+0x2e>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e7e0      	b.n	800467a <_dtoa_r+0x242>
 80046b8:	2401      	movs	r4, #1
 80046ba:	2300      	movs	r3, #0
 80046bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	9307      	str	r3, [sp, #28]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2312      	movs	r3, #18
 80046cc:	e7d0      	b.n	8004670 <_dtoa_r+0x238>
 80046ce:	2301      	movs	r3, #1
 80046d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046d2:	e7f5      	b.n	80046c0 <_dtoa_r+0x288>
 80046d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	9307      	str	r3, [sp, #28]
 80046da:	e7d7      	b.n	800468c <_dtoa_r+0x254>
 80046dc:	3101      	adds	r1, #1
 80046de:	0052      	lsls	r2, r2, #1
 80046e0:	e7d8      	b.n	8004694 <_dtoa_r+0x25c>
 80046e2:	bf00      	nop
 80046e4:	f3af 8000 	nop.w
 80046e8:	636f4361 	.word	0x636f4361
 80046ec:	3fd287a7 	.word	0x3fd287a7
 80046f0:	8b60c8b3 	.word	0x8b60c8b3
 80046f4:	3fc68a28 	.word	0x3fc68a28
 80046f8:	509f79fb 	.word	0x509f79fb
 80046fc:	3fd34413 	.word	0x3fd34413
 8004700:	0800621d 	.word	0x0800621d
 8004704:	08006234 	.word	0x08006234
 8004708:	7ff00000 	.word	0x7ff00000
 800470c:	080061ed 	.word	0x080061ed
 8004710:	3ff80000 	.word	0x3ff80000
 8004714:	08006340 	.word	0x08006340
 8004718:	0800628c 	.word	0x0800628c
 800471c:	08006219 	.word	0x08006219
 8004720:	080061ec 	.word	0x080061ec
 8004724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004728:	6018      	str	r0, [r3, #0]
 800472a:	9b07      	ldr	r3, [sp, #28]
 800472c:	2b0e      	cmp	r3, #14
 800472e:	f200 80a4 	bhi.w	800487a <_dtoa_r+0x442>
 8004732:	2c00      	cmp	r4, #0
 8004734:	f000 80a1 	beq.w	800487a <_dtoa_r+0x442>
 8004738:	2f00      	cmp	r7, #0
 800473a:	dd33      	ble.n	80047a4 <_dtoa_r+0x36c>
 800473c:	4bad      	ldr	r3, [pc, #692]	@ (80049f4 <_dtoa_r+0x5bc>)
 800473e:	f007 020f 	and.w	r2, r7, #15
 8004742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004746:	ed93 7b00 	vldr	d7, [r3]
 800474a:	05f8      	lsls	r0, r7, #23
 800474c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004750:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004754:	d516      	bpl.n	8004784 <_dtoa_r+0x34c>
 8004756:	4ba8      	ldr	r3, [pc, #672]	@ (80049f8 <_dtoa_r+0x5c0>)
 8004758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800475c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004760:	f7fc f874 	bl	800084c <__aeabi_ddiv>
 8004764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004768:	f004 040f 	and.w	r4, r4, #15
 800476c:	2603      	movs	r6, #3
 800476e:	4da2      	ldr	r5, [pc, #648]	@ (80049f8 <_dtoa_r+0x5c0>)
 8004770:	b954      	cbnz	r4, 8004788 <_dtoa_r+0x350>
 8004772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800477a:	f7fc f867 	bl	800084c <__aeabi_ddiv>
 800477e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004782:	e028      	b.n	80047d6 <_dtoa_r+0x39e>
 8004784:	2602      	movs	r6, #2
 8004786:	e7f2      	b.n	800476e <_dtoa_r+0x336>
 8004788:	07e1      	lsls	r1, r4, #31
 800478a:	d508      	bpl.n	800479e <_dtoa_r+0x366>
 800478c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004794:	f7fb ff30 	bl	80005f8 <__aeabi_dmul>
 8004798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800479c:	3601      	adds	r6, #1
 800479e:	1064      	asrs	r4, r4, #1
 80047a0:	3508      	adds	r5, #8
 80047a2:	e7e5      	b.n	8004770 <_dtoa_r+0x338>
 80047a4:	f000 80d2 	beq.w	800494c <_dtoa_r+0x514>
 80047a8:	427c      	negs	r4, r7
 80047aa:	4b92      	ldr	r3, [pc, #584]	@ (80049f4 <_dtoa_r+0x5bc>)
 80047ac:	4d92      	ldr	r5, [pc, #584]	@ (80049f8 <_dtoa_r+0x5c0>)
 80047ae:	f004 020f 	and.w	r2, r4, #15
 80047b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047be:	f7fb ff1b 	bl	80005f8 <__aeabi_dmul>
 80047c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047c6:	1124      	asrs	r4, r4, #4
 80047c8:	2300      	movs	r3, #0
 80047ca:	2602      	movs	r6, #2
 80047cc:	2c00      	cmp	r4, #0
 80047ce:	f040 80b2 	bne.w	8004936 <_dtoa_r+0x4fe>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1d3      	bne.n	800477e <_dtoa_r+0x346>
 80047d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80047d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80b7 	beq.w	8004950 <_dtoa_r+0x518>
 80047e2:	4b86      	ldr	r3, [pc, #536]	@ (80049fc <_dtoa_r+0x5c4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fc f977 	bl	8000adc <__aeabi_dcmplt>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f000 80ae 	beq.w	8004950 <_dtoa_r+0x518>
 80047f4:	9b07      	ldr	r3, [sp, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80aa 	beq.w	8004950 <_dtoa_r+0x518>
 80047fc:	9b00      	ldr	r3, [sp, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	dd37      	ble.n	8004872 <_dtoa_r+0x43a>
 8004802:	1e7b      	subs	r3, r7, #1
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	4620      	mov	r0, r4
 8004808:	4b7d      	ldr	r3, [pc, #500]	@ (8004a00 <_dtoa_r+0x5c8>)
 800480a:	2200      	movs	r2, #0
 800480c:	4629      	mov	r1, r5
 800480e:	f7fb fef3 	bl	80005f8 <__aeabi_dmul>
 8004812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004816:	9c00      	ldr	r4, [sp, #0]
 8004818:	3601      	adds	r6, #1
 800481a:	4630      	mov	r0, r6
 800481c:	f7fb fe82 	bl	8000524 <__aeabi_i2d>
 8004820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004824:	f7fb fee8 	bl	80005f8 <__aeabi_dmul>
 8004828:	4b76      	ldr	r3, [pc, #472]	@ (8004a04 <_dtoa_r+0x5cc>)
 800482a:	2200      	movs	r2, #0
 800482c:	f7fb fd2e 	bl	800028c <__adddf3>
 8004830:	4605      	mov	r5, r0
 8004832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004836:	2c00      	cmp	r4, #0
 8004838:	f040 808d 	bne.w	8004956 <_dtoa_r+0x51e>
 800483c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004840:	4b71      	ldr	r3, [pc, #452]	@ (8004a08 <_dtoa_r+0x5d0>)
 8004842:	2200      	movs	r2, #0
 8004844:	f7fb fd20 	bl	8000288 <__aeabi_dsub>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004850:	462a      	mov	r2, r5
 8004852:	4633      	mov	r3, r6
 8004854:	f7fc f960 	bl	8000b18 <__aeabi_dcmpgt>
 8004858:	2800      	cmp	r0, #0
 800485a:	f040 828b 	bne.w	8004d74 <_dtoa_r+0x93c>
 800485e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004862:	462a      	mov	r2, r5
 8004864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004868:	f7fc f938 	bl	8000adc <__aeabi_dcmplt>
 800486c:	2800      	cmp	r0, #0
 800486e:	f040 8128 	bne.w	8004ac2 <_dtoa_r+0x68a>
 8004872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800487a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800487c:	2b00      	cmp	r3, #0
 800487e:	f2c0 815a 	blt.w	8004b36 <_dtoa_r+0x6fe>
 8004882:	2f0e      	cmp	r7, #14
 8004884:	f300 8157 	bgt.w	8004b36 <_dtoa_r+0x6fe>
 8004888:	4b5a      	ldr	r3, [pc, #360]	@ (80049f4 <_dtoa_r+0x5bc>)
 800488a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800488e:	ed93 7b00 	vldr	d7, [r3]
 8004892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	ed8d 7b00 	vstr	d7, [sp]
 800489a:	da03      	bge.n	80048a4 <_dtoa_r+0x46c>
 800489c:	9b07      	ldr	r3, [sp, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f340 8101 	ble.w	8004aa6 <_dtoa_r+0x66e>
 80048a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80048a8:	4656      	mov	r6, sl
 80048aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fb ffcb 	bl	800084c <__aeabi_ddiv>
 80048b6:	f7fc f94f 	bl	8000b58 <__aeabi_d2iz>
 80048ba:	4680      	mov	r8, r0
 80048bc:	f7fb fe32 	bl	8000524 <__aeabi_i2d>
 80048c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048c4:	f7fb fe98 	bl	80005f8 <__aeabi_dmul>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4620      	mov	r0, r4
 80048ce:	4629      	mov	r1, r5
 80048d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80048d4:	f7fb fcd8 	bl	8000288 <__aeabi_dsub>
 80048d8:	f806 4b01 	strb.w	r4, [r6], #1
 80048dc:	9d07      	ldr	r5, [sp, #28]
 80048de:	eba6 040a 	sub.w	r4, r6, sl
 80048e2:	42a5      	cmp	r5, r4
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	f040 8117 	bne.w	8004b1a <_dtoa_r+0x6e2>
 80048ec:	f7fb fcce 	bl	800028c <__adddf3>
 80048f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048f4:	4604      	mov	r4, r0
 80048f6:	460d      	mov	r5, r1
 80048f8:	f7fc f90e 	bl	8000b18 <__aeabi_dcmpgt>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f040 80f9 	bne.w	8004af4 <_dtoa_r+0x6bc>
 8004902:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	f7fc f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800490e:	b118      	cbz	r0, 8004918 <_dtoa_r+0x4e0>
 8004910:	f018 0f01 	tst.w	r8, #1
 8004914:	f040 80ee 	bne.w	8004af4 <_dtoa_r+0x6bc>
 8004918:	4649      	mov	r1, r9
 800491a:	4658      	mov	r0, fp
 800491c:	f000 fe34 	bl	8005588 <_Bfree>
 8004920:	2300      	movs	r3, #0
 8004922:	7033      	strb	r3, [r6, #0]
 8004924:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004926:	3701      	adds	r7, #1
 8004928:	601f      	str	r7, [r3, #0]
 800492a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 831d 	beq.w	8004f6c <_dtoa_r+0xb34>
 8004932:	601e      	str	r6, [r3, #0]
 8004934:	e31a      	b.n	8004f6c <_dtoa_r+0xb34>
 8004936:	07e2      	lsls	r2, r4, #31
 8004938:	d505      	bpl.n	8004946 <_dtoa_r+0x50e>
 800493a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800493e:	f7fb fe5b 	bl	80005f8 <__aeabi_dmul>
 8004942:	3601      	adds	r6, #1
 8004944:	2301      	movs	r3, #1
 8004946:	1064      	asrs	r4, r4, #1
 8004948:	3508      	adds	r5, #8
 800494a:	e73f      	b.n	80047cc <_dtoa_r+0x394>
 800494c:	2602      	movs	r6, #2
 800494e:	e742      	b.n	80047d6 <_dtoa_r+0x39e>
 8004950:	9c07      	ldr	r4, [sp, #28]
 8004952:	9704      	str	r7, [sp, #16]
 8004954:	e761      	b.n	800481a <_dtoa_r+0x3e2>
 8004956:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <_dtoa_r+0x5bc>)
 8004958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800495a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800495e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004962:	4454      	add	r4, sl
 8004964:	2900      	cmp	r1, #0
 8004966:	d053      	beq.n	8004a10 <_dtoa_r+0x5d8>
 8004968:	4928      	ldr	r1, [pc, #160]	@ (8004a0c <_dtoa_r+0x5d4>)
 800496a:	2000      	movs	r0, #0
 800496c:	f7fb ff6e 	bl	800084c <__aeabi_ddiv>
 8004970:	4633      	mov	r3, r6
 8004972:	462a      	mov	r2, r5
 8004974:	f7fb fc88 	bl	8000288 <__aeabi_dsub>
 8004978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800497c:	4656      	mov	r6, sl
 800497e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004982:	f7fc f8e9 	bl	8000b58 <__aeabi_d2iz>
 8004986:	4605      	mov	r5, r0
 8004988:	f7fb fdcc 	bl	8000524 <__aeabi_i2d>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004994:	f7fb fc78 	bl	8000288 <__aeabi_dsub>
 8004998:	3530      	adds	r5, #48	@ 0x30
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049a2:	f806 5b01 	strb.w	r5, [r6], #1
 80049a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80049aa:	f7fc f897 	bl	8000adc <__aeabi_dcmplt>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d171      	bne.n	8004a96 <_dtoa_r+0x65e>
 80049b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049b6:	4911      	ldr	r1, [pc, #68]	@ (80049fc <_dtoa_r+0x5c4>)
 80049b8:	2000      	movs	r0, #0
 80049ba:	f7fb fc65 	bl	8000288 <__aeabi_dsub>
 80049be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80049c2:	f7fc f88b 	bl	8000adc <__aeabi_dcmplt>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	f040 8095 	bne.w	8004af6 <_dtoa_r+0x6be>
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	f43f af50 	beq.w	8004872 <_dtoa_r+0x43a>
 80049d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80049d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a00 <_dtoa_r+0x5c8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	f7fb fe0d 	bl	80005f8 <__aeabi_dmul>
 80049de:	4b08      	ldr	r3, [pc, #32]	@ (8004a00 <_dtoa_r+0x5c8>)
 80049e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80049e4:	2200      	movs	r2, #0
 80049e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ea:	f7fb fe05 	bl	80005f8 <__aeabi_dmul>
 80049ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f2:	e7c4      	b.n	800497e <_dtoa_r+0x546>
 80049f4:	08006340 	.word	0x08006340
 80049f8:	08006318 	.word	0x08006318
 80049fc:	3ff00000 	.word	0x3ff00000
 8004a00:	40240000 	.word	0x40240000
 8004a04:	401c0000 	.word	0x401c0000
 8004a08:	40140000 	.word	0x40140000
 8004a0c:	3fe00000 	.word	0x3fe00000
 8004a10:	4631      	mov	r1, r6
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7fb fdf0 	bl	80005f8 <__aeabi_dmul>
 8004a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004a1e:	4656      	mov	r6, sl
 8004a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a24:	f7fc f898 	bl	8000b58 <__aeabi_d2iz>
 8004a28:	4605      	mov	r5, r0
 8004a2a:	f7fb fd7b 	bl	8000524 <__aeabi_i2d>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a36:	f7fb fc27 	bl	8000288 <__aeabi_dsub>
 8004a3a:	3530      	adds	r5, #48	@ 0x30
 8004a3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	42a6      	cmp	r6, r4
 8004a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	d124      	bne.n	8004a9a <_dtoa_r+0x662>
 8004a50:	4bac      	ldr	r3, [pc, #688]	@ (8004d04 <_dtoa_r+0x8cc>)
 8004a52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a56:	f7fb fc19 	bl	800028c <__adddf3>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a62:	f7fc f859 	bl	8000b18 <__aeabi_dcmpgt>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d145      	bne.n	8004af6 <_dtoa_r+0x6be>
 8004a6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a6e:	49a5      	ldr	r1, [pc, #660]	@ (8004d04 <_dtoa_r+0x8cc>)
 8004a70:	2000      	movs	r0, #0
 8004a72:	f7fb fc09 	bl	8000288 <__aeabi_dsub>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a7e:	f7fc f82d 	bl	8000adc <__aeabi_dcmplt>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	f43f aef5 	beq.w	8004872 <_dtoa_r+0x43a>
 8004a88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004a8a:	1e73      	subs	r3, r6, #1
 8004a8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004a8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004a92:	2b30      	cmp	r3, #48	@ 0x30
 8004a94:	d0f8      	beq.n	8004a88 <_dtoa_r+0x650>
 8004a96:	9f04      	ldr	r7, [sp, #16]
 8004a98:	e73e      	b.n	8004918 <_dtoa_r+0x4e0>
 8004a9a:	4b9b      	ldr	r3, [pc, #620]	@ (8004d08 <_dtoa_r+0x8d0>)
 8004a9c:	f7fb fdac 	bl	80005f8 <__aeabi_dmul>
 8004aa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa4:	e7bc      	b.n	8004a20 <_dtoa_r+0x5e8>
 8004aa6:	d10c      	bne.n	8004ac2 <_dtoa_r+0x68a>
 8004aa8:	4b98      	ldr	r3, [pc, #608]	@ (8004d0c <_dtoa_r+0x8d4>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ab0:	f7fb fda2 	bl	80005f8 <__aeabi_dmul>
 8004ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ab8:	f7fc f824 	bl	8000b04 <__aeabi_dcmpge>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f000 8157 	beq.w	8004d70 <_dtoa_r+0x938>
 8004ac2:	2400      	movs	r4, #0
 8004ac4:	4625      	mov	r5, r4
 8004ac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	4656      	mov	r6, sl
 8004ace:	2700      	movs	r7, #0
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4658      	mov	r0, fp
 8004ad4:	f000 fd58 	bl	8005588 <_Bfree>
 8004ad8:	2d00      	cmp	r5, #0
 8004ada:	d0dc      	beq.n	8004a96 <_dtoa_r+0x65e>
 8004adc:	b12f      	cbz	r7, 8004aea <_dtoa_r+0x6b2>
 8004ade:	42af      	cmp	r7, r5
 8004ae0:	d003      	beq.n	8004aea <_dtoa_r+0x6b2>
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	4658      	mov	r0, fp
 8004ae6:	f000 fd4f 	bl	8005588 <_Bfree>
 8004aea:	4629      	mov	r1, r5
 8004aec:	4658      	mov	r0, fp
 8004aee:	f000 fd4b 	bl	8005588 <_Bfree>
 8004af2:	e7d0      	b.n	8004a96 <_dtoa_r+0x65e>
 8004af4:	9704      	str	r7, [sp, #16]
 8004af6:	4633      	mov	r3, r6
 8004af8:	461e      	mov	r6, r3
 8004afa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004afe:	2a39      	cmp	r2, #57	@ 0x39
 8004b00:	d107      	bne.n	8004b12 <_dtoa_r+0x6da>
 8004b02:	459a      	cmp	sl, r3
 8004b04:	d1f8      	bne.n	8004af8 <_dtoa_r+0x6c0>
 8004b06:	9a04      	ldr	r2, [sp, #16]
 8004b08:	3201      	adds	r2, #1
 8004b0a:	9204      	str	r2, [sp, #16]
 8004b0c:	2230      	movs	r2, #48	@ 0x30
 8004b0e:	f88a 2000 	strb.w	r2, [sl]
 8004b12:	781a      	ldrb	r2, [r3, #0]
 8004b14:	3201      	adds	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e7bd      	b.n	8004a96 <_dtoa_r+0x65e>
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d08 <_dtoa_r+0x8d0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f7fb fd6b 	bl	80005f8 <__aeabi_dmul>
 8004b22:	2200      	movs	r2, #0
 8004b24:	2300      	movs	r3, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	460d      	mov	r5, r1
 8004b2a:	f7fb ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	f43f aebb 	beq.w	80048aa <_dtoa_r+0x472>
 8004b34:	e6f0      	b.n	8004918 <_dtoa_r+0x4e0>
 8004b36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	f000 80db 	beq.w	8004cf4 <_dtoa_r+0x8bc>
 8004b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b40:	2a01      	cmp	r2, #1
 8004b42:	f300 80bf 	bgt.w	8004cc4 <_dtoa_r+0x88c>
 8004b46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	f000 80b7 	beq.w	8004cbc <_dtoa_r+0x884>
 8004b4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004b52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004b54:	4646      	mov	r6, r8
 8004b56:	9a08      	ldr	r2, [sp, #32]
 8004b58:	2101      	movs	r1, #1
 8004b5a:	441a      	add	r2, r3
 8004b5c:	4658      	mov	r0, fp
 8004b5e:	4498      	add	r8, r3
 8004b60:	9208      	str	r2, [sp, #32]
 8004b62:	f000 fdc5 	bl	80056f0 <__i2b>
 8004b66:	4605      	mov	r5, r0
 8004b68:	b15e      	cbz	r6, 8004b82 <_dtoa_r+0x74a>
 8004b6a:	9b08      	ldr	r3, [sp, #32]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dd08      	ble.n	8004b82 <_dtoa_r+0x74a>
 8004b70:	42b3      	cmp	r3, r6
 8004b72:	9a08      	ldr	r2, [sp, #32]
 8004b74:	bfa8      	it	ge
 8004b76:	4633      	movge	r3, r6
 8004b78:	eba8 0803 	sub.w	r8, r8, r3
 8004b7c:	1af6      	subs	r6, r6, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	9308      	str	r3, [sp, #32]
 8004b82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b84:	b1f3      	cbz	r3, 8004bc4 <_dtoa_r+0x78c>
 8004b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80b7 	beq.w	8004cfc <_dtoa_r+0x8c4>
 8004b8e:	b18c      	cbz	r4, 8004bb4 <_dtoa_r+0x77c>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4622      	mov	r2, r4
 8004b94:	4658      	mov	r0, fp
 8004b96:	f000 fe6b 	bl	8005870 <__pow5mult>
 8004b9a:	464a      	mov	r2, r9
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	4605      	mov	r5, r0
 8004ba0:	4658      	mov	r0, fp
 8004ba2:	f000 fdbb 	bl	800571c <__multiply>
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	9004      	str	r0, [sp, #16]
 8004baa:	4658      	mov	r0, fp
 8004bac:	f000 fcec 	bl	8005588 <_Bfree>
 8004bb0:	9b04      	ldr	r3, [sp, #16]
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bb6:	1b1a      	subs	r2, r3, r4
 8004bb8:	d004      	beq.n	8004bc4 <_dtoa_r+0x78c>
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4658      	mov	r0, fp
 8004bbe:	f000 fe57 	bl	8005870 <__pow5mult>
 8004bc2:	4681      	mov	r9, r0
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4658      	mov	r0, fp
 8004bc8:	f000 fd92 	bl	80056f0 <__i2b>
 8004bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004bce:	4604      	mov	r4, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 81cf 	beq.w	8004f74 <_dtoa_r+0xb3c>
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4601      	mov	r1, r0
 8004bda:	4658      	mov	r0, fp
 8004bdc:	f000 fe48 	bl	8005870 <__pow5mult>
 8004be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	4604      	mov	r4, r0
 8004be6:	f300 8095 	bgt.w	8004d14 <_dtoa_r+0x8dc>
 8004bea:	9b02      	ldr	r3, [sp, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f040 8087 	bne.w	8004d00 <_dtoa_r+0x8c8>
 8004bf2:	9b03      	ldr	r3, [sp, #12]
 8004bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 8089 	bne.w	8004d10 <_dtoa_r+0x8d8>
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c04:	0d1b      	lsrs	r3, r3, #20
 8004c06:	051b      	lsls	r3, r3, #20
 8004c08:	b12b      	cbz	r3, 8004c16 <_dtoa_r+0x7de>
 8004c0a:	9b08      	ldr	r3, [sp, #32]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	9308      	str	r3, [sp, #32]
 8004c10:	f108 0801 	add.w	r8, r8, #1
 8004c14:	2301      	movs	r3, #1
 8004c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 81b0 	beq.w	8004f80 <_dtoa_r+0xb48>
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c26:	6918      	ldr	r0, [r3, #16]
 8004c28:	f000 fd16 	bl	8005658 <__hi0bits>
 8004c2c:	f1c0 0020 	rsb	r0, r0, #32
 8004c30:	9b08      	ldr	r3, [sp, #32]
 8004c32:	4418      	add	r0, r3
 8004c34:	f010 001f 	ands.w	r0, r0, #31
 8004c38:	d077      	beq.n	8004d2a <_dtoa_r+0x8f2>
 8004c3a:	f1c0 0320 	rsb	r3, r0, #32
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	dd6b      	ble.n	8004d1a <_dtoa_r+0x8e2>
 8004c42:	9b08      	ldr	r3, [sp, #32]
 8004c44:	f1c0 001c 	rsb	r0, r0, #28
 8004c48:	4403      	add	r3, r0
 8004c4a:	4480      	add	r8, r0
 8004c4c:	4406      	add	r6, r0
 8004c4e:	9308      	str	r3, [sp, #32]
 8004c50:	f1b8 0f00 	cmp.w	r8, #0
 8004c54:	dd05      	ble.n	8004c62 <_dtoa_r+0x82a>
 8004c56:	4649      	mov	r1, r9
 8004c58:	4642      	mov	r2, r8
 8004c5a:	4658      	mov	r0, fp
 8004c5c:	f000 fe62 	bl	8005924 <__lshift>
 8004c60:	4681      	mov	r9, r0
 8004c62:	9b08      	ldr	r3, [sp, #32]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dd05      	ble.n	8004c74 <_dtoa_r+0x83c>
 8004c68:	4621      	mov	r1, r4
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4658      	mov	r0, fp
 8004c6e:	f000 fe59 	bl	8005924 <__lshift>
 8004c72:	4604      	mov	r4, r0
 8004c74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d059      	beq.n	8004d2e <_dtoa_r+0x8f6>
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	4648      	mov	r0, r9
 8004c7e:	f000 febd 	bl	80059fc <__mcmp>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	da53      	bge.n	8004d2e <_dtoa_r+0x8f6>
 8004c86:	1e7b      	subs	r3, r7, #1
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	220a      	movs	r2, #10
 8004c90:	4658      	mov	r0, fp
 8004c92:	f000 fc9b 	bl	80055cc <__multadd>
 8004c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c98:	4681      	mov	r9, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8172 	beq.w	8004f84 <_dtoa_r+0xb4c>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	220a      	movs	r2, #10
 8004ca6:	4658      	mov	r0, fp
 8004ca8:	f000 fc90 	bl	80055cc <__multadd>
 8004cac:	9b00      	ldr	r3, [sp, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	dc67      	bgt.n	8004d84 <_dtoa_r+0x94c>
 8004cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	dc41      	bgt.n	8004d3e <_dtoa_r+0x906>
 8004cba:	e063      	b.n	8004d84 <_dtoa_r+0x94c>
 8004cbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004cbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004cc2:	e746      	b.n	8004b52 <_dtoa_r+0x71a>
 8004cc4:	9b07      	ldr	r3, [sp, #28]
 8004cc6:	1e5c      	subs	r4, r3, #1
 8004cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	bfbf      	itttt	lt
 8004cce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004cd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004cd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004cd4:	1ae3      	sublt	r3, r4, r3
 8004cd6:	bfb4      	ite	lt
 8004cd8:	18d2      	addlt	r2, r2, r3
 8004cda:	1b1c      	subge	r4, r3, r4
 8004cdc:	9b07      	ldr	r3, [sp, #28]
 8004cde:	bfbc      	itt	lt
 8004ce0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004ce2:	2400      	movlt	r4, #0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bfb5      	itete	lt
 8004ce8:	eba8 0603 	sublt.w	r6, r8, r3
 8004cec:	9b07      	ldrge	r3, [sp, #28]
 8004cee:	2300      	movlt	r3, #0
 8004cf0:	4646      	movge	r6, r8
 8004cf2:	e730      	b.n	8004b56 <_dtoa_r+0x71e>
 8004cf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004cf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004cf8:	4646      	mov	r6, r8
 8004cfa:	e735      	b.n	8004b68 <_dtoa_r+0x730>
 8004cfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004cfe:	e75c      	b.n	8004bba <_dtoa_r+0x782>
 8004d00:	2300      	movs	r3, #0
 8004d02:	e788      	b.n	8004c16 <_dtoa_r+0x7de>
 8004d04:	3fe00000 	.word	0x3fe00000
 8004d08:	40240000 	.word	0x40240000
 8004d0c:	40140000 	.word	0x40140000
 8004d10:	9b02      	ldr	r3, [sp, #8]
 8004d12:	e780      	b.n	8004c16 <_dtoa_r+0x7de>
 8004d14:	2300      	movs	r3, #0
 8004d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d18:	e782      	b.n	8004c20 <_dtoa_r+0x7e8>
 8004d1a:	d099      	beq.n	8004c50 <_dtoa_r+0x818>
 8004d1c:	9a08      	ldr	r2, [sp, #32]
 8004d1e:	331c      	adds	r3, #28
 8004d20:	441a      	add	r2, r3
 8004d22:	4498      	add	r8, r3
 8004d24:	441e      	add	r6, r3
 8004d26:	9208      	str	r2, [sp, #32]
 8004d28:	e792      	b.n	8004c50 <_dtoa_r+0x818>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	e7f6      	b.n	8004d1c <_dtoa_r+0x8e4>
 8004d2e:	9b07      	ldr	r3, [sp, #28]
 8004d30:	9704      	str	r7, [sp, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dc20      	bgt.n	8004d78 <_dtoa_r+0x940>
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	dd1e      	ble.n	8004d7c <_dtoa_r+0x944>
 8004d3e:	9b00      	ldr	r3, [sp, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f47f aec0 	bne.w	8004ac6 <_dtoa_r+0x68e>
 8004d46:	4621      	mov	r1, r4
 8004d48:	2205      	movs	r2, #5
 8004d4a:	4658      	mov	r0, fp
 8004d4c:	f000 fc3e 	bl	80055cc <__multadd>
 8004d50:	4601      	mov	r1, r0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4648      	mov	r0, r9
 8004d56:	f000 fe51 	bl	80059fc <__mcmp>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f77f aeb3 	ble.w	8004ac6 <_dtoa_r+0x68e>
 8004d60:	4656      	mov	r6, sl
 8004d62:	2331      	movs	r3, #49	@ 0x31
 8004d64:	f806 3b01 	strb.w	r3, [r6], #1
 8004d68:	9b04      	ldr	r3, [sp, #16]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	e6ae      	b.n	8004ace <_dtoa_r+0x696>
 8004d70:	9c07      	ldr	r4, [sp, #28]
 8004d72:	9704      	str	r7, [sp, #16]
 8004d74:	4625      	mov	r5, r4
 8004d76:	e7f3      	b.n	8004d60 <_dtoa_r+0x928>
 8004d78:	9b07      	ldr	r3, [sp, #28]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8104 	beq.w	8004f8c <_dtoa_r+0xb54>
 8004d84:	2e00      	cmp	r6, #0
 8004d86:	dd05      	ble.n	8004d94 <_dtoa_r+0x95c>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4632      	mov	r2, r6
 8004d8c:	4658      	mov	r0, fp
 8004d8e:	f000 fdc9 	bl	8005924 <__lshift>
 8004d92:	4605      	mov	r5, r0
 8004d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05a      	beq.n	8004e50 <_dtoa_r+0xa18>
 8004d9a:	6869      	ldr	r1, [r5, #4]
 8004d9c:	4658      	mov	r0, fp
 8004d9e:	f000 fbb3 	bl	8005508 <_Balloc>
 8004da2:	4606      	mov	r6, r0
 8004da4:	b928      	cbnz	r0, 8004db2 <_dtoa_r+0x97a>
 8004da6:	4b84      	ldr	r3, [pc, #528]	@ (8004fb8 <_dtoa_r+0xb80>)
 8004da8:	4602      	mov	r2, r0
 8004daa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004dae:	f7ff bb5a 	b.w	8004466 <_dtoa_r+0x2e>
 8004db2:	692a      	ldr	r2, [r5, #16]
 8004db4:	3202      	adds	r2, #2
 8004db6:	0092      	lsls	r2, r2, #2
 8004db8:	f105 010c 	add.w	r1, r5, #12
 8004dbc:	300c      	adds	r0, #12
 8004dbe:	f001 f8d7 	bl	8005f70 <memcpy>
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4658      	mov	r0, fp
 8004dc8:	f000 fdac 	bl	8005924 <__lshift>
 8004dcc:	f10a 0301 	add.w	r3, sl, #1
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	9b00      	ldr	r3, [sp, #0]
 8004dd4:	4453      	add	r3, sl
 8004dd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	462f      	mov	r7, r5
 8004de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004de2:	4605      	mov	r5, r0
 8004de4:	9b07      	ldr	r3, [sp, #28]
 8004de6:	4621      	mov	r1, r4
 8004de8:	3b01      	subs	r3, #1
 8004dea:	4648      	mov	r0, r9
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	f7ff fa9a 	bl	8004326 <quorem>
 8004df2:	4639      	mov	r1, r7
 8004df4:	9002      	str	r0, [sp, #8]
 8004df6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004dfa:	4648      	mov	r0, r9
 8004dfc:	f000 fdfe 	bl	80059fc <__mcmp>
 8004e00:	462a      	mov	r2, r5
 8004e02:	9008      	str	r0, [sp, #32]
 8004e04:	4621      	mov	r1, r4
 8004e06:	4658      	mov	r0, fp
 8004e08:	f000 fe14 	bl	8005a34 <__mdiff>
 8004e0c:	68c2      	ldr	r2, [r0, #12]
 8004e0e:	4606      	mov	r6, r0
 8004e10:	bb02      	cbnz	r2, 8004e54 <_dtoa_r+0xa1c>
 8004e12:	4601      	mov	r1, r0
 8004e14:	4648      	mov	r0, r9
 8004e16:	f000 fdf1 	bl	80059fc <__mcmp>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4658      	mov	r0, fp
 8004e20:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e22:	f000 fbb1 	bl	8005588 <_Bfree>
 8004e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e2a:	9e07      	ldr	r6, [sp, #28]
 8004e2c:	ea43 0102 	orr.w	r1, r3, r2
 8004e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e32:	4319      	orrs	r1, r3
 8004e34:	d110      	bne.n	8004e58 <_dtoa_r+0xa20>
 8004e36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e3a:	d029      	beq.n	8004e90 <_dtoa_r+0xa58>
 8004e3c:	9b08      	ldr	r3, [sp, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd02      	ble.n	8004e48 <_dtoa_r+0xa10>
 8004e42:	9b02      	ldr	r3, [sp, #8]
 8004e44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004e48:	9b00      	ldr	r3, [sp, #0]
 8004e4a:	f883 8000 	strb.w	r8, [r3]
 8004e4e:	e63f      	b.n	8004ad0 <_dtoa_r+0x698>
 8004e50:	4628      	mov	r0, r5
 8004e52:	e7bb      	b.n	8004dcc <_dtoa_r+0x994>
 8004e54:	2201      	movs	r2, #1
 8004e56:	e7e1      	b.n	8004e1c <_dtoa_r+0x9e4>
 8004e58:	9b08      	ldr	r3, [sp, #32]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	db04      	blt.n	8004e68 <_dtoa_r+0xa30>
 8004e5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e60:	430b      	orrs	r3, r1
 8004e62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004e64:	430b      	orrs	r3, r1
 8004e66:	d120      	bne.n	8004eaa <_dtoa_r+0xa72>
 8004e68:	2a00      	cmp	r2, #0
 8004e6a:	dded      	ble.n	8004e48 <_dtoa_r+0xa10>
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4658      	mov	r0, fp
 8004e72:	f000 fd57 	bl	8005924 <__lshift>
 8004e76:	4621      	mov	r1, r4
 8004e78:	4681      	mov	r9, r0
 8004e7a:	f000 fdbf 	bl	80059fc <__mcmp>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	dc03      	bgt.n	8004e8a <_dtoa_r+0xa52>
 8004e82:	d1e1      	bne.n	8004e48 <_dtoa_r+0xa10>
 8004e84:	f018 0f01 	tst.w	r8, #1
 8004e88:	d0de      	beq.n	8004e48 <_dtoa_r+0xa10>
 8004e8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004e8e:	d1d8      	bne.n	8004e42 <_dtoa_r+0xa0a>
 8004e90:	9a00      	ldr	r2, [sp, #0]
 8004e92:	2339      	movs	r3, #57	@ 0x39
 8004e94:	7013      	strb	r3, [r2, #0]
 8004e96:	4633      	mov	r3, r6
 8004e98:	461e      	mov	r6, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ea0:	2a39      	cmp	r2, #57	@ 0x39
 8004ea2:	d052      	beq.n	8004f4a <_dtoa_r+0xb12>
 8004ea4:	3201      	adds	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e612      	b.n	8004ad0 <_dtoa_r+0x698>
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	dd07      	ble.n	8004ebe <_dtoa_r+0xa86>
 8004eae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004eb2:	d0ed      	beq.n	8004e90 <_dtoa_r+0xa58>
 8004eb4:	9a00      	ldr	r2, [sp, #0]
 8004eb6:	f108 0301 	add.w	r3, r8, #1
 8004eba:	7013      	strb	r3, [r2, #0]
 8004ebc:	e608      	b.n	8004ad0 <_dtoa_r+0x698>
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	9a07      	ldr	r2, [sp, #28]
 8004ec2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d028      	beq.n	8004f1e <_dtoa_r+0xae6>
 8004ecc:	4649      	mov	r1, r9
 8004ece:	2300      	movs	r3, #0
 8004ed0:	220a      	movs	r2, #10
 8004ed2:	4658      	mov	r0, fp
 8004ed4:	f000 fb7a 	bl	80055cc <__multadd>
 8004ed8:	42af      	cmp	r7, r5
 8004eda:	4681      	mov	r9, r0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	f04f 020a 	mov.w	r2, #10
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4658      	mov	r0, fp
 8004ee8:	d107      	bne.n	8004efa <_dtoa_r+0xac2>
 8004eea:	f000 fb6f 	bl	80055cc <__multadd>
 8004eee:	4607      	mov	r7, r0
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	9b07      	ldr	r3, [sp, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	9307      	str	r3, [sp, #28]
 8004ef8:	e774      	b.n	8004de4 <_dtoa_r+0x9ac>
 8004efa:	f000 fb67 	bl	80055cc <__multadd>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4607      	mov	r7, r0
 8004f02:	2300      	movs	r3, #0
 8004f04:	220a      	movs	r2, #10
 8004f06:	4658      	mov	r0, fp
 8004f08:	f000 fb60 	bl	80055cc <__multadd>
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	e7f0      	b.n	8004ef2 <_dtoa_r+0xaba>
 8004f10:	9b00      	ldr	r3, [sp, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bfcc      	ite	gt
 8004f16:	461e      	movgt	r6, r3
 8004f18:	2601      	movle	r6, #1
 8004f1a:	4456      	add	r6, sl
 8004f1c:	2700      	movs	r7, #0
 8004f1e:	4649      	mov	r1, r9
 8004f20:	2201      	movs	r2, #1
 8004f22:	4658      	mov	r0, fp
 8004f24:	f000 fcfe 	bl	8005924 <__lshift>
 8004f28:	4621      	mov	r1, r4
 8004f2a:	4681      	mov	r9, r0
 8004f2c:	f000 fd66 	bl	80059fc <__mcmp>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	dcb0      	bgt.n	8004e96 <_dtoa_r+0xa5e>
 8004f34:	d102      	bne.n	8004f3c <_dtoa_r+0xb04>
 8004f36:	f018 0f01 	tst.w	r8, #1
 8004f3a:	d1ac      	bne.n	8004e96 <_dtoa_r+0xa5e>
 8004f3c:	4633      	mov	r3, r6
 8004f3e:	461e      	mov	r6, r3
 8004f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f44:	2a30      	cmp	r2, #48	@ 0x30
 8004f46:	d0fa      	beq.n	8004f3e <_dtoa_r+0xb06>
 8004f48:	e5c2      	b.n	8004ad0 <_dtoa_r+0x698>
 8004f4a:	459a      	cmp	sl, r3
 8004f4c:	d1a4      	bne.n	8004e98 <_dtoa_r+0xa60>
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	3301      	adds	r3, #1
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	2331      	movs	r3, #49	@ 0x31
 8004f56:	f88a 3000 	strb.w	r3, [sl]
 8004f5a:	e5b9      	b.n	8004ad0 <_dtoa_r+0x698>
 8004f5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004f5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004fbc <_dtoa_r+0xb84>
 8004f62:	b11b      	cbz	r3, 8004f6c <_dtoa_r+0xb34>
 8004f64:	f10a 0308 	add.w	r3, sl, #8
 8004f68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	b019      	add	sp, #100	@ 0x64
 8004f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	f77f ae37 	ble.w	8004bea <_dtoa_r+0x7b2>
 8004f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f80:	2001      	movs	r0, #1
 8004f82:	e655      	b.n	8004c30 <_dtoa_r+0x7f8>
 8004f84:	9b00      	ldr	r3, [sp, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f77f aed6 	ble.w	8004d38 <_dtoa_r+0x900>
 8004f8c:	4656      	mov	r6, sl
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4648      	mov	r0, r9
 8004f92:	f7ff f9c8 	bl	8004326 <quorem>
 8004f96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f9a:	f806 8b01 	strb.w	r8, [r6], #1
 8004f9e:	9b00      	ldr	r3, [sp, #0]
 8004fa0:	eba6 020a 	sub.w	r2, r6, sl
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	ddb3      	ble.n	8004f10 <_dtoa_r+0xad8>
 8004fa8:	4649      	mov	r1, r9
 8004faa:	2300      	movs	r3, #0
 8004fac:	220a      	movs	r2, #10
 8004fae:	4658      	mov	r0, fp
 8004fb0:	f000 fb0c 	bl	80055cc <__multadd>
 8004fb4:	4681      	mov	r9, r0
 8004fb6:	e7ea      	b.n	8004f8e <_dtoa_r+0xb56>
 8004fb8:	0800628c 	.word	0x0800628c
 8004fbc:	08006210 	.word	0x08006210

08004fc0 <__sfputc_r>:
 8004fc0:	6893      	ldr	r3, [r2, #8]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	b410      	push	{r4}
 8004fc8:	6093      	str	r3, [r2, #8]
 8004fca:	da08      	bge.n	8004fde <__sfputc_r+0x1e>
 8004fcc:	6994      	ldr	r4, [r2, #24]
 8004fce:	42a3      	cmp	r3, r4
 8004fd0:	db01      	blt.n	8004fd6 <__sfputc_r+0x16>
 8004fd2:	290a      	cmp	r1, #10
 8004fd4:	d103      	bne.n	8004fde <__sfputc_r+0x1e>
 8004fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fda:	f000 be5a 	b.w	8005c92 <__swbuf_r>
 8004fde:	6813      	ldr	r3, [r2, #0]
 8004fe0:	1c58      	adds	r0, r3, #1
 8004fe2:	6010      	str	r0, [r2, #0]
 8004fe4:	7019      	strb	r1, [r3, #0]
 8004fe6:	4608      	mov	r0, r1
 8004fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <__sfputs_r>:
 8004fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff0:	4606      	mov	r6, r0
 8004ff2:	460f      	mov	r7, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	18d5      	adds	r5, r2, r3
 8004ff8:	42ac      	cmp	r4, r5
 8004ffa:	d101      	bne.n	8005000 <__sfputs_r+0x12>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e007      	b.n	8005010 <__sfputs_r+0x22>
 8005000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005004:	463a      	mov	r2, r7
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff ffda 	bl	8004fc0 <__sfputc_r>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d1f3      	bne.n	8004ff8 <__sfputs_r+0xa>
 8005010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005014 <_vfiprintf_r>:
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	460d      	mov	r5, r1
 800501a:	b09d      	sub	sp, #116	@ 0x74
 800501c:	4614      	mov	r4, r2
 800501e:	4698      	mov	r8, r3
 8005020:	4606      	mov	r6, r0
 8005022:	b118      	cbz	r0, 800502c <_vfiprintf_r+0x18>
 8005024:	6a03      	ldr	r3, [r0, #32]
 8005026:	b90b      	cbnz	r3, 800502c <_vfiprintf_r+0x18>
 8005028:	f7ff f8fc 	bl	8004224 <__sinit>
 800502c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800502e:	07d9      	lsls	r1, r3, #31
 8005030:	d405      	bmi.n	800503e <_vfiprintf_r+0x2a>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	059a      	lsls	r2, r3, #22
 8005036:	d402      	bmi.n	800503e <_vfiprintf_r+0x2a>
 8005038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800503a:	f7ff f972 	bl	8004322 <__retarget_lock_acquire_recursive>
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	071b      	lsls	r3, r3, #28
 8005042:	d501      	bpl.n	8005048 <_vfiprintf_r+0x34>
 8005044:	692b      	ldr	r3, [r5, #16]
 8005046:	b99b      	cbnz	r3, 8005070 <_vfiprintf_r+0x5c>
 8005048:	4629      	mov	r1, r5
 800504a:	4630      	mov	r0, r6
 800504c:	f000 fe60 	bl	8005d10 <__swsetup_r>
 8005050:	b170      	cbz	r0, 8005070 <_vfiprintf_r+0x5c>
 8005052:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005054:	07dc      	lsls	r4, r3, #31
 8005056:	d504      	bpl.n	8005062 <_vfiprintf_r+0x4e>
 8005058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800505c:	b01d      	add	sp, #116	@ 0x74
 800505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005062:	89ab      	ldrh	r3, [r5, #12]
 8005064:	0598      	lsls	r0, r3, #22
 8005066:	d4f7      	bmi.n	8005058 <_vfiprintf_r+0x44>
 8005068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800506a:	f7ff f95b 	bl	8004324 <__retarget_lock_release_recursive>
 800506e:	e7f3      	b.n	8005058 <_vfiprintf_r+0x44>
 8005070:	2300      	movs	r3, #0
 8005072:	9309      	str	r3, [sp, #36]	@ 0x24
 8005074:	2320      	movs	r3, #32
 8005076:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800507a:	f8cd 800c 	str.w	r8, [sp, #12]
 800507e:	2330      	movs	r3, #48	@ 0x30
 8005080:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005230 <_vfiprintf_r+0x21c>
 8005084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005088:	f04f 0901 	mov.w	r9, #1
 800508c:	4623      	mov	r3, r4
 800508e:	469a      	mov	sl, r3
 8005090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005094:	b10a      	cbz	r2, 800509a <_vfiprintf_r+0x86>
 8005096:	2a25      	cmp	r2, #37	@ 0x25
 8005098:	d1f9      	bne.n	800508e <_vfiprintf_r+0x7a>
 800509a:	ebba 0b04 	subs.w	fp, sl, r4
 800509e:	d00b      	beq.n	80050b8 <_vfiprintf_r+0xa4>
 80050a0:	465b      	mov	r3, fp
 80050a2:	4622      	mov	r2, r4
 80050a4:	4629      	mov	r1, r5
 80050a6:	4630      	mov	r0, r6
 80050a8:	f7ff ffa1 	bl	8004fee <__sfputs_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	f000 80a7 	beq.w	8005200 <_vfiprintf_r+0x1ec>
 80050b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050b4:	445a      	add	r2, fp
 80050b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050b8:	f89a 3000 	ldrb.w	r3, [sl]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 809f 	beq.w	8005200 <_vfiprintf_r+0x1ec>
 80050c2:	2300      	movs	r3, #0
 80050c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050cc:	f10a 0a01 	add.w	sl, sl, #1
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	9307      	str	r3, [sp, #28]
 80050d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80050da:	4654      	mov	r4, sl
 80050dc:	2205      	movs	r2, #5
 80050de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e2:	4853      	ldr	r0, [pc, #332]	@ (8005230 <_vfiprintf_r+0x21c>)
 80050e4:	f7fb f874 	bl	80001d0 <memchr>
 80050e8:	9a04      	ldr	r2, [sp, #16]
 80050ea:	b9d8      	cbnz	r0, 8005124 <_vfiprintf_r+0x110>
 80050ec:	06d1      	lsls	r1, r2, #27
 80050ee:	bf44      	itt	mi
 80050f0:	2320      	movmi	r3, #32
 80050f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f6:	0713      	lsls	r3, r2, #28
 80050f8:	bf44      	itt	mi
 80050fa:	232b      	movmi	r3, #43	@ 0x2b
 80050fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005100:	f89a 3000 	ldrb.w	r3, [sl]
 8005104:	2b2a      	cmp	r3, #42	@ 0x2a
 8005106:	d015      	beq.n	8005134 <_vfiprintf_r+0x120>
 8005108:	9a07      	ldr	r2, [sp, #28]
 800510a:	4654      	mov	r4, sl
 800510c:	2000      	movs	r0, #0
 800510e:	f04f 0c0a 	mov.w	ip, #10
 8005112:	4621      	mov	r1, r4
 8005114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005118:	3b30      	subs	r3, #48	@ 0x30
 800511a:	2b09      	cmp	r3, #9
 800511c:	d94b      	bls.n	80051b6 <_vfiprintf_r+0x1a2>
 800511e:	b1b0      	cbz	r0, 800514e <_vfiprintf_r+0x13a>
 8005120:	9207      	str	r2, [sp, #28]
 8005122:	e014      	b.n	800514e <_vfiprintf_r+0x13a>
 8005124:	eba0 0308 	sub.w	r3, r0, r8
 8005128:	fa09 f303 	lsl.w	r3, r9, r3
 800512c:	4313      	orrs	r3, r2
 800512e:	9304      	str	r3, [sp, #16]
 8005130:	46a2      	mov	sl, r4
 8005132:	e7d2      	b.n	80050da <_vfiprintf_r+0xc6>
 8005134:	9b03      	ldr	r3, [sp, #12]
 8005136:	1d19      	adds	r1, r3, #4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	9103      	str	r1, [sp, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfbb      	ittet	lt
 8005140:	425b      	neglt	r3, r3
 8005142:	f042 0202 	orrlt.w	r2, r2, #2
 8005146:	9307      	strge	r3, [sp, #28]
 8005148:	9307      	strlt	r3, [sp, #28]
 800514a:	bfb8      	it	lt
 800514c:	9204      	strlt	r2, [sp, #16]
 800514e:	7823      	ldrb	r3, [r4, #0]
 8005150:	2b2e      	cmp	r3, #46	@ 0x2e
 8005152:	d10a      	bne.n	800516a <_vfiprintf_r+0x156>
 8005154:	7863      	ldrb	r3, [r4, #1]
 8005156:	2b2a      	cmp	r3, #42	@ 0x2a
 8005158:	d132      	bne.n	80051c0 <_vfiprintf_r+0x1ac>
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	9203      	str	r2, [sp, #12]
 8005162:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005166:	3402      	adds	r4, #2
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005240 <_vfiprintf_r+0x22c>
 800516e:	7821      	ldrb	r1, [r4, #0]
 8005170:	2203      	movs	r2, #3
 8005172:	4650      	mov	r0, sl
 8005174:	f7fb f82c 	bl	80001d0 <memchr>
 8005178:	b138      	cbz	r0, 800518a <_vfiprintf_r+0x176>
 800517a:	9b04      	ldr	r3, [sp, #16]
 800517c:	eba0 000a 	sub.w	r0, r0, sl
 8005180:	2240      	movs	r2, #64	@ 0x40
 8005182:	4082      	lsls	r2, r0
 8005184:	4313      	orrs	r3, r2
 8005186:	3401      	adds	r4, #1
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800518e:	4829      	ldr	r0, [pc, #164]	@ (8005234 <_vfiprintf_r+0x220>)
 8005190:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005194:	2206      	movs	r2, #6
 8005196:	f7fb f81b 	bl	80001d0 <memchr>
 800519a:	2800      	cmp	r0, #0
 800519c:	d03f      	beq.n	800521e <_vfiprintf_r+0x20a>
 800519e:	4b26      	ldr	r3, [pc, #152]	@ (8005238 <_vfiprintf_r+0x224>)
 80051a0:	bb1b      	cbnz	r3, 80051ea <_vfiprintf_r+0x1d6>
 80051a2:	9b03      	ldr	r3, [sp, #12]
 80051a4:	3307      	adds	r3, #7
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	3308      	adds	r3, #8
 80051ac:	9303      	str	r3, [sp, #12]
 80051ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051b0:	443b      	add	r3, r7
 80051b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051b4:	e76a      	b.n	800508c <_vfiprintf_r+0x78>
 80051b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80051ba:	460c      	mov	r4, r1
 80051bc:	2001      	movs	r0, #1
 80051be:	e7a8      	b.n	8005112 <_vfiprintf_r+0xfe>
 80051c0:	2300      	movs	r3, #0
 80051c2:	3401      	adds	r4, #1
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	4619      	mov	r1, r3
 80051c8:	f04f 0c0a 	mov.w	ip, #10
 80051cc:	4620      	mov	r0, r4
 80051ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d2:	3a30      	subs	r2, #48	@ 0x30
 80051d4:	2a09      	cmp	r2, #9
 80051d6:	d903      	bls.n	80051e0 <_vfiprintf_r+0x1cc>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0c6      	beq.n	800516a <_vfiprintf_r+0x156>
 80051dc:	9105      	str	r1, [sp, #20]
 80051de:	e7c4      	b.n	800516a <_vfiprintf_r+0x156>
 80051e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e4:	4604      	mov	r4, r0
 80051e6:	2301      	movs	r3, #1
 80051e8:	e7f0      	b.n	80051cc <_vfiprintf_r+0x1b8>
 80051ea:	ab03      	add	r3, sp, #12
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	462a      	mov	r2, r5
 80051f0:	4b12      	ldr	r3, [pc, #72]	@ (800523c <_vfiprintf_r+0x228>)
 80051f2:	a904      	add	r1, sp, #16
 80051f4:	4630      	mov	r0, r6
 80051f6:	f7fe fbd1 	bl	800399c <_printf_float>
 80051fa:	4607      	mov	r7, r0
 80051fc:	1c78      	adds	r0, r7, #1
 80051fe:	d1d6      	bne.n	80051ae <_vfiprintf_r+0x19a>
 8005200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005202:	07d9      	lsls	r1, r3, #31
 8005204:	d405      	bmi.n	8005212 <_vfiprintf_r+0x1fe>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	059a      	lsls	r2, r3, #22
 800520a:	d402      	bmi.n	8005212 <_vfiprintf_r+0x1fe>
 800520c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800520e:	f7ff f889 	bl	8004324 <__retarget_lock_release_recursive>
 8005212:	89ab      	ldrh	r3, [r5, #12]
 8005214:	065b      	lsls	r3, r3, #25
 8005216:	f53f af1f 	bmi.w	8005058 <_vfiprintf_r+0x44>
 800521a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800521c:	e71e      	b.n	800505c <_vfiprintf_r+0x48>
 800521e:	ab03      	add	r3, sp, #12
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	462a      	mov	r2, r5
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <_vfiprintf_r+0x228>)
 8005226:	a904      	add	r1, sp, #16
 8005228:	4630      	mov	r0, r6
 800522a:	f7fe fe4f 	bl	8003ecc <_printf_i>
 800522e:	e7e4      	b.n	80051fa <_vfiprintf_r+0x1e6>
 8005230:	0800629d 	.word	0x0800629d
 8005234:	080062a7 	.word	0x080062a7
 8005238:	0800399d 	.word	0x0800399d
 800523c:	08004fef 	.word	0x08004fef
 8005240:	080062a3 	.word	0x080062a3

08005244 <malloc>:
 8005244:	4b02      	ldr	r3, [pc, #8]	@ (8005250 <malloc+0xc>)
 8005246:	4601      	mov	r1, r0
 8005248:	6818      	ldr	r0, [r3, #0]
 800524a:	f000 b825 	b.w	8005298 <_malloc_r>
 800524e:	bf00      	nop
 8005250:	20000018 	.word	0x20000018

08005254 <sbrk_aligned>:
 8005254:	b570      	push	{r4, r5, r6, lr}
 8005256:	4e0f      	ldr	r6, [pc, #60]	@ (8005294 <sbrk_aligned+0x40>)
 8005258:	460c      	mov	r4, r1
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	4605      	mov	r5, r0
 800525e:	b911      	cbnz	r1, 8005266 <sbrk_aligned+0x12>
 8005260:	f000 fe64 	bl	8005f2c <_sbrk_r>
 8005264:	6030      	str	r0, [r6, #0]
 8005266:	4621      	mov	r1, r4
 8005268:	4628      	mov	r0, r5
 800526a:	f000 fe5f 	bl	8005f2c <_sbrk_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d103      	bne.n	800527a <sbrk_aligned+0x26>
 8005272:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005276:	4620      	mov	r0, r4
 8005278:	bd70      	pop	{r4, r5, r6, pc}
 800527a:	1cc4      	adds	r4, r0, #3
 800527c:	f024 0403 	bic.w	r4, r4, #3
 8005280:	42a0      	cmp	r0, r4
 8005282:	d0f8      	beq.n	8005276 <sbrk_aligned+0x22>
 8005284:	1a21      	subs	r1, r4, r0
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fe50 	bl	8005f2c <_sbrk_r>
 800528c:	3001      	adds	r0, #1
 800528e:	d1f2      	bne.n	8005276 <sbrk_aligned+0x22>
 8005290:	e7ef      	b.n	8005272 <sbrk_aligned+0x1e>
 8005292:	bf00      	nop
 8005294:	200003c0 	.word	0x200003c0

08005298 <_malloc_r>:
 8005298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800529c:	1ccd      	adds	r5, r1, #3
 800529e:	f025 0503 	bic.w	r5, r5, #3
 80052a2:	3508      	adds	r5, #8
 80052a4:	2d0c      	cmp	r5, #12
 80052a6:	bf38      	it	cc
 80052a8:	250c      	movcc	r5, #12
 80052aa:	2d00      	cmp	r5, #0
 80052ac:	4606      	mov	r6, r0
 80052ae:	db01      	blt.n	80052b4 <_malloc_r+0x1c>
 80052b0:	42a9      	cmp	r1, r5
 80052b2:	d904      	bls.n	80052be <_malloc_r+0x26>
 80052b4:	230c      	movs	r3, #12
 80052b6:	6033      	str	r3, [r6, #0]
 80052b8:	2000      	movs	r0, #0
 80052ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005394 <_malloc_r+0xfc>
 80052c2:	f000 f915 	bl	80054f0 <__malloc_lock>
 80052c6:	f8d8 3000 	ldr.w	r3, [r8]
 80052ca:	461c      	mov	r4, r3
 80052cc:	bb44      	cbnz	r4, 8005320 <_malloc_r+0x88>
 80052ce:	4629      	mov	r1, r5
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7ff ffbf 	bl	8005254 <sbrk_aligned>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	4604      	mov	r4, r0
 80052da:	d158      	bne.n	800538e <_malloc_r+0xf6>
 80052dc:	f8d8 4000 	ldr.w	r4, [r8]
 80052e0:	4627      	mov	r7, r4
 80052e2:	2f00      	cmp	r7, #0
 80052e4:	d143      	bne.n	800536e <_malloc_r+0xd6>
 80052e6:	2c00      	cmp	r4, #0
 80052e8:	d04b      	beq.n	8005382 <_malloc_r+0xea>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	4639      	mov	r1, r7
 80052ee:	4630      	mov	r0, r6
 80052f0:	eb04 0903 	add.w	r9, r4, r3
 80052f4:	f000 fe1a 	bl	8005f2c <_sbrk_r>
 80052f8:	4581      	cmp	r9, r0
 80052fa:	d142      	bne.n	8005382 <_malloc_r+0xea>
 80052fc:	6821      	ldr	r1, [r4, #0]
 80052fe:	1a6d      	subs	r5, r5, r1
 8005300:	4629      	mov	r1, r5
 8005302:	4630      	mov	r0, r6
 8005304:	f7ff ffa6 	bl	8005254 <sbrk_aligned>
 8005308:	3001      	adds	r0, #1
 800530a:	d03a      	beq.n	8005382 <_malloc_r+0xea>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	442b      	add	r3, r5
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	f8d8 3000 	ldr.w	r3, [r8]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	bb62      	cbnz	r2, 8005374 <_malloc_r+0xdc>
 800531a:	f8c8 7000 	str.w	r7, [r8]
 800531e:	e00f      	b.n	8005340 <_malloc_r+0xa8>
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	1b52      	subs	r2, r2, r5
 8005324:	d420      	bmi.n	8005368 <_malloc_r+0xd0>
 8005326:	2a0b      	cmp	r2, #11
 8005328:	d917      	bls.n	800535a <_malloc_r+0xc2>
 800532a:	1961      	adds	r1, r4, r5
 800532c:	42a3      	cmp	r3, r4
 800532e:	6025      	str	r5, [r4, #0]
 8005330:	bf18      	it	ne
 8005332:	6059      	strne	r1, [r3, #4]
 8005334:	6863      	ldr	r3, [r4, #4]
 8005336:	bf08      	it	eq
 8005338:	f8c8 1000 	streq.w	r1, [r8]
 800533c:	5162      	str	r2, [r4, r5]
 800533e:	604b      	str	r3, [r1, #4]
 8005340:	4630      	mov	r0, r6
 8005342:	f000 f8db 	bl	80054fc <__malloc_unlock>
 8005346:	f104 000b 	add.w	r0, r4, #11
 800534a:	1d23      	adds	r3, r4, #4
 800534c:	f020 0007 	bic.w	r0, r0, #7
 8005350:	1ac2      	subs	r2, r0, r3
 8005352:	bf1c      	itt	ne
 8005354:	1a1b      	subne	r3, r3, r0
 8005356:	50a3      	strne	r3, [r4, r2]
 8005358:	e7af      	b.n	80052ba <_malloc_r+0x22>
 800535a:	6862      	ldr	r2, [r4, #4]
 800535c:	42a3      	cmp	r3, r4
 800535e:	bf0c      	ite	eq
 8005360:	f8c8 2000 	streq.w	r2, [r8]
 8005364:	605a      	strne	r2, [r3, #4]
 8005366:	e7eb      	b.n	8005340 <_malloc_r+0xa8>
 8005368:	4623      	mov	r3, r4
 800536a:	6864      	ldr	r4, [r4, #4]
 800536c:	e7ae      	b.n	80052cc <_malloc_r+0x34>
 800536e:	463c      	mov	r4, r7
 8005370:	687f      	ldr	r7, [r7, #4]
 8005372:	e7b6      	b.n	80052e2 <_malloc_r+0x4a>
 8005374:	461a      	mov	r2, r3
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	42a3      	cmp	r3, r4
 800537a:	d1fb      	bne.n	8005374 <_malloc_r+0xdc>
 800537c:	2300      	movs	r3, #0
 800537e:	6053      	str	r3, [r2, #4]
 8005380:	e7de      	b.n	8005340 <_malloc_r+0xa8>
 8005382:	230c      	movs	r3, #12
 8005384:	6033      	str	r3, [r6, #0]
 8005386:	4630      	mov	r0, r6
 8005388:	f000 f8b8 	bl	80054fc <__malloc_unlock>
 800538c:	e794      	b.n	80052b8 <_malloc_r+0x20>
 800538e:	6005      	str	r5, [r0, #0]
 8005390:	e7d6      	b.n	8005340 <_malloc_r+0xa8>
 8005392:	bf00      	nop
 8005394:	200003c4 	.word	0x200003c4

08005398 <__sflush_r>:
 8005398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a0:	0716      	lsls	r6, r2, #28
 80053a2:	4605      	mov	r5, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	d454      	bmi.n	8005452 <__sflush_r+0xba>
 80053a8:	684b      	ldr	r3, [r1, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dc02      	bgt.n	80053b4 <__sflush_r+0x1c>
 80053ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	dd48      	ble.n	8005446 <__sflush_r+0xae>
 80053b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	d045      	beq.n	8005446 <__sflush_r+0xae>
 80053ba:	2300      	movs	r3, #0
 80053bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053c0:	682f      	ldr	r7, [r5, #0]
 80053c2:	6a21      	ldr	r1, [r4, #32]
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	d030      	beq.n	800542a <__sflush_r+0x92>
 80053c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	0759      	lsls	r1, r3, #29
 80053ce:	d505      	bpl.n	80053dc <__sflush_r+0x44>
 80053d0:	6863      	ldr	r3, [r4, #4]
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053d6:	b10b      	cbz	r3, 80053dc <__sflush_r+0x44>
 80053d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053e0:	6a21      	ldr	r1, [r4, #32]
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b0      	blx	r6
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	d106      	bne.n	80053fa <__sflush_r+0x62>
 80053ec:	6829      	ldr	r1, [r5, #0]
 80053ee:	291d      	cmp	r1, #29
 80053f0:	d82b      	bhi.n	800544a <__sflush_r+0xb2>
 80053f2:	4a2a      	ldr	r2, [pc, #168]	@ (800549c <__sflush_r+0x104>)
 80053f4:	410a      	asrs	r2, r1
 80053f6:	07d6      	lsls	r6, r2, #31
 80053f8:	d427      	bmi.n	800544a <__sflush_r+0xb2>
 80053fa:	2200      	movs	r2, #0
 80053fc:	6062      	str	r2, [r4, #4]
 80053fe:	04d9      	lsls	r1, r3, #19
 8005400:	6922      	ldr	r2, [r4, #16]
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	d504      	bpl.n	8005410 <__sflush_r+0x78>
 8005406:	1c42      	adds	r2, r0, #1
 8005408:	d101      	bne.n	800540e <__sflush_r+0x76>
 800540a:	682b      	ldr	r3, [r5, #0]
 800540c:	b903      	cbnz	r3, 8005410 <__sflush_r+0x78>
 800540e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005412:	602f      	str	r7, [r5, #0]
 8005414:	b1b9      	cbz	r1, 8005446 <__sflush_r+0xae>
 8005416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800541a:	4299      	cmp	r1, r3
 800541c:	d002      	beq.n	8005424 <__sflush_r+0x8c>
 800541e:	4628      	mov	r0, r5
 8005420:	f000 fde6 	bl	8005ff0 <_free_r>
 8005424:	2300      	movs	r3, #0
 8005426:	6363      	str	r3, [r4, #52]	@ 0x34
 8005428:	e00d      	b.n	8005446 <__sflush_r+0xae>
 800542a:	2301      	movs	r3, #1
 800542c:	4628      	mov	r0, r5
 800542e:	47b0      	blx	r6
 8005430:	4602      	mov	r2, r0
 8005432:	1c50      	adds	r0, r2, #1
 8005434:	d1c9      	bne.n	80053ca <__sflush_r+0x32>
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0c6      	beq.n	80053ca <__sflush_r+0x32>
 800543c:	2b1d      	cmp	r3, #29
 800543e:	d001      	beq.n	8005444 <__sflush_r+0xac>
 8005440:	2b16      	cmp	r3, #22
 8005442:	d11e      	bne.n	8005482 <__sflush_r+0xea>
 8005444:	602f      	str	r7, [r5, #0]
 8005446:	2000      	movs	r0, #0
 8005448:	e022      	b.n	8005490 <__sflush_r+0xf8>
 800544a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800544e:	b21b      	sxth	r3, r3
 8005450:	e01b      	b.n	800548a <__sflush_r+0xf2>
 8005452:	690f      	ldr	r7, [r1, #16]
 8005454:	2f00      	cmp	r7, #0
 8005456:	d0f6      	beq.n	8005446 <__sflush_r+0xae>
 8005458:	0793      	lsls	r3, r2, #30
 800545a:	680e      	ldr	r6, [r1, #0]
 800545c:	bf08      	it	eq
 800545e:	694b      	ldreq	r3, [r1, #20]
 8005460:	600f      	str	r7, [r1, #0]
 8005462:	bf18      	it	ne
 8005464:	2300      	movne	r3, #0
 8005466:	eba6 0807 	sub.w	r8, r6, r7
 800546a:	608b      	str	r3, [r1, #8]
 800546c:	f1b8 0f00 	cmp.w	r8, #0
 8005470:	dde9      	ble.n	8005446 <__sflush_r+0xae>
 8005472:	6a21      	ldr	r1, [r4, #32]
 8005474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005476:	4643      	mov	r3, r8
 8005478:	463a      	mov	r2, r7
 800547a:	4628      	mov	r0, r5
 800547c:	47b0      	blx	r6
 800547e:	2800      	cmp	r0, #0
 8005480:	dc08      	bgt.n	8005494 <__sflush_r+0xfc>
 8005482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800548a:	81a3      	strh	r3, [r4, #12]
 800548c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	4407      	add	r7, r0
 8005496:	eba8 0800 	sub.w	r8, r8, r0
 800549a:	e7e7      	b.n	800546c <__sflush_r+0xd4>
 800549c:	dfbffffe 	.word	0xdfbffffe

080054a0 <_fflush_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	690b      	ldr	r3, [r1, #16]
 80054a4:	4605      	mov	r5, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	b913      	cbnz	r3, 80054b0 <_fflush_r+0x10>
 80054aa:	2500      	movs	r5, #0
 80054ac:	4628      	mov	r0, r5
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	b118      	cbz	r0, 80054ba <_fflush_r+0x1a>
 80054b2:	6a03      	ldr	r3, [r0, #32]
 80054b4:	b90b      	cbnz	r3, 80054ba <_fflush_r+0x1a>
 80054b6:	f7fe feb5 	bl	8004224 <__sinit>
 80054ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f3      	beq.n	80054aa <_fflush_r+0xa>
 80054c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054c4:	07d0      	lsls	r0, r2, #31
 80054c6:	d404      	bmi.n	80054d2 <_fflush_r+0x32>
 80054c8:	0599      	lsls	r1, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_fflush_r+0x32>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f7fe ff28 	bl	8004322 <__retarget_lock_acquire_recursive>
 80054d2:	4628      	mov	r0, r5
 80054d4:	4621      	mov	r1, r4
 80054d6:	f7ff ff5f 	bl	8005398 <__sflush_r>
 80054da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054dc:	07da      	lsls	r2, r3, #31
 80054de:	4605      	mov	r5, r0
 80054e0:	d4e4      	bmi.n	80054ac <_fflush_r+0xc>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	059b      	lsls	r3, r3, #22
 80054e6:	d4e1      	bmi.n	80054ac <_fflush_r+0xc>
 80054e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ea:	f7fe ff1b 	bl	8004324 <__retarget_lock_release_recursive>
 80054ee:	e7dd      	b.n	80054ac <_fflush_r+0xc>

080054f0 <__malloc_lock>:
 80054f0:	4801      	ldr	r0, [pc, #4]	@ (80054f8 <__malloc_lock+0x8>)
 80054f2:	f7fe bf16 	b.w	8004322 <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	200003bc 	.word	0x200003bc

080054fc <__malloc_unlock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	@ (8005504 <__malloc_unlock+0x8>)
 80054fe:	f7fe bf11 	b.w	8004324 <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	200003bc 	.word	0x200003bc

08005508 <_Balloc>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	69c6      	ldr	r6, [r0, #28]
 800550c:	4604      	mov	r4, r0
 800550e:	460d      	mov	r5, r1
 8005510:	b976      	cbnz	r6, 8005530 <_Balloc+0x28>
 8005512:	2010      	movs	r0, #16
 8005514:	f7ff fe96 	bl	8005244 <malloc>
 8005518:	4602      	mov	r2, r0
 800551a:	61e0      	str	r0, [r4, #28]
 800551c:	b920      	cbnz	r0, 8005528 <_Balloc+0x20>
 800551e:	4b18      	ldr	r3, [pc, #96]	@ (8005580 <_Balloc+0x78>)
 8005520:	4818      	ldr	r0, [pc, #96]	@ (8005584 <_Balloc+0x7c>)
 8005522:	216b      	movs	r1, #107	@ 0x6b
 8005524:	f000 fd32 	bl	8005f8c <__assert_func>
 8005528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800552c:	6006      	str	r6, [r0, #0]
 800552e:	60c6      	str	r6, [r0, #12]
 8005530:	69e6      	ldr	r6, [r4, #28]
 8005532:	68f3      	ldr	r3, [r6, #12]
 8005534:	b183      	cbz	r3, 8005558 <_Balloc+0x50>
 8005536:	69e3      	ldr	r3, [r4, #28]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800553e:	b9b8      	cbnz	r0, 8005570 <_Balloc+0x68>
 8005540:	2101      	movs	r1, #1
 8005542:	fa01 f605 	lsl.w	r6, r1, r5
 8005546:	1d72      	adds	r2, r6, #5
 8005548:	0092      	lsls	r2, r2, #2
 800554a:	4620      	mov	r0, r4
 800554c:	f000 fd3c 	bl	8005fc8 <_calloc_r>
 8005550:	b160      	cbz	r0, 800556c <_Balloc+0x64>
 8005552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005556:	e00e      	b.n	8005576 <_Balloc+0x6e>
 8005558:	2221      	movs	r2, #33	@ 0x21
 800555a:	2104      	movs	r1, #4
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fd33 	bl	8005fc8 <_calloc_r>
 8005562:	69e3      	ldr	r3, [r4, #28]
 8005564:	60f0      	str	r0, [r6, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e4      	bne.n	8005536 <_Balloc+0x2e>
 800556c:	2000      	movs	r0, #0
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	6802      	ldr	r2, [r0, #0]
 8005572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005576:	2300      	movs	r3, #0
 8005578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800557c:	e7f7      	b.n	800556e <_Balloc+0x66>
 800557e:	bf00      	nop
 8005580:	0800621d 	.word	0x0800621d
 8005584:	080062ae 	.word	0x080062ae

08005588 <_Bfree>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	69c6      	ldr	r6, [r0, #28]
 800558c:	4605      	mov	r5, r0
 800558e:	460c      	mov	r4, r1
 8005590:	b976      	cbnz	r6, 80055b0 <_Bfree+0x28>
 8005592:	2010      	movs	r0, #16
 8005594:	f7ff fe56 	bl	8005244 <malloc>
 8005598:	4602      	mov	r2, r0
 800559a:	61e8      	str	r0, [r5, #28]
 800559c:	b920      	cbnz	r0, 80055a8 <_Bfree+0x20>
 800559e:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <_Bfree+0x3c>)
 80055a0:	4809      	ldr	r0, [pc, #36]	@ (80055c8 <_Bfree+0x40>)
 80055a2:	218f      	movs	r1, #143	@ 0x8f
 80055a4:	f000 fcf2 	bl	8005f8c <__assert_func>
 80055a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055ac:	6006      	str	r6, [r0, #0]
 80055ae:	60c6      	str	r6, [r0, #12]
 80055b0:	b13c      	cbz	r4, 80055c2 <_Bfree+0x3a>
 80055b2:	69eb      	ldr	r3, [r5, #28]
 80055b4:	6862      	ldr	r2, [r4, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055bc:	6021      	str	r1, [r4, #0]
 80055be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	0800621d 	.word	0x0800621d
 80055c8:	080062ae 	.word	0x080062ae

080055cc <__multadd>:
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d0:	690d      	ldr	r5, [r1, #16]
 80055d2:	4607      	mov	r7, r0
 80055d4:	460c      	mov	r4, r1
 80055d6:	461e      	mov	r6, r3
 80055d8:	f101 0c14 	add.w	ip, r1, #20
 80055dc:	2000      	movs	r0, #0
 80055de:	f8dc 3000 	ldr.w	r3, [ip]
 80055e2:	b299      	uxth	r1, r3
 80055e4:	fb02 6101 	mla	r1, r2, r1, r6
 80055e8:	0c1e      	lsrs	r6, r3, #16
 80055ea:	0c0b      	lsrs	r3, r1, #16
 80055ec:	fb02 3306 	mla	r3, r2, r6, r3
 80055f0:	b289      	uxth	r1, r1
 80055f2:	3001      	adds	r0, #1
 80055f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055f8:	4285      	cmp	r5, r0
 80055fa:	f84c 1b04 	str.w	r1, [ip], #4
 80055fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005602:	dcec      	bgt.n	80055de <__multadd+0x12>
 8005604:	b30e      	cbz	r6, 800564a <__multadd+0x7e>
 8005606:	68a3      	ldr	r3, [r4, #8]
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc19      	bgt.n	8005640 <__multadd+0x74>
 800560c:	6861      	ldr	r1, [r4, #4]
 800560e:	4638      	mov	r0, r7
 8005610:	3101      	adds	r1, #1
 8005612:	f7ff ff79 	bl	8005508 <_Balloc>
 8005616:	4680      	mov	r8, r0
 8005618:	b928      	cbnz	r0, 8005626 <__multadd+0x5a>
 800561a:	4602      	mov	r2, r0
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <__multadd+0x84>)
 800561e:	480d      	ldr	r0, [pc, #52]	@ (8005654 <__multadd+0x88>)
 8005620:	21ba      	movs	r1, #186	@ 0xba
 8005622:	f000 fcb3 	bl	8005f8c <__assert_func>
 8005626:	6922      	ldr	r2, [r4, #16]
 8005628:	3202      	adds	r2, #2
 800562a:	f104 010c 	add.w	r1, r4, #12
 800562e:	0092      	lsls	r2, r2, #2
 8005630:	300c      	adds	r0, #12
 8005632:	f000 fc9d 	bl	8005f70 <memcpy>
 8005636:	4621      	mov	r1, r4
 8005638:	4638      	mov	r0, r7
 800563a:	f7ff ffa5 	bl	8005588 <_Bfree>
 800563e:	4644      	mov	r4, r8
 8005640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005644:	3501      	adds	r5, #1
 8005646:	615e      	str	r6, [r3, #20]
 8005648:	6125      	str	r5, [r4, #16]
 800564a:	4620      	mov	r0, r4
 800564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005650:	0800628c 	.word	0x0800628c
 8005654:	080062ae 	.word	0x080062ae

08005658 <__hi0bits>:
 8005658:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800565c:	4603      	mov	r3, r0
 800565e:	bf36      	itet	cc
 8005660:	0403      	lslcc	r3, r0, #16
 8005662:	2000      	movcs	r0, #0
 8005664:	2010      	movcc	r0, #16
 8005666:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800566a:	bf3c      	itt	cc
 800566c:	021b      	lslcc	r3, r3, #8
 800566e:	3008      	addcc	r0, #8
 8005670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005674:	bf3c      	itt	cc
 8005676:	011b      	lslcc	r3, r3, #4
 8005678:	3004      	addcc	r0, #4
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567e:	bf3c      	itt	cc
 8005680:	009b      	lslcc	r3, r3, #2
 8005682:	3002      	addcc	r0, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	db05      	blt.n	8005694 <__hi0bits+0x3c>
 8005688:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800568c:	f100 0001 	add.w	r0, r0, #1
 8005690:	bf08      	it	eq
 8005692:	2020      	moveq	r0, #32
 8005694:	4770      	bx	lr

08005696 <__lo0bits>:
 8005696:	6803      	ldr	r3, [r0, #0]
 8005698:	4602      	mov	r2, r0
 800569a:	f013 0007 	ands.w	r0, r3, #7
 800569e:	d00b      	beq.n	80056b8 <__lo0bits+0x22>
 80056a0:	07d9      	lsls	r1, r3, #31
 80056a2:	d421      	bmi.n	80056e8 <__lo0bits+0x52>
 80056a4:	0798      	lsls	r0, r3, #30
 80056a6:	bf49      	itett	mi
 80056a8:	085b      	lsrmi	r3, r3, #1
 80056aa:	089b      	lsrpl	r3, r3, #2
 80056ac:	2001      	movmi	r0, #1
 80056ae:	6013      	strmi	r3, [r2, #0]
 80056b0:	bf5c      	itt	pl
 80056b2:	6013      	strpl	r3, [r2, #0]
 80056b4:	2002      	movpl	r0, #2
 80056b6:	4770      	bx	lr
 80056b8:	b299      	uxth	r1, r3
 80056ba:	b909      	cbnz	r1, 80056c0 <__lo0bits+0x2a>
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	2010      	movs	r0, #16
 80056c0:	b2d9      	uxtb	r1, r3
 80056c2:	b909      	cbnz	r1, 80056c8 <__lo0bits+0x32>
 80056c4:	3008      	adds	r0, #8
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	0719      	lsls	r1, r3, #28
 80056ca:	bf04      	itt	eq
 80056cc:	091b      	lsreq	r3, r3, #4
 80056ce:	3004      	addeq	r0, #4
 80056d0:	0799      	lsls	r1, r3, #30
 80056d2:	bf04      	itt	eq
 80056d4:	089b      	lsreq	r3, r3, #2
 80056d6:	3002      	addeq	r0, #2
 80056d8:	07d9      	lsls	r1, r3, #31
 80056da:	d403      	bmi.n	80056e4 <__lo0bits+0x4e>
 80056dc:	085b      	lsrs	r3, r3, #1
 80056de:	f100 0001 	add.w	r0, r0, #1
 80056e2:	d003      	beq.n	80056ec <__lo0bits+0x56>
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	4770      	bx	lr
 80056e8:	2000      	movs	r0, #0
 80056ea:	4770      	bx	lr
 80056ec:	2020      	movs	r0, #32
 80056ee:	4770      	bx	lr

080056f0 <__i2b>:
 80056f0:	b510      	push	{r4, lr}
 80056f2:	460c      	mov	r4, r1
 80056f4:	2101      	movs	r1, #1
 80056f6:	f7ff ff07 	bl	8005508 <_Balloc>
 80056fa:	4602      	mov	r2, r0
 80056fc:	b928      	cbnz	r0, 800570a <__i2b+0x1a>
 80056fe:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <__i2b+0x24>)
 8005700:	4805      	ldr	r0, [pc, #20]	@ (8005718 <__i2b+0x28>)
 8005702:	f240 1145 	movw	r1, #325	@ 0x145
 8005706:	f000 fc41 	bl	8005f8c <__assert_func>
 800570a:	2301      	movs	r3, #1
 800570c:	6144      	str	r4, [r0, #20]
 800570e:	6103      	str	r3, [r0, #16]
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop
 8005714:	0800628c 	.word	0x0800628c
 8005718:	080062ae 	.word	0x080062ae

0800571c <__multiply>:
 800571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005720:	4614      	mov	r4, r2
 8005722:	690a      	ldr	r2, [r1, #16]
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	bfa8      	it	ge
 800572a:	4623      	movge	r3, r4
 800572c:	460f      	mov	r7, r1
 800572e:	bfa4      	itt	ge
 8005730:	460c      	movge	r4, r1
 8005732:	461f      	movge	r7, r3
 8005734:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005738:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	6861      	ldr	r1, [r4, #4]
 8005740:	eb0a 0609 	add.w	r6, sl, r9
 8005744:	42b3      	cmp	r3, r6
 8005746:	b085      	sub	sp, #20
 8005748:	bfb8      	it	lt
 800574a:	3101      	addlt	r1, #1
 800574c:	f7ff fedc 	bl	8005508 <_Balloc>
 8005750:	b930      	cbnz	r0, 8005760 <__multiply+0x44>
 8005752:	4602      	mov	r2, r0
 8005754:	4b44      	ldr	r3, [pc, #272]	@ (8005868 <__multiply+0x14c>)
 8005756:	4845      	ldr	r0, [pc, #276]	@ (800586c <__multiply+0x150>)
 8005758:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800575c:	f000 fc16 	bl	8005f8c <__assert_func>
 8005760:	f100 0514 	add.w	r5, r0, #20
 8005764:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005768:	462b      	mov	r3, r5
 800576a:	2200      	movs	r2, #0
 800576c:	4543      	cmp	r3, r8
 800576e:	d321      	bcc.n	80057b4 <__multiply+0x98>
 8005770:	f107 0114 	add.w	r1, r7, #20
 8005774:	f104 0214 	add.w	r2, r4, #20
 8005778:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800577c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005780:	9302      	str	r3, [sp, #8]
 8005782:	1b13      	subs	r3, r2, r4
 8005784:	3b15      	subs	r3, #21
 8005786:	f023 0303 	bic.w	r3, r3, #3
 800578a:	3304      	adds	r3, #4
 800578c:	f104 0715 	add.w	r7, r4, #21
 8005790:	42ba      	cmp	r2, r7
 8005792:	bf38      	it	cc
 8005794:	2304      	movcc	r3, #4
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	9b02      	ldr	r3, [sp, #8]
 800579a:	9103      	str	r1, [sp, #12]
 800579c:	428b      	cmp	r3, r1
 800579e:	d80c      	bhi.n	80057ba <__multiply+0x9e>
 80057a0:	2e00      	cmp	r6, #0
 80057a2:	dd03      	ble.n	80057ac <__multiply+0x90>
 80057a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05b      	beq.n	8005864 <__multiply+0x148>
 80057ac:	6106      	str	r6, [r0, #16]
 80057ae:	b005      	add	sp, #20
 80057b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b4:	f843 2b04 	str.w	r2, [r3], #4
 80057b8:	e7d8      	b.n	800576c <__multiply+0x50>
 80057ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80057be:	f1ba 0f00 	cmp.w	sl, #0
 80057c2:	d024      	beq.n	800580e <__multiply+0xf2>
 80057c4:	f104 0e14 	add.w	lr, r4, #20
 80057c8:	46a9      	mov	r9, r5
 80057ca:	f04f 0c00 	mov.w	ip, #0
 80057ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057d2:	f8d9 3000 	ldr.w	r3, [r9]
 80057d6:	fa1f fb87 	uxth.w	fp, r7
 80057da:	b29b      	uxth	r3, r3
 80057dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80057e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80057e4:	f8d9 7000 	ldr.w	r7, [r9]
 80057e8:	4463      	add	r3, ip
 80057ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80057ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80057f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057fc:	4572      	cmp	r2, lr
 80057fe:	f849 3b04 	str.w	r3, [r9], #4
 8005802:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005806:	d8e2      	bhi.n	80057ce <__multiply+0xb2>
 8005808:	9b01      	ldr	r3, [sp, #4]
 800580a:	f845 c003 	str.w	ip, [r5, r3]
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005814:	3104      	adds	r1, #4
 8005816:	f1b9 0f00 	cmp.w	r9, #0
 800581a:	d021      	beq.n	8005860 <__multiply+0x144>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	f104 0c14 	add.w	ip, r4, #20
 8005822:	46ae      	mov	lr, r5
 8005824:	f04f 0a00 	mov.w	sl, #0
 8005828:	f8bc b000 	ldrh.w	fp, [ip]
 800582c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005830:	fb09 770b 	mla	r7, r9, fp, r7
 8005834:	4457      	add	r7, sl
 8005836:	b29b      	uxth	r3, r3
 8005838:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800583c:	f84e 3b04 	str.w	r3, [lr], #4
 8005840:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005844:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005848:	f8be 3000 	ldrh.w	r3, [lr]
 800584c:	fb09 330a 	mla	r3, r9, sl, r3
 8005850:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005854:	4562      	cmp	r2, ip
 8005856:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800585a:	d8e5      	bhi.n	8005828 <__multiply+0x10c>
 800585c:	9f01      	ldr	r7, [sp, #4]
 800585e:	51eb      	str	r3, [r5, r7]
 8005860:	3504      	adds	r5, #4
 8005862:	e799      	b.n	8005798 <__multiply+0x7c>
 8005864:	3e01      	subs	r6, #1
 8005866:	e79b      	b.n	80057a0 <__multiply+0x84>
 8005868:	0800628c 	.word	0x0800628c
 800586c:	080062ae 	.word	0x080062ae

08005870 <__pow5mult>:
 8005870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005874:	4615      	mov	r5, r2
 8005876:	f012 0203 	ands.w	r2, r2, #3
 800587a:	4607      	mov	r7, r0
 800587c:	460e      	mov	r6, r1
 800587e:	d007      	beq.n	8005890 <__pow5mult+0x20>
 8005880:	4c25      	ldr	r4, [pc, #148]	@ (8005918 <__pow5mult+0xa8>)
 8005882:	3a01      	subs	r2, #1
 8005884:	2300      	movs	r3, #0
 8005886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800588a:	f7ff fe9f 	bl	80055cc <__multadd>
 800588e:	4606      	mov	r6, r0
 8005890:	10ad      	asrs	r5, r5, #2
 8005892:	d03d      	beq.n	8005910 <__pow5mult+0xa0>
 8005894:	69fc      	ldr	r4, [r7, #28]
 8005896:	b97c      	cbnz	r4, 80058b8 <__pow5mult+0x48>
 8005898:	2010      	movs	r0, #16
 800589a:	f7ff fcd3 	bl	8005244 <malloc>
 800589e:	4602      	mov	r2, r0
 80058a0:	61f8      	str	r0, [r7, #28]
 80058a2:	b928      	cbnz	r0, 80058b0 <__pow5mult+0x40>
 80058a4:	4b1d      	ldr	r3, [pc, #116]	@ (800591c <__pow5mult+0xac>)
 80058a6:	481e      	ldr	r0, [pc, #120]	@ (8005920 <__pow5mult+0xb0>)
 80058a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80058ac:	f000 fb6e 	bl	8005f8c <__assert_func>
 80058b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058b4:	6004      	str	r4, [r0, #0]
 80058b6:	60c4      	str	r4, [r0, #12]
 80058b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80058bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058c0:	b94c      	cbnz	r4, 80058d6 <__pow5mult+0x66>
 80058c2:	f240 2171 	movw	r1, #625	@ 0x271
 80058c6:	4638      	mov	r0, r7
 80058c8:	f7ff ff12 	bl	80056f0 <__i2b>
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80058d2:	4604      	mov	r4, r0
 80058d4:	6003      	str	r3, [r0, #0]
 80058d6:	f04f 0900 	mov.w	r9, #0
 80058da:	07eb      	lsls	r3, r5, #31
 80058dc:	d50a      	bpl.n	80058f4 <__pow5mult+0x84>
 80058de:	4631      	mov	r1, r6
 80058e0:	4622      	mov	r2, r4
 80058e2:	4638      	mov	r0, r7
 80058e4:	f7ff ff1a 	bl	800571c <__multiply>
 80058e8:	4631      	mov	r1, r6
 80058ea:	4680      	mov	r8, r0
 80058ec:	4638      	mov	r0, r7
 80058ee:	f7ff fe4b 	bl	8005588 <_Bfree>
 80058f2:	4646      	mov	r6, r8
 80058f4:	106d      	asrs	r5, r5, #1
 80058f6:	d00b      	beq.n	8005910 <__pow5mult+0xa0>
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	b938      	cbnz	r0, 800590c <__pow5mult+0x9c>
 80058fc:	4622      	mov	r2, r4
 80058fe:	4621      	mov	r1, r4
 8005900:	4638      	mov	r0, r7
 8005902:	f7ff ff0b 	bl	800571c <__multiply>
 8005906:	6020      	str	r0, [r4, #0]
 8005908:	f8c0 9000 	str.w	r9, [r0]
 800590c:	4604      	mov	r4, r0
 800590e:	e7e4      	b.n	80058da <__pow5mult+0x6a>
 8005910:	4630      	mov	r0, r6
 8005912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005916:	bf00      	nop
 8005918:	08006308 	.word	0x08006308
 800591c:	0800621d 	.word	0x0800621d
 8005920:	080062ae 	.word	0x080062ae

08005924 <__lshift>:
 8005924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	460c      	mov	r4, r1
 800592a:	6849      	ldr	r1, [r1, #4]
 800592c:	6923      	ldr	r3, [r4, #16]
 800592e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005932:	68a3      	ldr	r3, [r4, #8]
 8005934:	4607      	mov	r7, r0
 8005936:	4691      	mov	r9, r2
 8005938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800593c:	f108 0601 	add.w	r6, r8, #1
 8005940:	42b3      	cmp	r3, r6
 8005942:	db0b      	blt.n	800595c <__lshift+0x38>
 8005944:	4638      	mov	r0, r7
 8005946:	f7ff fddf 	bl	8005508 <_Balloc>
 800594a:	4605      	mov	r5, r0
 800594c:	b948      	cbnz	r0, 8005962 <__lshift+0x3e>
 800594e:	4602      	mov	r2, r0
 8005950:	4b28      	ldr	r3, [pc, #160]	@ (80059f4 <__lshift+0xd0>)
 8005952:	4829      	ldr	r0, [pc, #164]	@ (80059f8 <__lshift+0xd4>)
 8005954:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005958:	f000 fb18 	bl	8005f8c <__assert_func>
 800595c:	3101      	adds	r1, #1
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	e7ee      	b.n	8005940 <__lshift+0x1c>
 8005962:	2300      	movs	r3, #0
 8005964:	f100 0114 	add.w	r1, r0, #20
 8005968:	f100 0210 	add.w	r2, r0, #16
 800596c:	4618      	mov	r0, r3
 800596e:	4553      	cmp	r3, sl
 8005970:	db33      	blt.n	80059da <__lshift+0xb6>
 8005972:	6920      	ldr	r0, [r4, #16]
 8005974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005978:	f104 0314 	add.w	r3, r4, #20
 800597c:	f019 091f 	ands.w	r9, r9, #31
 8005980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005984:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005988:	d02b      	beq.n	80059e2 <__lshift+0xbe>
 800598a:	f1c9 0e20 	rsb	lr, r9, #32
 800598e:	468a      	mov	sl, r1
 8005990:	2200      	movs	r2, #0
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	fa00 f009 	lsl.w	r0, r0, r9
 8005998:	4310      	orrs	r0, r2
 800599a:	f84a 0b04 	str.w	r0, [sl], #4
 800599e:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a2:	459c      	cmp	ip, r3
 80059a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80059a8:	d8f3      	bhi.n	8005992 <__lshift+0x6e>
 80059aa:	ebac 0304 	sub.w	r3, ip, r4
 80059ae:	3b15      	subs	r3, #21
 80059b0:	f023 0303 	bic.w	r3, r3, #3
 80059b4:	3304      	adds	r3, #4
 80059b6:	f104 0015 	add.w	r0, r4, #21
 80059ba:	4584      	cmp	ip, r0
 80059bc:	bf38      	it	cc
 80059be:	2304      	movcc	r3, #4
 80059c0:	50ca      	str	r2, [r1, r3]
 80059c2:	b10a      	cbz	r2, 80059c8 <__lshift+0xa4>
 80059c4:	f108 0602 	add.w	r6, r8, #2
 80059c8:	3e01      	subs	r6, #1
 80059ca:	4638      	mov	r0, r7
 80059cc:	612e      	str	r6, [r5, #16]
 80059ce:	4621      	mov	r1, r4
 80059d0:	f7ff fdda 	bl	8005588 <_Bfree>
 80059d4:	4628      	mov	r0, r5
 80059d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059da:	f842 0f04 	str.w	r0, [r2, #4]!
 80059de:	3301      	adds	r3, #1
 80059e0:	e7c5      	b.n	800596e <__lshift+0x4a>
 80059e2:	3904      	subs	r1, #4
 80059e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80059ec:	459c      	cmp	ip, r3
 80059ee:	d8f9      	bhi.n	80059e4 <__lshift+0xc0>
 80059f0:	e7ea      	b.n	80059c8 <__lshift+0xa4>
 80059f2:	bf00      	nop
 80059f4:	0800628c 	.word	0x0800628c
 80059f8:	080062ae 	.word	0x080062ae

080059fc <__mcmp>:
 80059fc:	690a      	ldr	r2, [r1, #16]
 80059fe:	4603      	mov	r3, r0
 8005a00:	6900      	ldr	r0, [r0, #16]
 8005a02:	1a80      	subs	r0, r0, r2
 8005a04:	b530      	push	{r4, r5, lr}
 8005a06:	d10e      	bne.n	8005a26 <__mcmp+0x2a>
 8005a08:	3314      	adds	r3, #20
 8005a0a:	3114      	adds	r1, #20
 8005a0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a1c:	4295      	cmp	r5, r2
 8005a1e:	d003      	beq.n	8005a28 <__mcmp+0x2c>
 8005a20:	d205      	bcs.n	8005a2e <__mcmp+0x32>
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a26:	bd30      	pop	{r4, r5, pc}
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d3f3      	bcc.n	8005a14 <__mcmp+0x18>
 8005a2c:	e7fb      	b.n	8005a26 <__mcmp+0x2a>
 8005a2e:	2001      	movs	r0, #1
 8005a30:	e7f9      	b.n	8005a26 <__mcmp+0x2a>
	...

08005a34 <__mdiff>:
 8005a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a38:	4689      	mov	r9, r1
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4648      	mov	r0, r9
 8005a40:	4614      	mov	r4, r2
 8005a42:	f7ff ffdb 	bl	80059fc <__mcmp>
 8005a46:	1e05      	subs	r5, r0, #0
 8005a48:	d112      	bne.n	8005a70 <__mdiff+0x3c>
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f7ff fd5b 	bl	8005508 <_Balloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	b928      	cbnz	r0, 8005a62 <__mdiff+0x2e>
 8005a56:	4b3f      	ldr	r3, [pc, #252]	@ (8005b54 <__mdiff+0x120>)
 8005a58:	f240 2137 	movw	r1, #567	@ 0x237
 8005a5c:	483e      	ldr	r0, [pc, #248]	@ (8005b58 <__mdiff+0x124>)
 8005a5e:	f000 fa95 	bl	8005f8c <__assert_func>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a68:	4610      	mov	r0, r2
 8005a6a:	b003      	add	sp, #12
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	bfbc      	itt	lt
 8005a72:	464b      	movlt	r3, r9
 8005a74:	46a1      	movlt	r9, r4
 8005a76:	4630      	mov	r0, r6
 8005a78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a7c:	bfba      	itte	lt
 8005a7e:	461c      	movlt	r4, r3
 8005a80:	2501      	movlt	r5, #1
 8005a82:	2500      	movge	r5, #0
 8005a84:	f7ff fd40 	bl	8005508 <_Balloc>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	b918      	cbnz	r0, 8005a94 <__mdiff+0x60>
 8005a8c:	4b31      	ldr	r3, [pc, #196]	@ (8005b54 <__mdiff+0x120>)
 8005a8e:	f240 2145 	movw	r1, #581	@ 0x245
 8005a92:	e7e3      	b.n	8005a5c <__mdiff+0x28>
 8005a94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a98:	6926      	ldr	r6, [r4, #16]
 8005a9a:	60c5      	str	r5, [r0, #12]
 8005a9c:	f109 0310 	add.w	r3, r9, #16
 8005aa0:	f109 0514 	add.w	r5, r9, #20
 8005aa4:	f104 0e14 	add.w	lr, r4, #20
 8005aa8:	f100 0b14 	add.w	fp, r0, #20
 8005aac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ab0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	46d9      	mov	r9, fp
 8005ab8:	f04f 0c00 	mov.w	ip, #0
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ac2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	fa1f f38a 	uxth.w	r3, sl
 8005acc:	4619      	mov	r1, r3
 8005ace:	b283      	uxth	r3, r0
 8005ad0:	1acb      	subs	r3, r1, r3
 8005ad2:	0c00      	lsrs	r0, r0, #16
 8005ad4:	4463      	add	r3, ip
 8005ad6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ada:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ae4:	4576      	cmp	r6, lr
 8005ae6:	f849 3b04 	str.w	r3, [r9], #4
 8005aea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005aee:	d8e5      	bhi.n	8005abc <__mdiff+0x88>
 8005af0:	1b33      	subs	r3, r6, r4
 8005af2:	3b15      	subs	r3, #21
 8005af4:	f023 0303 	bic.w	r3, r3, #3
 8005af8:	3415      	adds	r4, #21
 8005afa:	3304      	adds	r3, #4
 8005afc:	42a6      	cmp	r6, r4
 8005afe:	bf38      	it	cc
 8005b00:	2304      	movcc	r3, #4
 8005b02:	441d      	add	r5, r3
 8005b04:	445b      	add	r3, fp
 8005b06:	461e      	mov	r6, r3
 8005b08:	462c      	mov	r4, r5
 8005b0a:	4544      	cmp	r4, r8
 8005b0c:	d30e      	bcc.n	8005b2c <__mdiff+0xf8>
 8005b0e:	f108 0103 	add.w	r1, r8, #3
 8005b12:	1b49      	subs	r1, r1, r5
 8005b14:	f021 0103 	bic.w	r1, r1, #3
 8005b18:	3d03      	subs	r5, #3
 8005b1a:	45a8      	cmp	r8, r5
 8005b1c:	bf38      	it	cc
 8005b1e:	2100      	movcc	r1, #0
 8005b20:	440b      	add	r3, r1
 8005b22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b26:	b191      	cbz	r1, 8005b4e <__mdiff+0x11a>
 8005b28:	6117      	str	r7, [r2, #16]
 8005b2a:	e79d      	b.n	8005a68 <__mdiff+0x34>
 8005b2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b30:	46e6      	mov	lr, ip
 8005b32:	0c08      	lsrs	r0, r1, #16
 8005b34:	fa1c fc81 	uxtah	ip, ip, r1
 8005b38:	4471      	add	r1, lr
 8005b3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b3e:	b289      	uxth	r1, r1
 8005b40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b44:	f846 1b04 	str.w	r1, [r6], #4
 8005b48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b4c:	e7dd      	b.n	8005b0a <__mdiff+0xd6>
 8005b4e:	3f01      	subs	r7, #1
 8005b50:	e7e7      	b.n	8005b22 <__mdiff+0xee>
 8005b52:	bf00      	nop
 8005b54:	0800628c 	.word	0x0800628c
 8005b58:	080062ae 	.word	0x080062ae

08005b5c <__d2b>:
 8005b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	460f      	mov	r7, r1
 8005b62:	2101      	movs	r1, #1
 8005b64:	ec59 8b10 	vmov	r8, r9, d0
 8005b68:	4616      	mov	r6, r2
 8005b6a:	f7ff fccd 	bl	8005508 <_Balloc>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	b930      	cbnz	r0, 8005b80 <__d2b+0x24>
 8005b72:	4602      	mov	r2, r0
 8005b74:	4b23      	ldr	r3, [pc, #140]	@ (8005c04 <__d2b+0xa8>)
 8005b76:	4824      	ldr	r0, [pc, #144]	@ (8005c08 <__d2b+0xac>)
 8005b78:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b7c:	f000 fa06 	bl	8005f8c <__assert_func>
 8005b80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b88:	b10d      	cbz	r5, 8005b8e <__d2b+0x32>
 8005b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f1b8 0300 	subs.w	r3, r8, #0
 8005b94:	d023      	beq.n	8005bde <__d2b+0x82>
 8005b96:	4668      	mov	r0, sp
 8005b98:	9300      	str	r3, [sp, #0]
 8005b9a:	f7ff fd7c 	bl	8005696 <__lo0bits>
 8005b9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ba2:	b1d0      	cbz	r0, 8005bda <__d2b+0x7e>
 8005ba4:	f1c0 0320 	rsb	r3, r0, #32
 8005ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bac:	430b      	orrs	r3, r1
 8005bae:	40c2      	lsrs	r2, r0
 8005bb0:	6163      	str	r3, [r4, #20]
 8005bb2:	9201      	str	r2, [sp, #4]
 8005bb4:	9b01      	ldr	r3, [sp, #4]
 8005bb6:	61a3      	str	r3, [r4, #24]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf0c      	ite	eq
 8005bbc:	2201      	moveq	r2, #1
 8005bbe:	2202      	movne	r2, #2
 8005bc0:	6122      	str	r2, [r4, #16]
 8005bc2:	b1a5      	cbz	r5, 8005bee <__d2b+0x92>
 8005bc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005bc8:	4405      	add	r5, r0
 8005bca:	603d      	str	r5, [r7, #0]
 8005bcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005bd0:	6030      	str	r0, [r6, #0]
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	b003      	add	sp, #12
 8005bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bda:	6161      	str	r1, [r4, #20]
 8005bdc:	e7ea      	b.n	8005bb4 <__d2b+0x58>
 8005bde:	a801      	add	r0, sp, #4
 8005be0:	f7ff fd59 	bl	8005696 <__lo0bits>
 8005be4:	9b01      	ldr	r3, [sp, #4]
 8005be6:	6163      	str	r3, [r4, #20]
 8005be8:	3020      	adds	r0, #32
 8005bea:	2201      	movs	r2, #1
 8005bec:	e7e8      	b.n	8005bc0 <__d2b+0x64>
 8005bee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005bf6:	6038      	str	r0, [r7, #0]
 8005bf8:	6918      	ldr	r0, [r3, #16]
 8005bfa:	f7ff fd2d 	bl	8005658 <__hi0bits>
 8005bfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c02:	e7e5      	b.n	8005bd0 <__d2b+0x74>
 8005c04:	0800628c 	.word	0x0800628c
 8005c08:	080062ae 	.word	0x080062ae

08005c0c <__sread>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	460c      	mov	r4, r1
 8005c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c14:	f000 f978 	bl	8005f08 <_read_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	bfab      	itete	ge
 8005c1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c20:	181b      	addge	r3, r3, r0
 8005c22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c26:	bfac      	ite	ge
 8005c28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c2a:	81a3      	strhlt	r3, [r4, #12]
 8005c2c:	bd10      	pop	{r4, pc}

08005c2e <__swrite>:
 8005c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	461f      	mov	r7, r3
 8005c34:	898b      	ldrh	r3, [r1, #12]
 8005c36:	05db      	lsls	r3, r3, #23
 8005c38:	4605      	mov	r5, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4616      	mov	r6, r2
 8005c3e:	d505      	bpl.n	8005c4c <__swrite+0x1e>
 8005c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c44:	2302      	movs	r3, #2
 8005c46:	2200      	movs	r2, #0
 8005c48:	f000 f94c 	bl	8005ee4 <_lseek_r>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c56:	81a3      	strh	r3, [r4, #12]
 8005c58:	4632      	mov	r2, r6
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c62:	f000 b973 	b.w	8005f4c <_write_r>

08005c66 <__sseek>:
 8005c66:	b510      	push	{r4, lr}
 8005c68:	460c      	mov	r4, r1
 8005c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6e:	f000 f939 	bl	8005ee4 <_lseek_r>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	89a3      	ldrh	r3, [r4, #12]
 8005c76:	bf15      	itete	ne
 8005c78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c82:	81a3      	strheq	r3, [r4, #12]
 8005c84:	bf18      	it	ne
 8005c86:	81a3      	strhne	r3, [r4, #12]
 8005c88:	bd10      	pop	{r4, pc}

08005c8a <__sclose>:
 8005c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8e:	f000 b8f7 	b.w	8005e80 <_close_r>

08005c92 <__swbuf_r>:
 8005c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c94:	460e      	mov	r6, r1
 8005c96:	4614      	mov	r4, r2
 8005c98:	4605      	mov	r5, r0
 8005c9a:	b118      	cbz	r0, 8005ca4 <__swbuf_r+0x12>
 8005c9c:	6a03      	ldr	r3, [r0, #32]
 8005c9e:	b90b      	cbnz	r3, 8005ca4 <__swbuf_r+0x12>
 8005ca0:	f7fe fac0 	bl	8004224 <__sinit>
 8005ca4:	69a3      	ldr	r3, [r4, #24]
 8005ca6:	60a3      	str	r3, [r4, #8]
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	071a      	lsls	r2, r3, #28
 8005cac:	d501      	bpl.n	8005cb2 <__swbuf_r+0x20>
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	b943      	cbnz	r3, 8005cc4 <__swbuf_r+0x32>
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f000 f82b 	bl	8005d10 <__swsetup_r>
 8005cba:	b118      	cbz	r0, 8005cc4 <__swbuf_r+0x32>
 8005cbc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	1a98      	subs	r0, r3, r2
 8005cca:	6963      	ldr	r3, [r4, #20]
 8005ccc:	b2f6      	uxtb	r6, r6
 8005cce:	4283      	cmp	r3, r0
 8005cd0:	4637      	mov	r7, r6
 8005cd2:	dc05      	bgt.n	8005ce0 <__swbuf_r+0x4e>
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7ff fbe2 	bl	80054a0 <_fflush_r>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d1ed      	bne.n	8005cbc <__swbuf_r+0x2a>
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	6022      	str	r2, [r4, #0]
 8005cec:	701e      	strb	r6, [r3, #0]
 8005cee:	6962      	ldr	r2, [r4, #20]
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d004      	beq.n	8005d00 <__swbuf_r+0x6e>
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	07db      	lsls	r3, r3, #31
 8005cfa:	d5e1      	bpl.n	8005cc0 <__swbuf_r+0x2e>
 8005cfc:	2e0a      	cmp	r6, #10
 8005cfe:	d1df      	bne.n	8005cc0 <__swbuf_r+0x2e>
 8005d00:	4621      	mov	r1, r4
 8005d02:	4628      	mov	r0, r5
 8005d04:	f7ff fbcc 	bl	80054a0 <_fflush_r>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	d0d9      	beq.n	8005cc0 <__swbuf_r+0x2e>
 8005d0c:	e7d6      	b.n	8005cbc <__swbuf_r+0x2a>
	...

08005d10 <__swsetup_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4b29      	ldr	r3, [pc, #164]	@ (8005db8 <__swsetup_r+0xa8>)
 8005d14:	4605      	mov	r5, r0
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	460c      	mov	r4, r1
 8005d1a:	b118      	cbz	r0, 8005d24 <__swsetup_r+0x14>
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	b90b      	cbnz	r3, 8005d24 <__swsetup_r+0x14>
 8005d20:	f7fe fa80 	bl	8004224 <__sinit>
 8005d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d28:	0719      	lsls	r1, r3, #28
 8005d2a:	d422      	bmi.n	8005d72 <__swsetup_r+0x62>
 8005d2c:	06da      	lsls	r2, r3, #27
 8005d2e:	d407      	bmi.n	8005d40 <__swsetup_r+0x30>
 8005d30:	2209      	movs	r2, #9
 8005d32:	602a      	str	r2, [r5, #0]
 8005d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d3e:	e033      	b.n	8005da8 <__swsetup_r+0x98>
 8005d40:	0758      	lsls	r0, r3, #29
 8005d42:	d512      	bpl.n	8005d6a <__swsetup_r+0x5a>
 8005d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d46:	b141      	cbz	r1, 8005d5a <__swsetup_r+0x4a>
 8005d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d002      	beq.n	8005d56 <__swsetup_r+0x46>
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 f94d 	bl	8005ff0 <_free_r>
 8005d56:	2300      	movs	r3, #0
 8005d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	2300      	movs	r3, #0
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	6923      	ldr	r3, [r4, #16]
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	f043 0308 	orr.w	r3, r3, #8
 8005d70:	81a3      	strh	r3, [r4, #12]
 8005d72:	6923      	ldr	r3, [r4, #16]
 8005d74:	b94b      	cbnz	r3, 8005d8a <__swsetup_r+0x7a>
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d80:	d003      	beq.n	8005d8a <__swsetup_r+0x7a>
 8005d82:	4621      	mov	r1, r4
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 f83f 	bl	8005e08 <__smakebuf_r>
 8005d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8e:	f013 0201 	ands.w	r2, r3, #1
 8005d92:	d00a      	beq.n	8005daa <__swsetup_r+0x9a>
 8005d94:	2200      	movs	r2, #0
 8005d96:	60a2      	str	r2, [r4, #8]
 8005d98:	6962      	ldr	r2, [r4, #20]
 8005d9a:	4252      	negs	r2, r2
 8005d9c:	61a2      	str	r2, [r4, #24]
 8005d9e:	6922      	ldr	r2, [r4, #16]
 8005da0:	b942      	cbnz	r2, 8005db4 <__swsetup_r+0xa4>
 8005da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005da6:	d1c5      	bne.n	8005d34 <__swsetup_r+0x24>
 8005da8:	bd38      	pop	{r3, r4, r5, pc}
 8005daa:	0799      	lsls	r1, r3, #30
 8005dac:	bf58      	it	pl
 8005dae:	6962      	ldrpl	r2, [r4, #20]
 8005db0:	60a2      	str	r2, [r4, #8]
 8005db2:	e7f4      	b.n	8005d9e <__swsetup_r+0x8e>
 8005db4:	2000      	movs	r0, #0
 8005db6:	e7f7      	b.n	8005da8 <__swsetup_r+0x98>
 8005db8:	20000018 	.word	0x20000018

08005dbc <__swhatbuf_r>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	b096      	sub	sp, #88	@ 0x58
 8005dc8:	4615      	mov	r5, r2
 8005dca:	461e      	mov	r6, r3
 8005dcc:	da0d      	bge.n	8005dea <__swhatbuf_r+0x2e>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	bf14      	ite	ne
 8005dda:	2340      	movne	r3, #64	@ 0x40
 8005ddc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005de0:	2000      	movs	r0, #0
 8005de2:	6031      	str	r1, [r6, #0]
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	b016      	add	sp, #88	@ 0x58
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
 8005dea:	466a      	mov	r2, sp
 8005dec:	f000 f858 	bl	8005ea0 <_fstat_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	dbec      	blt.n	8005dce <__swhatbuf_r+0x12>
 8005df4:	9901      	ldr	r1, [sp, #4]
 8005df6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005dfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005dfe:	4259      	negs	r1, r3
 8005e00:	4159      	adcs	r1, r3
 8005e02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e06:	e7eb      	b.n	8005de0 <__swhatbuf_r+0x24>

08005e08 <__smakebuf_r>:
 8005e08:	898b      	ldrh	r3, [r1, #12]
 8005e0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0c:	079d      	lsls	r5, r3, #30
 8005e0e:	4606      	mov	r6, r0
 8005e10:	460c      	mov	r4, r1
 8005e12:	d507      	bpl.n	8005e24 <__smakebuf_r+0x1c>
 8005e14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	6163      	str	r3, [r4, #20]
 8005e20:	b003      	add	sp, #12
 8005e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e24:	ab01      	add	r3, sp, #4
 8005e26:	466a      	mov	r2, sp
 8005e28:	f7ff ffc8 	bl	8005dbc <__swhatbuf_r>
 8005e2c:	9f00      	ldr	r7, [sp, #0]
 8005e2e:	4605      	mov	r5, r0
 8005e30:	4639      	mov	r1, r7
 8005e32:	4630      	mov	r0, r6
 8005e34:	f7ff fa30 	bl	8005298 <_malloc_r>
 8005e38:	b948      	cbnz	r0, 8005e4e <__smakebuf_r+0x46>
 8005e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e3e:	059a      	lsls	r2, r3, #22
 8005e40:	d4ee      	bmi.n	8005e20 <__smakebuf_r+0x18>
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	f043 0302 	orr.w	r3, r3, #2
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	e7e2      	b.n	8005e14 <__smakebuf_r+0xc>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	6020      	str	r0, [r4, #0]
 8005e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e5e:	b15b      	cbz	r3, 8005e78 <__smakebuf_r+0x70>
 8005e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 f82d 	bl	8005ec4 <_isatty_r>
 8005e6a:	b128      	cbz	r0, 8005e78 <__smakebuf_r+0x70>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	f043 0301 	orr.w	r3, r3, #1
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	431d      	orrs	r5, r3
 8005e7c:	81a5      	strh	r5, [r4, #12]
 8005e7e:	e7cf      	b.n	8005e20 <__smakebuf_r+0x18>

08005e80 <_close_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d06      	ldr	r5, [pc, #24]	@ (8005e9c <_close_r+0x1c>)
 8005e84:	2300      	movs	r3, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	f7fb fb31 	bl	80014f2 <_close>
 8005e90:	1c43      	adds	r3, r0, #1
 8005e92:	d102      	bne.n	8005e9a <_close_r+0x1a>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	b103      	cbz	r3, 8005e9a <_close_r+0x1a>
 8005e98:	6023      	str	r3, [r4, #0]
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	200003c8 	.word	0x200003c8

08005ea0 <_fstat_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d07      	ldr	r5, [pc, #28]	@ (8005ec0 <_fstat_r+0x20>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f7fb fb2c 	bl	800150a <_fstat>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d102      	bne.n	8005ebc <_fstat_r+0x1c>
 8005eb6:	682b      	ldr	r3, [r5, #0]
 8005eb8:	b103      	cbz	r3, 8005ebc <_fstat_r+0x1c>
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	bd38      	pop	{r3, r4, r5, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200003c8 	.word	0x200003c8

08005ec4 <_isatty_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d06      	ldr	r5, [pc, #24]	@ (8005ee0 <_isatty_r+0x1c>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fb fb2b 	bl	800152a <_isatty>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_isatty_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_isatty_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200003c8 	.word	0x200003c8

08005ee4 <_lseek_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d07      	ldr	r5, [pc, #28]	@ (8005f04 <_lseek_r+0x20>)
 8005ee8:	4604      	mov	r4, r0
 8005eea:	4608      	mov	r0, r1
 8005eec:	4611      	mov	r1, r2
 8005eee:	2200      	movs	r2, #0
 8005ef0:	602a      	str	r2, [r5, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f7fb fb24 	bl	8001540 <_lseek>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d102      	bne.n	8005f02 <_lseek_r+0x1e>
 8005efc:	682b      	ldr	r3, [r5, #0]
 8005efe:	b103      	cbz	r3, 8005f02 <_lseek_r+0x1e>
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	bd38      	pop	{r3, r4, r5, pc}
 8005f04:	200003c8 	.word	0x200003c8

08005f08 <_read_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4d07      	ldr	r5, [pc, #28]	@ (8005f28 <_read_r+0x20>)
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	4608      	mov	r0, r1
 8005f10:	4611      	mov	r1, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	602a      	str	r2, [r5, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f7fb fab2 	bl	8001480 <_read>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	d102      	bne.n	8005f26 <_read_r+0x1e>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	b103      	cbz	r3, 8005f26 <_read_r+0x1e>
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	bd38      	pop	{r3, r4, r5, pc}
 8005f28:	200003c8 	.word	0x200003c8

08005f2c <_sbrk_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d06      	ldr	r5, [pc, #24]	@ (8005f48 <_sbrk_r+0x1c>)
 8005f30:	2300      	movs	r3, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fb fb10 	bl	800155c <_sbrk>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_sbrk_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_sbrk_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	200003c8 	.word	0x200003c8

08005f4c <_write_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d07      	ldr	r5, [pc, #28]	@ (8005f6c <_write_r+0x20>)
 8005f50:	4604      	mov	r4, r0
 8005f52:	4608      	mov	r0, r1
 8005f54:	4611      	mov	r1, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fb faad 	bl	80014ba <_write>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_write_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_write_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	200003c8 	.word	0x200003c8

08005f70 <memcpy>:
 8005f70:	440a      	add	r2, r1
 8005f72:	4291      	cmp	r1, r2
 8005f74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005f78:	d100      	bne.n	8005f7c <memcpy+0xc>
 8005f7a:	4770      	bx	lr
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f86:	4291      	cmp	r1, r2
 8005f88:	d1f9      	bne.n	8005f7e <memcpy+0xe>
 8005f8a:	bd10      	pop	{r4, pc}

08005f8c <__assert_func>:
 8005f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f8e:	4614      	mov	r4, r2
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <__assert_func+0x2c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4605      	mov	r5, r0
 8005f98:	68d8      	ldr	r0, [r3, #12]
 8005f9a:	b954      	cbnz	r4, 8005fb2 <__assert_func+0x26>
 8005f9c:	4b07      	ldr	r3, [pc, #28]	@ (8005fbc <__assert_func+0x30>)
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fa4:	9100      	str	r1, [sp, #0]
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	4905      	ldr	r1, [pc, #20]	@ (8005fc0 <__assert_func+0x34>)
 8005faa:	f000 f87d 	bl	80060a8 <fiprintf>
 8005fae:	f000 f89a 	bl	80060e6 <abort>
 8005fb2:	4b04      	ldr	r3, [pc, #16]	@ (8005fc4 <__assert_func+0x38>)
 8005fb4:	e7f4      	b.n	8005fa0 <__assert_func+0x14>
 8005fb6:	bf00      	nop
 8005fb8:	20000018 	.word	0x20000018
 8005fbc:	0800654e 	.word	0x0800654e
 8005fc0:	08006520 	.word	0x08006520
 8005fc4:	08006513 	.word	0x08006513

08005fc8 <_calloc_r>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	fba1 5402 	umull	r5, r4, r1, r2
 8005fce:	b93c      	cbnz	r4, 8005fe0 <_calloc_r+0x18>
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	f7ff f961 	bl	8005298 <_malloc_r>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	b928      	cbnz	r0, 8005fe6 <_calloc_r+0x1e>
 8005fda:	2600      	movs	r6, #0
 8005fdc:	4630      	mov	r0, r6
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	220c      	movs	r2, #12
 8005fe2:	6002      	str	r2, [r0, #0]
 8005fe4:	e7f9      	b.n	8005fda <_calloc_r+0x12>
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	4621      	mov	r1, r4
 8005fea:	f7fe f963 	bl	80042b4 <memset>
 8005fee:	e7f5      	b.n	8005fdc <_calloc_r+0x14>

08005ff0 <_free_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	d041      	beq.n	800607c <_free_r+0x8c>
 8005ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ffc:	1f0c      	subs	r4, r1, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	bfb8      	it	lt
 8006002:	18e4      	addlt	r4, r4, r3
 8006004:	f7ff fa74 	bl	80054f0 <__malloc_lock>
 8006008:	4a1d      	ldr	r2, [pc, #116]	@ (8006080 <_free_r+0x90>)
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	b933      	cbnz	r3, 800601c <_free_r+0x2c>
 800600e:	6063      	str	r3, [r4, #4]
 8006010:	6014      	str	r4, [r2, #0]
 8006012:	4628      	mov	r0, r5
 8006014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006018:	f7ff ba70 	b.w	80054fc <__malloc_unlock>
 800601c:	42a3      	cmp	r3, r4
 800601e:	d908      	bls.n	8006032 <_free_r+0x42>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	1821      	adds	r1, r4, r0
 8006024:	428b      	cmp	r3, r1
 8006026:	bf01      	itttt	eq
 8006028:	6819      	ldreq	r1, [r3, #0]
 800602a:	685b      	ldreq	r3, [r3, #4]
 800602c:	1809      	addeq	r1, r1, r0
 800602e:	6021      	streq	r1, [r4, #0]
 8006030:	e7ed      	b.n	800600e <_free_r+0x1e>
 8006032:	461a      	mov	r2, r3
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	b10b      	cbz	r3, 800603c <_free_r+0x4c>
 8006038:	42a3      	cmp	r3, r4
 800603a:	d9fa      	bls.n	8006032 <_free_r+0x42>
 800603c:	6811      	ldr	r1, [r2, #0]
 800603e:	1850      	adds	r0, r2, r1
 8006040:	42a0      	cmp	r0, r4
 8006042:	d10b      	bne.n	800605c <_free_r+0x6c>
 8006044:	6820      	ldr	r0, [r4, #0]
 8006046:	4401      	add	r1, r0
 8006048:	1850      	adds	r0, r2, r1
 800604a:	4283      	cmp	r3, r0
 800604c:	6011      	str	r1, [r2, #0]
 800604e:	d1e0      	bne.n	8006012 <_free_r+0x22>
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	6053      	str	r3, [r2, #4]
 8006056:	4408      	add	r0, r1
 8006058:	6010      	str	r0, [r2, #0]
 800605a:	e7da      	b.n	8006012 <_free_r+0x22>
 800605c:	d902      	bls.n	8006064 <_free_r+0x74>
 800605e:	230c      	movs	r3, #12
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	e7d6      	b.n	8006012 <_free_r+0x22>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	1821      	adds	r1, r4, r0
 8006068:	428b      	cmp	r3, r1
 800606a:	bf04      	itt	eq
 800606c:	6819      	ldreq	r1, [r3, #0]
 800606e:	685b      	ldreq	r3, [r3, #4]
 8006070:	6063      	str	r3, [r4, #4]
 8006072:	bf04      	itt	eq
 8006074:	1809      	addeq	r1, r1, r0
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	6054      	str	r4, [r2, #4]
 800607a:	e7ca      	b.n	8006012 <_free_r+0x22>
 800607c:	bd38      	pop	{r3, r4, r5, pc}
 800607e:	bf00      	nop
 8006080:	200003c4 	.word	0x200003c4

08006084 <__ascii_mbtowc>:
 8006084:	b082      	sub	sp, #8
 8006086:	b901      	cbnz	r1, 800608a <__ascii_mbtowc+0x6>
 8006088:	a901      	add	r1, sp, #4
 800608a:	b142      	cbz	r2, 800609e <__ascii_mbtowc+0x1a>
 800608c:	b14b      	cbz	r3, 80060a2 <__ascii_mbtowc+0x1e>
 800608e:	7813      	ldrb	r3, [r2, #0]
 8006090:	600b      	str	r3, [r1, #0]
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	1e10      	subs	r0, r2, #0
 8006096:	bf18      	it	ne
 8006098:	2001      	movne	r0, #1
 800609a:	b002      	add	sp, #8
 800609c:	4770      	bx	lr
 800609e:	4610      	mov	r0, r2
 80060a0:	e7fb      	b.n	800609a <__ascii_mbtowc+0x16>
 80060a2:	f06f 0001 	mvn.w	r0, #1
 80060a6:	e7f8      	b.n	800609a <__ascii_mbtowc+0x16>

080060a8 <fiprintf>:
 80060a8:	b40e      	push	{r1, r2, r3}
 80060aa:	b503      	push	{r0, r1, lr}
 80060ac:	4601      	mov	r1, r0
 80060ae:	ab03      	add	r3, sp, #12
 80060b0:	4805      	ldr	r0, [pc, #20]	@ (80060c8 <fiprintf+0x20>)
 80060b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060b6:	6800      	ldr	r0, [r0, #0]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	f7fe ffab 	bl	8005014 <_vfiprintf_r>
 80060be:	b002      	add	sp, #8
 80060c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c4:	b003      	add	sp, #12
 80060c6:	4770      	bx	lr
 80060c8:	20000018 	.word	0x20000018

080060cc <__ascii_wctomb>:
 80060cc:	4603      	mov	r3, r0
 80060ce:	4608      	mov	r0, r1
 80060d0:	b141      	cbz	r1, 80060e4 <__ascii_wctomb+0x18>
 80060d2:	2aff      	cmp	r2, #255	@ 0xff
 80060d4:	d904      	bls.n	80060e0 <__ascii_wctomb+0x14>
 80060d6:	228a      	movs	r2, #138	@ 0x8a
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060de:	4770      	bx	lr
 80060e0:	700a      	strb	r2, [r1, #0]
 80060e2:	2001      	movs	r0, #1
 80060e4:	4770      	bx	lr

080060e6 <abort>:
 80060e6:	b508      	push	{r3, lr}
 80060e8:	2006      	movs	r0, #6
 80060ea:	f000 f82b 	bl	8006144 <raise>
 80060ee:	2001      	movs	r0, #1
 80060f0:	f7fb f9bb 	bl	800146a <_exit>

080060f4 <_raise_r>:
 80060f4:	291f      	cmp	r1, #31
 80060f6:	b538      	push	{r3, r4, r5, lr}
 80060f8:	4605      	mov	r5, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	d904      	bls.n	8006108 <_raise_r+0x14>
 80060fe:	2316      	movs	r3, #22
 8006100:	6003      	str	r3, [r0, #0]
 8006102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800610a:	b112      	cbz	r2, 8006112 <_raise_r+0x1e>
 800610c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006110:	b94b      	cbnz	r3, 8006126 <_raise_r+0x32>
 8006112:	4628      	mov	r0, r5
 8006114:	f000 f830 	bl	8006178 <_getpid_r>
 8006118:	4622      	mov	r2, r4
 800611a:	4601      	mov	r1, r0
 800611c:	4628      	mov	r0, r5
 800611e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006122:	f000 b817 	b.w	8006154 <_kill_r>
 8006126:	2b01      	cmp	r3, #1
 8006128:	d00a      	beq.n	8006140 <_raise_r+0x4c>
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	d103      	bne.n	8006136 <_raise_r+0x42>
 800612e:	2316      	movs	r3, #22
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	2001      	movs	r0, #1
 8006134:	e7e7      	b.n	8006106 <_raise_r+0x12>
 8006136:	2100      	movs	r1, #0
 8006138:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800613c:	4620      	mov	r0, r4
 800613e:	4798      	blx	r3
 8006140:	2000      	movs	r0, #0
 8006142:	e7e0      	b.n	8006106 <_raise_r+0x12>

08006144 <raise>:
 8006144:	4b02      	ldr	r3, [pc, #8]	@ (8006150 <raise+0xc>)
 8006146:	4601      	mov	r1, r0
 8006148:	6818      	ldr	r0, [r3, #0]
 800614a:	f7ff bfd3 	b.w	80060f4 <_raise_r>
 800614e:	bf00      	nop
 8006150:	20000018 	.word	0x20000018

08006154 <_kill_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	@ (8006174 <_kill_r+0x20>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	f7fb f972 	bl	800144a <_kill>
 8006166:	1c43      	adds	r3, r0, #1
 8006168:	d102      	bne.n	8006170 <_kill_r+0x1c>
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	b103      	cbz	r3, 8006170 <_kill_r+0x1c>
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	bd38      	pop	{r3, r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	200003c8 	.word	0x200003c8

08006178 <_getpid_r>:
 8006178:	f7fb b95f 	b.w	800143a <_getpid>

0800617c <_init>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr

08006188 <_fini>:
 8006188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618a:	bf00      	nop
 800618c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618e:	bc08      	pop	{r3}
 8006190:	469e      	mov	lr, r3
 8006192:	4770      	bx	lr
