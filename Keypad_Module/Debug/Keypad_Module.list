
Keypad_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003000  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003190  08003190  00004190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080031f4  080031f4  000041f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031fc  080031fc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003200  08003200  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003204  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000170  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004189  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001103  00000000  00000000  00009221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  0000a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000344  00000000  00000000  0000a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6fd  00000000  00000000  0000ab04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005dfb  00000000  00000000  00025201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009799c  00000000  00000000  0002affc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c2998  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017b0  00000000  00000000  000c29dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000c418c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003178 	.word	0x08003178

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003178 	.word	0x08003178

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <read_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char read_keypad (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //Pull the (GPIOA, GPIO_PIN_7)low
 8000274:	2200      	movs	r2, #0
 8000276:	2180      	movs	r1, #128	@ 0x80
 8000278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027c:	f000 fe28 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 8000280:	2201      	movs	r2, #1
 8000282:	2140      	movs	r1, #64	@ 0x40
 8000284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000288:	f000 fe22 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 800028c:	2201      	movs	r2, #1
 800028e:	2120      	movs	r1, #32
 8000290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000294:	f000 fe1c 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000298:	2201      	movs	r2, #1
 800029a:	2110      	movs	r1, #16
 800029c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a0:	f000 fe16 	bl	8000ed0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)))  // if the Col 1 is low
 80002a4:	2108      	movs	r1, #8
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002aa:	f000 fdf9 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d10a      	bne.n	80002ca <read_keypad+0x5a>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 80002b4:	bf00      	nop
 80002b6:	2108      	movs	r1, #8
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f000 fdf0 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f7      	beq.n	80002b6 <read_keypad+0x46>
		return '1';
 80002c6:	2331      	movs	r3, #49	@ 0x31
 80002c8:	e165      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 80002ca:	2104      	movs	r1, #4
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d0:	f000 fde6 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d10a      	bne.n	80002f0 <read_keypad+0x80>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 80002da:	bf00      	nop
 80002dc:	2108      	movs	r1, #8
 80002de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e2:	f000 fddd 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d0f7      	beq.n	80002dc <read_keypad+0x6c>
		return '2';
 80002ec:	2332      	movs	r3, #50	@ 0x32
 80002ee:	e152      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 80002f0:	2102      	movs	r1, #2
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f6:	f000 fdd3 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d10a      	bne.n	8000316 <read_keypad+0xa6>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000300:	bf00      	nop
 8000302:	2102      	movs	r1, #2
 8000304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000308:	f000 fdca 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f7      	beq.n	8000302 <read_keypad+0x92>
		return '3';
 8000312:	2333      	movs	r3, #51	@ 0x33
 8000314:	e13f      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 8000316:	2101      	movs	r1, #1
 8000318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031c:	f000 fdc0 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d10a      	bne.n	800033c <read_keypad+0xcc>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)));   // wait till the button is pressed
 8000326:	bf00      	nop
 8000328:	2101      	movs	r1, #1
 800032a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032e:	f000 fdb7 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0f7      	beq.n	8000328 <read_keypad+0xb8>
		return 'A';
 8000338:	2341      	movs	r3, #65	@ 0x41
 800033a:	e12c      	b.n	8000596 <read_keypad+0x326>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 800033c:	2201      	movs	r2, #1
 800033e:	2180      	movs	r1, #128	@ 0x80
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fdc4 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);  // Pull the PA6 High
 8000348:	2200      	movs	r2, #0
 800034a:	2140      	movs	r1, #64	@ 0x40
 800034c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000350:	f000 fdbe 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 8000354:	2201      	movs	r2, #1
 8000356:	2120      	movs	r1, #32
 8000358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800035c:	f000 fdb8 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000360:	2201      	movs	r2, #1
 8000362:	2110      	movs	r1, #16
 8000364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000368:	f000 fdb2 	bl	8000ed0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 800036c:	2108      	movs	r1, #8
 800036e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000372:	f000 fd95 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10a      	bne.n	8000392 <read_keypad+0x122>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 800037c:	bf00      	nop
 800037e:	2108      	movs	r1, #8
 8000380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000384:	f000 fd8c 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f7      	beq.n	800037e <read_keypad+0x10e>
		return '4';
 800038e:	2334      	movs	r3, #52	@ 0x34
 8000390:	e101      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000392:	2104      	movs	r1, #4
 8000394:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000398:	f000 fd82 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d10a      	bne.n	80003b8 <read_keypad+0x148>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 80003a2:	bf00      	nop
 80003a4:	2104      	movs	r1, #4
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f000 fd79 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f7      	beq.n	80003a4 <read_keypad+0x134>
		return '5';
 80003b4:	2335      	movs	r3, #53	@ 0x35
 80003b6:	e0ee      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 80003b8:	2102      	movs	r1, #2
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003be:	f000 fd6f 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d10a      	bne.n	80003de <read_keypad+0x16e>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 80003c8:	bf00      	nop
 80003ca:	2102      	movs	r1, #2
 80003cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d0:	f000 fd66 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f7      	beq.n	80003ca <read_keypad+0x15a>
		return '6';
 80003da:	2336      	movs	r3, #54	@ 0x36
 80003dc:	e0db      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 80003de:	2101      	movs	r1, #1
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e4:	f000 fd5c 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d10a      	bne.n	8000404 <read_keypad+0x194>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 80003ee:	bf00      	nop
 80003f0:	2108      	movs	r1, #8
 80003f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003f6:	f000 fd53 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f7      	beq.n	80003f0 <read_keypad+0x180>
		return 'B';
 8000400:	2342      	movs	r3, #66	@ 0x42
 8000402:	e0c8      	b.n	8000596 <read_keypad+0x326>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 8000404:	2201      	movs	r2, #1
 8000406:	2180      	movs	r1, #128	@ 0x80
 8000408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040c:	f000 fd60 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 8000410:	2201      	movs	r2, #1
 8000412:	2140      	movs	r1, #64	@ 0x40
 8000414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000418:	f000 fd5a 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  // Pull the PA5 High
 800041c:	2200      	movs	r2, #0
 800041e:	2120      	movs	r1, #32
 8000420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000424:	f000 fd54 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull the PA4 High
 8000428:	2201      	movs	r2, #1
 800042a:	2110      	movs	r1, #16
 800042c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000430:	f000 fd4e 	bl	8000ed0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 8000434:	2108      	movs	r1, #8
 8000436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043a:	f000 fd31 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d10a      	bne.n	800045a <read_keypad+0x1ea>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 8000444:	bf00      	nop
 8000446:	2108      	movs	r1, #8
 8000448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044c:	f000 fd28 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f7      	beq.n	8000446 <read_keypad+0x1d6>
		return '7';
 8000456:	2337      	movs	r3, #55	@ 0x37
 8000458:	e09d      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 800045a:	2104      	movs	r1, #4
 800045c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000460:	f000 fd1e 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d10a      	bne.n	8000480 <read_keypad+0x210>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 800046a:	bf00      	nop
 800046c:	2104      	movs	r1, #4
 800046e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000472:	f000 fd15 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f7      	beq.n	800046c <read_keypad+0x1fc>
		return '8';
 800047c:	2338      	movs	r3, #56	@ 0x38
 800047e:	e08a      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000480:	2102      	movs	r1, #2
 8000482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000486:	f000 fd0b 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10a      	bne.n	80004a6 <read_keypad+0x236>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000490:	bf00      	nop
 8000492:	2102      	movs	r1, #2
 8000494:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000498:	f000 fd02 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f7      	beq.n	8000492 <read_keypad+0x222>
		return '9';
 80004a2:	2339      	movs	r3, #57	@ 0x39
 80004a4:	e077      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 80004a6:	2101      	movs	r1, #1
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ac:	f000 fcf8 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d10a      	bne.n	80004cc <read_keypad+0x25c>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)));   // wait till the button is pressed
 80004b6:	bf00      	nop
 80004b8:	2101      	movs	r1, #1
 80004ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004be:	f000 fcef 	bl	8000ea0 <HAL_GPIO_ReadPin>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f7      	beq.n	80004b8 <read_keypad+0x248>
		return 'C';
 80004c8:	2343      	movs	r3, #67	@ 0x43
 80004ca:	e064      	b.n	8000596 <read_keypad+0x326>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  //Pull the (GPIOA, GPIO_PIN_7)low
 80004cc:	2201      	movs	r2, #1
 80004ce:	2180      	movs	r1, #128	@ 0x80
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d4:	f000 fcfc 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Pull the PA6 High
 80004d8:	2201      	movs	r2, #1
 80004da:	2140      	movs	r1, #64	@ 0x40
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e0:	f000 fcf6 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, GPIO_PIN_SET);  // Pull the PA5 High
 80004e4:	2201      	movs	r2, #1
 80004e6:	2120      	movs	r1, #32
 80004e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ec:	f000 fcf0 	bl	8000ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Pull the PA4 High
 80004f0:	2200      	movs	r2, #0
 80004f2:	2110      	movs	r1, #16
 80004f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f8:	f000 fcea 	bl	8000ed0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)))   // if the Col 1 is low
 80004fc:	2108      	movs	r1, #8
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000502:	f000 fccd 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d10a      	bne.n	8000522 <read_keypad+0x2b2>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 800050c:	bf00      	nop
 800050e:	2108      	movs	r1, #8
 8000510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000514:	f000 fcc4 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0f7      	beq.n	800050e <read_keypad+0x29e>
		return '*';
 800051e:	232a      	movs	r3, #42	@ 0x2a
 8000520:	e039      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)))   // if the Col 2 is low
 8000522:	2104      	movs	r1, #4
 8000524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000528:	f000 fcba 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d10a      	bne.n	8000548 <read_keypad+0x2d8>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2)));   // wait till the button is pressed
 8000532:	bf00      	nop
 8000534:	2104      	movs	r1, #4
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f000 fcb1 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f7      	beq.n	8000534 <read_keypad+0x2c4>
		return '0';
 8000544:	2330      	movs	r3, #48	@ 0x30
 8000546:	e026      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)))   // if the Col 3 is low
 8000548:	2102      	movs	r1, #2
 800054a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054e:	f000 fca7 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d10a      	bne.n	800056e <read_keypad+0x2fe>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1)));   // wait till the button is pressed
 8000558:	bf00      	nop
 800055a:	2102      	movs	r1, #2
 800055c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000560:	f000 fc9e 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d0f7      	beq.n	800055a <read_keypad+0x2ea>
		return '#';
 800056a:	2323      	movs	r3, #35	@ 0x23
 800056c:	e013      	b.n	8000596 <read_keypad+0x326>
	}

	if (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_0)))   // if the Col 4 is low
 800056e:	2101      	movs	r1, #1
 8000570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000574:	f000 fc94 	bl	8000ea0 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d10a      	bne.n	8000594 <read_keypad+0x324>
	{
		while (!(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_3)));   // wait till the button is pressed
 800057e:	bf00      	nop
 8000580:	2108      	movs	r1, #8
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fc8b 	bl	8000ea0 <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f7      	beq.n	8000580 <read_keypad+0x310>
		return 'D';
 8000590:	2344      	movs	r3, #68	@ 0x44
 8000592:	e000      	b.n	8000596 <read_keypad+0x326>
	}

	return 0x01;  // /if nothing is pressed
 8000594:	2301      	movs	r3, #1

}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}

0800059a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	char key = read_keypad();
 80005a0:	f7ff fe66 	bl	8000270 <read_keypad>
 80005a4:	4603      	mov	r3, r0
 80005a6:	71fb      	strb	r3, [r7, #7]
	if (key!=0x01)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d003      	beq.n	80005b6 <main+0x1c>
		  {
			printf(key);
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 ff75 	bl	80024a0 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 f9b5 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f804 	bl	80005c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f83d 	bl	800063c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x28>

080005c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b090      	sub	sp, #64	@ 0x40
 80005ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	2228      	movs	r2, #40	@ 0x28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff75 	bl	80024c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fc7f 	bl	8000f00 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000608:	f000 f854 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fca9 	bl	8001f7c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000630:	f000 f840 	bl	80006b4 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3740      	adds	r7, #64	@ 0x40
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_GPIO_Init+0x74>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a16      	ldr	r2, [pc, #88]	@ (80006b0 <MX_GPIO_Init+0x74>)
 8000656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065a:	6153      	str	r3, [r2, #20]
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_GPIO_Init+0x74>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	21f0      	movs	r1, #240	@ 0xf0
 800066c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000670:	f000 fc2e 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000674:	230f      	movs	r3, #15
 8000676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067c:	2301      	movs	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f000 fa98 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 (GPIOA, GPIO_PIN_7)*/
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800068c:	23f0      	movs	r3, #240	@ 0xf0
 800068e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a4:	f000 fa8a 	bl	8000bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x44>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <HAL_MspInit+0x44>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x44>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x44>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_MspInit+0x44>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <NMI_Handler+0x4>

08000710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <MemManage_Handler+0x4>

08000720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <UsageFault_Handler+0x4>

08000730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075e:	f000 f927 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e00a      	b.n	800078e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000778:	f3af 8000 	nop.w
 800077c:	4601      	mov	r1, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1c5a      	adds	r2, r3, #1
 8000782:	60ba      	str	r2, [r7, #8]
 8000784:	b2ca      	uxtb	r2, r1
 8000786:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	429a      	cmp	r2, r3
 8000794:	dbf0      	blt.n	8000778 <_read+0x12>
  }

  return len;
 8000796:	687b      	ldr	r3, [r7, #4]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e009      	b.n	80007c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	60ba      	str	r2, [r7, #8]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	3301      	adds	r3, #1
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	dbf1      	blt.n	80007b2 <_write+0x12>
  }
  return len;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_close>:

int _close(int file)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000800:	605a      	str	r2, [r3, #4]
  return 0;
 8000802:	2300      	movs	r3, #0
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <_isatty>:

int _isatty(int file)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000818:	2301      	movs	r3, #1
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000826:	b480      	push	{r7}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000848:	4a14      	ldr	r2, [pc, #80]	@ (800089c <_sbrk+0x5c>)
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <_sbrk+0x60>)
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000854:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <_sbrk+0x64>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <_sbrk+0x68>)
 8000860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	429a      	cmp	r2, r3
 800086e:	d207      	bcs.n	8000880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000870:	f001 fe30 	bl	80024d4 <__errno>
 8000874:	4603      	mov	r3, r0
 8000876:	220c      	movs	r2, #12
 8000878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800087e:	e009      	b.n	8000894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <_sbrk+0x64>)
 8000890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000892:	68fb      	ldr	r3, [r7, #12]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20003000 	.word	0x20003000
 80008a0:	00000400 	.word	0x00000400
 80008a4:	20000084 	.word	0x20000084
 80008a8:	200001d8 	.word	0x200001d8

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	@ (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000908 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff ffea 	bl	80008ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	@ (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f001 fdef 	bl	80024e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000902:	f7ff fe4a 	bl	800059a <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000908:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000914:	08003204 	.word	0x08003204
  ldr r2, =_sbss
 8000918:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800091c:	200001d8 	.word	0x200001d8

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	@ (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f90d 	bl	8000b54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	200f      	movs	r0, #15
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff febe 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f917 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800098c:	f000 f8ed 	bl	8000b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	@ (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	@ (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000088 	.word	0x20000088

080009d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;  
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000088 	.word	0x20000088

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	@ 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	@ 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b20:	d301      	bcc.n	8000b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00f      	b.n	8000b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <SysTick_Config+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2e:	210f      	movs	r1, #15
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b34:	f7ff ff8e 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SysTick_Config+0x40>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3e:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <SysTick_Config+0x40>)
 8000b40:	2207      	movs	r2, #7
 8000b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	e000e010 	.word	0xe000e010

08000b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff47 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b086      	sub	sp, #24
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7c:	f7ff ff5c 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68b9      	ldr	r1, [r7, #8]
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff ff8e 	bl	8000aa8 <NVIC_EncodePriority>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffb0 	bl	8000b10 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e14e      	b.n	8000e6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8140 	beq.w	8000e64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 0201 	and.w	r2, r3, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	6939      	ldr	r1, [r7, #16]
 8000cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0203 	and.w	r2, r3, #3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 809a 	beq.w	8000e64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b55      	ldr	r3, [pc, #340]	@ (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a54      	ldr	r2, [pc, #336]	@ (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b52      	ldr	r3, [pc, #328]	@ (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a50      	ldr	r2, [pc, #320]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x1e0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a46      	ldr	r2, [pc, #280]	@ (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1dc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a45      	ldr	r2, [pc, #276]	@ (8000e94 <HAL_GPIO_Init+0x2d8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1d8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a44      	ldr	r2, [pc, #272]	@ (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1d4>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e006      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e004      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e002      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	f002 0203 	and.w	r2, r2, #3
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	4093      	lsls	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dae:	4937      	ldr	r1, [pc, #220]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de0:	4a2e      	ldr	r2, [pc, #184]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e0a:	4a24      	ldr	r2, [pc, #144]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e10:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e34:	4a19      	ldr	r2, [pc, #100]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f47f aea9 	bne.w	8000bcc <HAL_GPIO_Init+0x10>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e001      	b.n	8000ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eec:	e002      	b.n	8000ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f001 b823 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 817d 	beq.w	8001236 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f3c:	4bbc      	ldr	r3, [pc, #752]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00c      	beq.n	8000f62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f48:	4bb9      	ldr	r3, [pc, #740]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d15c      	bne.n	800100e <HAL_RCC_OscConfig+0x10e>
 8000f54:	4bb6      	ldr	r3, [pc, #728]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f60:	d155      	bne.n	800100e <HAL_RCC_OscConfig+0x10e>
 8000f62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f66:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d102      	bne.n	8000f94 <HAL_RCC_OscConfig+0x94>
 8000f8e:	4ba8      	ldr	r3, [pc, #672]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	e015      	b.n	8000fc0 <HAL_RCC_OscConfig+0xc0>
 8000f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f98:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000fa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fac:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000fb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000fb4:	fa93 f3a3 	rbit	r3, r3
 8000fb8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000fbc:	4b9c      	ldr	r3, [pc, #624]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fc4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000fc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000fd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000fd8:	fab2 f282 	clz	r2, r2
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f042 0220 	orr.w	r2, r2, #32
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	f002 021f 	and.w	r2, r2, #31
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 811f 	beq.w	8001234 <HAL_RCC_OscConfig+0x334>
 8000ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ffa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 8116 	bne.w	8001234 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	f000 bfaf 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001012:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800101e:	d106      	bne.n	800102e <HAL_RCC_OscConfig+0x12e>
 8001020:	4b83      	ldr	r3, [pc, #524]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a82      	ldr	r2, [pc, #520]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001026:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	e036      	b.n	800109c <HAL_RCC_OscConfig+0x19c>
 800102e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001032:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x158>
 800103e:	4b7c      	ldr	r3, [pc, #496]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a7b      	ldr	r2, [pc, #492]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b79      	ldr	r3, [pc, #484]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a78      	ldr	r2, [pc, #480]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e021      	b.n	800109c <HAL_RCC_OscConfig+0x19c>
 8001058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800105c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x184>
 800106a:	4b71      	ldr	r3, [pc, #452]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a70      	ldr	r2, [pc, #448]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b6e      	ldr	r3, [pc, #440]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a6d      	ldr	r2, [pc, #436]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 800107c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0x19c>
 8001084:	4b6a      	ldr	r3, [pc, #424]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a69      	ldr	r2, [pc, #420]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 800108a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b67      	ldr	r3, [pc, #412]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a66      	ldr	r2, [pc, #408]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800109a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800109c:	4b64      	ldr	r3, [pc, #400]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 800109e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a0:	f023 020f 	bic.w	r2, r3, #15
 80010a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	495f      	ldr	r1, [pc, #380]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d059      	beq.n	800117a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc87 	bl	80009d8 <HAL_GetTick>
 80010ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	e00a      	b.n	80010e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fc82 	bl	80009d8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b64      	cmp	r3, #100	@ 0x64
 80010de:	d902      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f000 bf43 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80010e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80010fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	095b      	lsrs	r3, r3, #5
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x218>
 8001112:	4b47      	ldr	r3, [pc, #284]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	e015      	b.n	8001144 <HAL_RCC_OscConfig+0x244>
 8001118:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800111c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800112c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001130:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001134:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001140:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001148:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800114c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001150:	fa92 f2a2 	rbit	r2, r2
 8001154:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001158:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f002 021f 	and.w	r2, r2, #31
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0ab      	beq.n	80010d0 <HAL_RCC_OscConfig+0x1d0>
 8001178:	e05d      	b.n	8001236 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc2d 	bl	80009d8 <HAL_GetTick>
 800117e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	e00a      	b.n	800119a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fc28 	bl	80009d8 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	@ 0x64
 8001192:	d902      	bls.n	800119a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	f000 bee9 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 800119a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800119e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80011ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	095b      	lsrs	r3, r3, #5
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <HAL_RCC_OscConfig+0x2cc>
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	e015      	b.n	80011f8 <HAL_RCC_OscConfig+0x2f8>
 80011cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011d0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80011d8:	fa93 f3a3 	rbit	r3, r3
 80011dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80011e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011e4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80011e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_RCC_OscConfig+0x330>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011fc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001200:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001204:	fa92 f2a2 	rbit	r2, r2
 8001208:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800120c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001210:	fab2 f282 	clz	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f042 0220 	orr.w	r2, r2, #32
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f002 021f 	and.w	r2, r2, #31
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ab      	bne.n	8001184 <HAL_RCC_OscConfig+0x284>
 800122c:	e003      	b.n	8001236 <HAL_RCC_OscConfig+0x336>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 817d 	beq.w	8001546 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800124c:	4ba6      	ldr	r3, [pc, #664]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 030c 	and.w	r3, r3, #12
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001258:	4ba3      	ldr	r3, [pc, #652]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d172      	bne.n	800134a <HAL_RCC_OscConfig+0x44a>
 8001264:	4ba0      	ldr	r3, [pc, #640]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d16c      	bne.n	800134a <HAL_RCC_OscConfig+0x44a>
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001282:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	fab3 f383 	clz	r3, r3
 800128a:	b2db      	uxtb	r3, r3
 800128c:	095b      	lsrs	r3, r3, #5
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d102      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3a0>
 800129a:	4b93      	ldr	r3, [pc, #588]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	e013      	b.n	80012c8 <HAL_RCC_OscConfig+0x3c8>
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80012b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80012c4:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c8:	2202      	movs	r2, #2
 80012ca:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80012ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80012d2:	fa92 f2a2 	rbit	r2, r2
 80012d6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80012da:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80012de:	fab2 f282 	clz	r2, r2
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f042 0220 	orr.w	r2, r2, #32
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	f002 021f 	and.w	r2, r2, #31
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f202 	lsl.w	r2, r1, r2
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00a      	beq.n	8001310 <HAL_RCC_OscConfig+0x410>
 80012fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d002      	beq.n	8001310 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	f000 be2e 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b75      	ldr	r3, [pc, #468]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	21f8      	movs	r1, #248	@ 0xf8
 8001326:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800132e:	fa91 f1a1 	rbit	r1, r1
 8001332:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001336:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800133a:	fab1 f181 	clz	r1, r1
 800133e:	b2c9      	uxtb	r1, r1
 8001340:	408b      	lsls	r3, r1
 8001342:	4969      	ldr	r1, [pc, #420]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001348:	e0fd      	b.n	8001546 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800134e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8088 	beq.w	800146c <HAL_RCC_OscConfig+0x56c>
 800135c:	2301      	movs	r3, #1
 800135e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800136e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800137c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	461a      	mov	r2, r3
 8001384:	2301      	movs	r3, #1
 8001386:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fb26 	bl	80009d8 <HAL_GetTick>
 800138c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fb21 	bl	80009d8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d902      	bls.n	80013a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f000 bde2 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80013ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	fab3 f383 	clz	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	095b      	lsrs	r3, r3, #5
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4d8>
 80013d2:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x500>
 80013d8:	2302      	movs	r3, #2
 80013da:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80013f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80013fc:	4b3a      	ldr	r3, [pc, #232]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	2202      	movs	r2, #2
 8001402:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001406:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800140a:	fa92 f2a2 	rbit	r2, r2
 800140e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001412:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001416:	fab2 f282 	clz	r2, r2
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f042 0220 	orr.w	r2, r2, #32
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	f002 021f 	and.w	r2, r2, #31
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0af      	beq.n	8001392 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	21f8      	movs	r1, #248	@ 0xf8
 8001448:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001450:	fa91 f1a1 	rbit	r1, r1
 8001454:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001458:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800145c:	fab1 f181 	clz	r1, r1
 8001460:	b2c9      	uxtb	r1, r1
 8001462:	408b      	lsls	r3, r1
 8001464:	4920      	ldr	r1, [pc, #128]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
 800146a:	e06c      	b.n	8001546 <HAL_RCC_OscConfig+0x646>
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800147e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	fab3 f383 	clz	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800148c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	461a      	mov	r2, r3
 8001494:	2300      	movs	r3, #0
 8001496:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fa9e 	bl	80009d8 <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a2:	f7ff fa99 	bl	80009d8 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d902      	bls.n	80014b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f000 bd5a 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80014ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	fab3 f383 	clz	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	095b      	lsrs	r3, r3, #5
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d104      	bne.n	80014ec <HAL_RCC_OscConfig+0x5ec>
 80014e2:	4b01      	ldr	r3, [pc, #4]	@ (80014e8 <HAL_RCC_OscConfig+0x5e8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	e015      	b.n	8001514 <HAL_RCC_OscConfig+0x614>
 80014e8:	40021000 	.word	0x40021000
 80014ec:	2302      	movs	r3, #2
 80014ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001504:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001510:	4bc8      	ldr	r3, [pc, #800]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	2202      	movs	r2, #2
 8001516:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800151a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001526:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ad      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 8110 	beq.w	800177c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001560:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d079      	beq.n	8001660 <HAL_RCC_OscConfig+0x760>
 800156c:	2301      	movs	r3, #1
 800156e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001576:	fa93 f3a3 	rbit	r3, r3
 800157a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800157e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4bab      	ldr	r3, [pc, #684]	@ (8001838 <HAL_RCC_OscConfig+0x938>)
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	461a      	mov	r2, r3
 8001592:	2301      	movs	r3, #1
 8001594:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff fa1f 	bl	80009d8 <HAL_GetTick>
 800159a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fa1a 	bl	80009d8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d902      	bls.n	80015b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f000 bcdb 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800160e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001610:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 8001612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001618:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800161c:	2102      	movs	r1, #2
 800161e:	6019      	str	r1, [r3, #0]
 8001620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001624:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f1a3 	rbit	r1, r3
 800162e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001632:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001636:	6019      	str	r1, [r3, #0]
  return result;
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0a0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x6a0>
 800165e:	e08d      	b.n	800177c <HAL_RCC_OscConfig+0x87c>
 8001660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001664:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001670:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fa93 f2a3 	rbit	r2, r3
 800167a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001682:	601a      	str	r2, [r3, #0]
  return result;
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800168c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	4b68      	ldr	r3, [pc, #416]	@ (8001838 <HAL_RCC_OscConfig+0x938>)
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	461a      	mov	r2, r3
 800169e:	2300      	movs	r3, #0
 80016a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff f999 	bl	80009d8 <HAL_GetTick>
 80016a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff f994 	bl	80009d8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d902      	bls.n	80016c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	f000 bc55 	b.w	8001f6c <HAL_RCC_OscConfig+0x106c>
 80016c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016ca:	2202      	movs	r2, #2
 80016cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	fa93 f2a3 	rbit	r2, r3
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	fa93 f2a3 	rbit	r2, r3
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800172c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 8001730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800173a:	2102      	movs	r1, #2
 800173c:	6019      	str	r1, [r3, #0]
 800173e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001742:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f1a3 	rbit	r1, r3
 800174c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001750:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001754:	6019      	str	r1, [r3, #0]
  return result;
 8001756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	2101      	movs	r1, #1
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d197      	bne.n	80016ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001780:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 81a1 	beq.w	8001ad4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d116      	bne.n	80017d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	4a22      	ldr	r2, [pc, #136]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 80017aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	61d3      	str	r3, [r2, #28]
 80017b0:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80017ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_RCC_OscConfig+0x93c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d11a      	bne.n	8001814 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017de:	4b17      	ldr	r3, [pc, #92]	@ (800183c <HAL_RCC_OscConfig+0x93c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a16      	ldr	r2, [pc, #88]	@ (800183c <HAL_RCC_OscConfig+0x93c>)
 80017e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ea:	f7ff f8f5 	bl	80009d8 <HAL_GetTick>
 80017ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	e009      	b.n	8001808 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f4:	f7ff f8f0 	bl	80009d8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	@ 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e3b1      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_RCC_OscConfig+0x93c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0ef      	beq.n	80017f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_OscConfig+0x940>
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a02      	ldr	r2, [pc, #8]	@ (8001834 <HAL_RCC_OscConfig+0x934>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	e03c      	b.n	80018ac <HAL_RCC_OscConfig+0x9ac>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	10908120 	.word	0x10908120
 800183c:	40007000 	.word	0x40007000
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x96a>
 8001850:	4bc1      	ldr	r3, [pc, #772]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4ac0      	ldr	r2, [pc, #768]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	4bbe      	ldr	r3, [pc, #760]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	4abd      	ldr	r2, [pc, #756]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001862:	f023 0304 	bic.w	r3, r3, #4
 8001866:	6213      	str	r3, [r2, #32]
 8001868:	e020      	b.n	80018ac <HAL_RCC_OscConfig+0x9ac>
 800186a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0x994>
 800187a:	4bb7      	ldr	r3, [pc, #732]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4ab6      	ldr	r2, [pc, #728]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	4bb4      	ldr	r3, [pc, #720]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4ab3      	ldr	r2, [pc, #716]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x9ac>
 8001894:	4bb0      	ldr	r3, [pc, #704]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4aaf      	ldr	r2, [pc, #700]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6213      	str	r3, [r2, #32]
 80018a0:	4bad      	ldr	r3, [pc, #692]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4aac      	ldr	r2, [pc, #688]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 80018a6:	f023 0304 	bic.w	r3, r3, #4
 80018aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8081 	beq.w	80019c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018be:	f7ff f88b 	bl	80009d8 <HAL_GetTick>
 80018c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c6:	e00b      	b.n	80018e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c8:	f7ff f886 	bl	80009d8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e345      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 80018e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001908:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800190c:	2202      	movs	r2, #2
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001914:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001922:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001926:	601a      	str	r2, [r3, #0]
  return result;
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001930:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	095b      	lsrs	r3, r3, #5
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d102      	bne.n	800194c <HAL_RCC_OscConfig+0xa4c>
 8001946:	4b84      	ldr	r3, [pc, #528]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	e013      	b.n	8001974 <HAL_RCC_OscConfig+0xa74>
 800194c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001950:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001954:	2202      	movs	r2, #2
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	fa93 f2a3 	rbit	r2, r3
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	4b79      	ldr	r3, [pc, #484]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001978:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800197c:	2102      	movs	r1, #2
 800197e:	6011      	str	r1, [r2, #0]
 8001980:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001984:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	fa92 f1a2 	rbit	r1, r2
 800198e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001992:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001996:	6011      	str	r1, [r2, #0]
  return result;
 8001998:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800199c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d084      	beq.n	80018c8 <HAL_RCC_OscConfig+0x9c8>
 80019be:	e07f      	b.n	8001ac0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f80a 	bl	80009d8 <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f805 	bl	80009d8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e2c4      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80019ea:	2202      	movs	r2, #2
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a0e:	2202      	movs	r2, #2
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a16:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a28:	601a      	str	r2, [r3, #0]
  return result;
 8001a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f043 0302 	orr.w	r3, r3, #2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d102      	bne.n	8001a4e <HAL_RCC_OscConfig+0xb4e>
 8001a48:	4b43      	ldr	r3, [pc, #268]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	e013      	b.n	8001a76 <HAL_RCC_OscConfig+0xb76>
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a56:	2202      	movs	r2, #2
 8001a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a7a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6011      	str	r1, [r2, #0]
 8001a82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a86:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	fa92 f1a2 	rbit	r1, r2
 8001a90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a94:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001a98:	6011      	str	r1, [r2, #0]
  return result;
 8001a9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a9e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	fab2 f282 	clz	r2, r2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f002 021f 	and.w	r2, r2, #31
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d184      	bne.n	80019ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ac0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	4a22      	ldr	r2, [pc, #136]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8242 	beq.w	8001f6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <HAL_RCC_OscConfig+0xc58>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	f000 8213 	beq.w	8001f1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 8162 	bne.w	8001dca <HAL_RCC_OscConfig+0xeca>
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b18:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fa93 f2a3 	rbit	r2, r3
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b2a:	601a      	str	r2, [r3, #0]
  return result;
 8001b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b30:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ff44 	bl	80009d8 <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	e00c      	b.n	8001b70 <HAL_RCC_OscConfig+0xc70>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7fe ff3c 	bl	80009d8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1fd      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b94:	601a      	str	r2, [r3, #0]
  return result;
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001b9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0xcba>
 8001bb4:	4bb0      	ldr	r3, [pc, #704]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_OscConfig+0xd0a>
 8001bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bda:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4b9c      	ldr	r3, [pc, #624]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c0e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c12:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c16:	6011      	str	r1, [r2, #0]
 8001c18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c1c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	fa92 f1a2 	rbit	r1, r2
 8001c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c2a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c2e:	6011      	str	r1, [r2, #0]
  return result;
 8001c30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c34:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f042 0220 	orr.w	r2, r2, #32
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f002 021f 	and.w	r2, r2, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d182      	bne.n	8001b5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b88      	ldr	r3, [pc, #544]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	497f      	ldr	r1, [pc, #508]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
 8001c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c82:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	fa93 f2a3 	rbit	r2, r3
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ca2:	601a      	str	r2, [r3, #0]
  return result;
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001cac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cb8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fe88 	bl	80009d8 <HAL_GetTick>
 8001cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	e009      	b.n	8001ce2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe fe83 	bl	80009d8 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e144      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001cea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d02:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d06:	601a      	str	r2, [r3, #0]
  return result;
 8001d08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0xe2c>
 8001d26:	4b54      	ldr	r3, [pc, #336]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e027      	b.n	8001d7c <HAL_RCC_OscConfig+0xe7c>
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f2a3 	rbit	r2, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d64:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	4b3f      	ldr	r3, [pc, #252]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d80:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001d84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d88:	6011      	str	r1, [r2, #0]
 8001d8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d8e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	fa92 f1a2 	rbit	r1, r2
 8001d98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d9c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001da0:	6011      	str	r1, [r2, #0]
  return result;
 8001da2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001da6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f002 021f 	and.w	r2, r2, #31
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d082      	beq.n	8001cce <HAL_RCC_OscConfig+0xdce>
 8001dc8:	e0cf      	b.n	8001f6a <HAL_RCC_OscConfig+0x106a>
 8001dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001dd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ddc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	fa93 f2a3 	rbit	r2, r3
 8001de6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001dee:	601a      	str	r2, [r3, #0]
  return result;
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001df8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fde2 	bl	80009d8 <HAL_GetTick>
 8001e14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe fddd 	bl	80009d8 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e09e      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d104      	bne.n	8001e7c <HAL_RCC_OscConfig+0xf7c>
 8001e72:	4b01      	ldr	r3, [pc, #4]	@ (8001e78 <HAL_RCC_OscConfig+0xf78>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e029      	b.n	8001ecc <HAL_RCC_OscConfig+0xfcc>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <HAL_RCC_OscConfig+0x1078>)
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ed0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ed4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ede:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	fa92 f1a2 	rbit	r1, r2
 8001ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ef0:	6011      	str	r1, [r2, #0]
  return result;
 8001ef2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ef6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	fab2 f282 	clz	r2, r2
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	f042 0220 	orr.w	r2, r2, #32
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f002 021f 	and.w	r2, r2, #31
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d180      	bne.n	8001e1a <HAL_RCC_OscConfig+0xf1a>
 8001f18:	e027      	b.n	8001f6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e01e      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_RCC_OscConfig+0x1078>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f3a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d10b      	bne.n	8001f66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b09e      	sub	sp, #120	@ 0x78
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e162      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b90      	ldr	r3, [pc, #576]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	498b      	ldr	r1, [pc, #556]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b89      	ldr	r3, [pc, #548]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e14a      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd0:	4b82      	ldr	r3, [pc, #520]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	497f      	ldr	r1, [pc, #508]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80dc 	beq.w	80021a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d13c      	bne.n	8002072 <HAL_RCC_ClockConfig+0xf6>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ffc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d102      	bne.n	8002022 <HAL_RCC_ClockConfig+0xa6>
 800201c:	4b6f      	ldr	r3, [pc, #444]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	e00f      	b.n	8002042 <HAL_RCC_ClockConfig+0xc6>
 8002022:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002026:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002030:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002034:	663b      	str	r3, [r7, #96]	@ 0x60
 8002036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800203e:	4b67      	ldr	r3, [pc, #412]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002042:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002046:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002048:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002052:	fab2 f282 	clz	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f042 0220 	orr.w	r2, r2, #32
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d17b      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0f3      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d13c      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x178>
 800207a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800207e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x128>
 800209e:	4b4f      	ldr	r3, [pc, #316]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_ClockConfig+0x148>
 80020a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80020b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020c0:	4b46      	ldr	r3, [pc, #280]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80020ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80020d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d13a      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b2      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80020f4:	2302      	movs	r3, #2
 80020f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_RCC_ClockConfig+0x1a0>
 8002116:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e00d      	b.n	8002138 <HAL_RCC_ClockConfig+0x1bc>
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	2202      	movs	r2, #2
 800213a:	61ba      	str	r2, [r7, #24]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	fa92 f2a2 	rbit	r2, r2
 8002142:	617a      	str	r2, [r7, #20]
  return result;
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e079      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	491a      	ldr	r1, [pc, #104]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002178:	f7fe fc2e 	bl	80009d8 <HAL_GetTick>
 800217c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fc2a 	bl	80009d8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e061      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d214      	bcs.n	80021e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0207 	bic.w	r2, r3, #7
 80021be:	4906      	ldr	r1, [pc, #24]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <HAL_RCC_ClockConfig+0x25c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e040      	b.n	800225a <HAL_RCC_ClockConfig+0x2de>
 80021d8:	40022000 	.word	0x40022000
 80021dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	491a      	ldr	r1, [pc, #104]	@ (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220a:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4912      	ldr	r1, [pc, #72]	@ (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800221e:	f000 f829 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002222:	4601      	mov	r1, r0
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_RCC_ClockConfig+0x2e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800222c:	22f0      	movs	r2, #240	@ 0xf0
 800222e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	60fa      	str	r2, [r7, #12]
  return result;
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	40d3      	lsrs	r3, r2
 8002242:	4a09      	ldr	r2, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x2ec>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	fa21 f303 	lsr.w	r3, r1, r3
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <HAL_RCC_ClockConfig+0x2f0>)
 800224c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800224e:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <HAL_RCC_ClockConfig+0x2f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fb7c 	bl	8000950 <HAL_InitTick>
  
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3778      	adds	r7, #120	@ 0x78
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	08003190 	.word	0x08003190
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e026      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e026      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022d0:	4a0e      	ldr	r2, [pc, #56]	@ (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e004      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	e002      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f4:	613b      	str	r3, [r7, #16]
      break;
 80022f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f8:	693b      	ldr	r3, [r7, #16]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	080031a0 	.word	0x080031a0
 8002314:	080031b0 	.word	0x080031b0
 8002318:	003d0900 	.word	0x003d0900

0800231c <std>:
 800231c:	2300      	movs	r3, #0
 800231e:	b510      	push	{r4, lr}
 8002320:	4604      	mov	r4, r0
 8002322:	e9c0 3300 	strd	r3, r3, [r0]
 8002326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800232a:	6083      	str	r3, [r0, #8]
 800232c:	8181      	strh	r1, [r0, #12]
 800232e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002330:	81c2      	strh	r2, [r0, #14]
 8002332:	6183      	str	r3, [r0, #24]
 8002334:	4619      	mov	r1, r3
 8002336:	2208      	movs	r2, #8
 8002338:	305c      	adds	r0, #92	@ 0x5c
 800233a:	f000 f8c3 	bl	80024c4 <memset>
 800233e:	4b0d      	ldr	r3, [pc, #52]	@ (8002374 <std+0x58>)
 8002340:	6263      	str	r3, [r4, #36]	@ 0x24
 8002342:	4b0d      	ldr	r3, [pc, #52]	@ (8002378 <std+0x5c>)
 8002344:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <std+0x60>)
 8002348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <std+0x64>)
 800234c:	6323      	str	r3, [r4, #48]	@ 0x30
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <std+0x68>)
 8002350:	6224      	str	r4, [r4, #32]
 8002352:	429c      	cmp	r4, r3
 8002354:	d006      	beq.n	8002364 <std+0x48>
 8002356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800235a:	4294      	cmp	r4, r2
 800235c:	d002      	beq.n	8002364 <std+0x48>
 800235e:	33d0      	adds	r3, #208	@ 0xd0
 8002360:	429c      	cmp	r4, r3
 8002362:	d105      	bne.n	8002370 <std+0x54>
 8002364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800236c:	f000 b8dc 	b.w	8002528 <__retarget_lock_init_recursive>
 8002370:	bd10      	pop	{r4, pc}
 8002372:	bf00      	nop
 8002374:	08002d81 	.word	0x08002d81
 8002378:	08002da3 	.word	0x08002da3
 800237c:	08002ddb 	.word	0x08002ddb
 8002380:	08002dff 	.word	0x08002dff
 8002384:	2000008c 	.word	0x2000008c

08002388 <stdio_exit_handler>:
 8002388:	4a02      	ldr	r2, [pc, #8]	@ (8002394 <stdio_exit_handler+0xc>)
 800238a:	4903      	ldr	r1, [pc, #12]	@ (8002398 <stdio_exit_handler+0x10>)
 800238c:	4803      	ldr	r0, [pc, #12]	@ (800239c <stdio_exit_handler+0x14>)
 800238e:	f000 b869 	b.w	8002464 <_fwalk_sglue>
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c
 8002398:	08002d19 	.word	0x08002d19
 800239c:	2000001c 	.word	0x2000001c

080023a0 <cleanup_stdio>:
 80023a0:	6841      	ldr	r1, [r0, #4]
 80023a2:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <cleanup_stdio+0x34>)
 80023a4:	4299      	cmp	r1, r3
 80023a6:	b510      	push	{r4, lr}
 80023a8:	4604      	mov	r4, r0
 80023aa:	d001      	beq.n	80023b0 <cleanup_stdio+0x10>
 80023ac:	f000 fcb4 	bl	8002d18 <_fflush_r>
 80023b0:	68a1      	ldr	r1, [r4, #8]
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <cleanup_stdio+0x38>)
 80023b4:	4299      	cmp	r1, r3
 80023b6:	d002      	beq.n	80023be <cleanup_stdio+0x1e>
 80023b8:	4620      	mov	r0, r4
 80023ba:	f000 fcad 	bl	8002d18 <_fflush_r>
 80023be:	68e1      	ldr	r1, [r4, #12]
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <cleanup_stdio+0x3c>)
 80023c2:	4299      	cmp	r1, r3
 80023c4:	d004      	beq.n	80023d0 <cleanup_stdio+0x30>
 80023c6:	4620      	mov	r0, r4
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023cc:	f000 bca4 	b.w	8002d18 <_fflush_r>
 80023d0:	bd10      	pop	{r4, pc}
 80023d2:	bf00      	nop
 80023d4:	2000008c 	.word	0x2000008c
 80023d8:	200000f4 	.word	0x200000f4
 80023dc:	2000015c 	.word	0x2000015c

080023e0 <global_stdio_init.part.0>:
 80023e0:	b510      	push	{r4, lr}
 80023e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002410 <global_stdio_init.part.0+0x30>)
 80023e4:	4c0b      	ldr	r4, [pc, #44]	@ (8002414 <global_stdio_init.part.0+0x34>)
 80023e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <global_stdio_init.part.0+0x38>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4620      	mov	r0, r4
 80023ec:	2200      	movs	r2, #0
 80023ee:	2104      	movs	r1, #4
 80023f0:	f7ff ff94 	bl	800231c <std>
 80023f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80023f8:	2201      	movs	r2, #1
 80023fa:	2109      	movs	r1, #9
 80023fc:	f7ff ff8e 	bl	800231c <std>
 8002400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002404:	2202      	movs	r2, #2
 8002406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800240a:	2112      	movs	r1, #18
 800240c:	f7ff bf86 	b.w	800231c <std>
 8002410:	200001c4 	.word	0x200001c4
 8002414:	2000008c 	.word	0x2000008c
 8002418:	08002389 	.word	0x08002389

0800241c <__sfp_lock_acquire>:
 800241c:	4801      	ldr	r0, [pc, #4]	@ (8002424 <__sfp_lock_acquire+0x8>)
 800241e:	f000 b884 	b.w	800252a <__retarget_lock_acquire_recursive>
 8002422:	bf00      	nop
 8002424:	200001c9 	.word	0x200001c9

08002428 <__sfp_lock_release>:
 8002428:	4801      	ldr	r0, [pc, #4]	@ (8002430 <__sfp_lock_release+0x8>)
 800242a:	f000 b87f 	b.w	800252c <__retarget_lock_release_recursive>
 800242e:	bf00      	nop
 8002430:	200001c9 	.word	0x200001c9

08002434 <__sinit>:
 8002434:	b510      	push	{r4, lr}
 8002436:	4604      	mov	r4, r0
 8002438:	f7ff fff0 	bl	800241c <__sfp_lock_acquire>
 800243c:	6a23      	ldr	r3, [r4, #32]
 800243e:	b11b      	cbz	r3, 8002448 <__sinit+0x14>
 8002440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002444:	f7ff bff0 	b.w	8002428 <__sfp_lock_release>
 8002448:	4b04      	ldr	r3, [pc, #16]	@ (800245c <__sinit+0x28>)
 800244a:	6223      	str	r3, [r4, #32]
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <__sinit+0x2c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f5      	bne.n	8002440 <__sinit+0xc>
 8002454:	f7ff ffc4 	bl	80023e0 <global_stdio_init.part.0>
 8002458:	e7f2      	b.n	8002440 <__sinit+0xc>
 800245a:	bf00      	nop
 800245c:	080023a1 	.word	0x080023a1
 8002460:	200001c4 	.word	0x200001c4

08002464 <_fwalk_sglue>:
 8002464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002468:	4607      	mov	r7, r0
 800246a:	4688      	mov	r8, r1
 800246c:	4614      	mov	r4, r2
 800246e:	2600      	movs	r6, #0
 8002470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002474:	f1b9 0901 	subs.w	r9, r9, #1
 8002478:	d505      	bpl.n	8002486 <_fwalk_sglue+0x22>
 800247a:	6824      	ldr	r4, [r4, #0]
 800247c:	2c00      	cmp	r4, #0
 800247e:	d1f7      	bne.n	8002470 <_fwalk_sglue+0xc>
 8002480:	4630      	mov	r0, r6
 8002482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002486:	89ab      	ldrh	r3, [r5, #12]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d907      	bls.n	800249c <_fwalk_sglue+0x38>
 800248c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002490:	3301      	adds	r3, #1
 8002492:	d003      	beq.n	800249c <_fwalk_sglue+0x38>
 8002494:	4629      	mov	r1, r5
 8002496:	4638      	mov	r0, r7
 8002498:	47c0      	blx	r8
 800249a:	4306      	orrs	r6, r0
 800249c:	3568      	adds	r5, #104	@ 0x68
 800249e:	e7e9      	b.n	8002474 <_fwalk_sglue+0x10>

080024a0 <iprintf>:
 80024a0:	b40f      	push	{r0, r1, r2, r3}
 80024a2:	b507      	push	{r0, r1, r2, lr}
 80024a4:	4906      	ldr	r1, [pc, #24]	@ (80024c0 <iprintf+0x20>)
 80024a6:	ab04      	add	r3, sp, #16
 80024a8:	6808      	ldr	r0, [r1, #0]
 80024aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80024ae:	6881      	ldr	r1, [r0, #8]
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	f000 f865 	bl	8002580 <_vfiprintf_r>
 80024b6:	b003      	add	sp, #12
 80024b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024bc:	b004      	add	sp, #16
 80024be:	4770      	bx	lr
 80024c0:	20000018 	.word	0x20000018

080024c4 <memset>:
 80024c4:	4402      	add	r2, r0
 80024c6:	4603      	mov	r3, r0
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d100      	bne.n	80024ce <memset+0xa>
 80024cc:	4770      	bx	lr
 80024ce:	f803 1b01 	strb.w	r1, [r3], #1
 80024d2:	e7f9      	b.n	80024c8 <memset+0x4>

080024d4 <__errno>:
 80024d4:	4b01      	ldr	r3, [pc, #4]	@ (80024dc <__errno+0x8>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000018 	.word	0x20000018

080024e0 <__libc_init_array>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002518 <__libc_init_array+0x38>)
 80024e4:	4c0d      	ldr	r4, [pc, #52]	@ (800251c <__libc_init_array+0x3c>)
 80024e6:	1b64      	subs	r4, r4, r5
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	2600      	movs	r6, #0
 80024ec:	42a6      	cmp	r6, r4
 80024ee:	d109      	bne.n	8002504 <__libc_init_array+0x24>
 80024f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002520 <__libc_init_array+0x40>)
 80024f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002524 <__libc_init_array+0x44>)
 80024f4:	f000 fe40 	bl	8003178 <_init>
 80024f8:	1b64      	subs	r4, r4, r5
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	2600      	movs	r6, #0
 80024fe:	42a6      	cmp	r6, r4
 8002500:	d105      	bne.n	800250e <__libc_init_array+0x2e>
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	f855 3b04 	ldr.w	r3, [r5], #4
 8002508:	4798      	blx	r3
 800250a:	3601      	adds	r6, #1
 800250c:	e7ee      	b.n	80024ec <__libc_init_array+0xc>
 800250e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002512:	4798      	blx	r3
 8002514:	3601      	adds	r6, #1
 8002516:	e7f2      	b.n	80024fe <__libc_init_array+0x1e>
 8002518:	080031fc 	.word	0x080031fc
 800251c:	080031fc 	.word	0x080031fc
 8002520:	080031fc 	.word	0x080031fc
 8002524:	08003200 	.word	0x08003200

08002528 <__retarget_lock_init_recursive>:
 8002528:	4770      	bx	lr

0800252a <__retarget_lock_acquire_recursive>:
 800252a:	4770      	bx	lr

0800252c <__retarget_lock_release_recursive>:
 800252c:	4770      	bx	lr

0800252e <__sfputc_r>:
 800252e:	6893      	ldr	r3, [r2, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	b410      	push	{r4}
 8002536:	6093      	str	r3, [r2, #8]
 8002538:	da08      	bge.n	800254c <__sfputc_r+0x1e>
 800253a:	6994      	ldr	r4, [r2, #24]
 800253c:	42a3      	cmp	r3, r4
 800253e:	db01      	blt.n	8002544 <__sfputc_r+0x16>
 8002540:	290a      	cmp	r1, #10
 8002542:	d103      	bne.n	800254c <__sfputc_r+0x1e>
 8002544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002548:	f000 bc5d 	b.w	8002e06 <__swbuf_r>
 800254c:	6813      	ldr	r3, [r2, #0]
 800254e:	1c58      	adds	r0, r3, #1
 8002550:	6010      	str	r0, [r2, #0]
 8002552:	7019      	strb	r1, [r3, #0]
 8002554:	4608      	mov	r0, r1
 8002556:	f85d 4b04 	ldr.w	r4, [sp], #4
 800255a:	4770      	bx	lr

0800255c <__sfputs_r>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	4606      	mov	r6, r0
 8002560:	460f      	mov	r7, r1
 8002562:	4614      	mov	r4, r2
 8002564:	18d5      	adds	r5, r2, r3
 8002566:	42ac      	cmp	r4, r5
 8002568:	d101      	bne.n	800256e <__sfputs_r+0x12>
 800256a:	2000      	movs	r0, #0
 800256c:	e007      	b.n	800257e <__sfputs_r+0x22>
 800256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002572:	463a      	mov	r2, r7
 8002574:	4630      	mov	r0, r6
 8002576:	f7ff ffda 	bl	800252e <__sfputc_r>
 800257a:	1c43      	adds	r3, r0, #1
 800257c:	d1f3      	bne.n	8002566 <__sfputs_r+0xa>
 800257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002580 <_vfiprintf_r>:
 8002580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002584:	460d      	mov	r5, r1
 8002586:	b09d      	sub	sp, #116	@ 0x74
 8002588:	4614      	mov	r4, r2
 800258a:	4698      	mov	r8, r3
 800258c:	4606      	mov	r6, r0
 800258e:	b118      	cbz	r0, 8002598 <_vfiprintf_r+0x18>
 8002590:	6a03      	ldr	r3, [r0, #32]
 8002592:	b90b      	cbnz	r3, 8002598 <_vfiprintf_r+0x18>
 8002594:	f7ff ff4e 	bl	8002434 <__sinit>
 8002598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800259a:	07d9      	lsls	r1, r3, #31
 800259c:	d405      	bmi.n	80025aa <_vfiprintf_r+0x2a>
 800259e:	89ab      	ldrh	r3, [r5, #12]
 80025a0:	059a      	lsls	r2, r3, #22
 80025a2:	d402      	bmi.n	80025aa <_vfiprintf_r+0x2a>
 80025a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80025a6:	f7ff ffc0 	bl	800252a <__retarget_lock_acquire_recursive>
 80025aa:	89ab      	ldrh	r3, [r5, #12]
 80025ac:	071b      	lsls	r3, r3, #28
 80025ae:	d501      	bpl.n	80025b4 <_vfiprintf_r+0x34>
 80025b0:	692b      	ldr	r3, [r5, #16]
 80025b2:	b99b      	cbnz	r3, 80025dc <_vfiprintf_r+0x5c>
 80025b4:	4629      	mov	r1, r5
 80025b6:	4630      	mov	r0, r6
 80025b8:	f000 fc64 	bl	8002e84 <__swsetup_r>
 80025bc:	b170      	cbz	r0, 80025dc <_vfiprintf_r+0x5c>
 80025be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80025c0:	07dc      	lsls	r4, r3, #31
 80025c2:	d504      	bpl.n	80025ce <_vfiprintf_r+0x4e>
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025c8:	b01d      	add	sp, #116	@ 0x74
 80025ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ce:	89ab      	ldrh	r3, [r5, #12]
 80025d0:	0598      	lsls	r0, r3, #22
 80025d2:	d4f7      	bmi.n	80025c4 <_vfiprintf_r+0x44>
 80025d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80025d6:	f7ff ffa9 	bl	800252c <__retarget_lock_release_recursive>
 80025da:	e7f3      	b.n	80025c4 <_vfiprintf_r+0x44>
 80025dc:	2300      	movs	r3, #0
 80025de:	9309      	str	r3, [sp, #36]	@ 0x24
 80025e0:	2320      	movs	r3, #32
 80025e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80025e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80025ea:	2330      	movs	r3, #48	@ 0x30
 80025ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800279c <_vfiprintf_r+0x21c>
 80025f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025f4:	f04f 0901 	mov.w	r9, #1
 80025f8:	4623      	mov	r3, r4
 80025fa:	469a      	mov	sl, r3
 80025fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002600:	b10a      	cbz	r2, 8002606 <_vfiprintf_r+0x86>
 8002602:	2a25      	cmp	r2, #37	@ 0x25
 8002604:	d1f9      	bne.n	80025fa <_vfiprintf_r+0x7a>
 8002606:	ebba 0b04 	subs.w	fp, sl, r4
 800260a:	d00b      	beq.n	8002624 <_vfiprintf_r+0xa4>
 800260c:	465b      	mov	r3, fp
 800260e:	4622      	mov	r2, r4
 8002610:	4629      	mov	r1, r5
 8002612:	4630      	mov	r0, r6
 8002614:	f7ff ffa2 	bl	800255c <__sfputs_r>
 8002618:	3001      	adds	r0, #1
 800261a:	f000 80a7 	beq.w	800276c <_vfiprintf_r+0x1ec>
 800261e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002620:	445a      	add	r2, fp
 8002622:	9209      	str	r2, [sp, #36]	@ 0x24
 8002624:	f89a 3000 	ldrb.w	r3, [sl]
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 809f 	beq.w	800276c <_vfiprintf_r+0x1ec>
 800262e:	2300      	movs	r3, #0
 8002630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002638:	f10a 0a01 	add.w	sl, sl, #1
 800263c:	9304      	str	r3, [sp, #16]
 800263e:	9307      	str	r3, [sp, #28]
 8002640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002644:	931a      	str	r3, [sp, #104]	@ 0x68
 8002646:	4654      	mov	r4, sl
 8002648:	2205      	movs	r2, #5
 800264a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800264e:	4853      	ldr	r0, [pc, #332]	@ (800279c <_vfiprintf_r+0x21c>)
 8002650:	f7fd fdbe 	bl	80001d0 <memchr>
 8002654:	9a04      	ldr	r2, [sp, #16]
 8002656:	b9d8      	cbnz	r0, 8002690 <_vfiprintf_r+0x110>
 8002658:	06d1      	lsls	r1, r2, #27
 800265a:	bf44      	itt	mi
 800265c:	2320      	movmi	r3, #32
 800265e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002662:	0713      	lsls	r3, r2, #28
 8002664:	bf44      	itt	mi
 8002666:	232b      	movmi	r3, #43	@ 0x2b
 8002668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800266c:	f89a 3000 	ldrb.w	r3, [sl]
 8002670:	2b2a      	cmp	r3, #42	@ 0x2a
 8002672:	d015      	beq.n	80026a0 <_vfiprintf_r+0x120>
 8002674:	9a07      	ldr	r2, [sp, #28]
 8002676:	4654      	mov	r4, sl
 8002678:	2000      	movs	r0, #0
 800267a:	f04f 0c0a 	mov.w	ip, #10
 800267e:	4621      	mov	r1, r4
 8002680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002684:	3b30      	subs	r3, #48	@ 0x30
 8002686:	2b09      	cmp	r3, #9
 8002688:	d94b      	bls.n	8002722 <_vfiprintf_r+0x1a2>
 800268a:	b1b0      	cbz	r0, 80026ba <_vfiprintf_r+0x13a>
 800268c:	9207      	str	r2, [sp, #28]
 800268e:	e014      	b.n	80026ba <_vfiprintf_r+0x13a>
 8002690:	eba0 0308 	sub.w	r3, r0, r8
 8002694:	fa09 f303 	lsl.w	r3, r9, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	9304      	str	r3, [sp, #16]
 800269c:	46a2      	mov	sl, r4
 800269e:	e7d2      	b.n	8002646 <_vfiprintf_r+0xc6>
 80026a0:	9b03      	ldr	r3, [sp, #12]
 80026a2:	1d19      	adds	r1, r3, #4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	9103      	str	r1, [sp, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bfbb      	ittet	lt
 80026ac:	425b      	neglt	r3, r3
 80026ae:	f042 0202 	orrlt.w	r2, r2, #2
 80026b2:	9307      	strge	r3, [sp, #28]
 80026b4:	9307      	strlt	r3, [sp, #28]
 80026b6:	bfb8      	it	lt
 80026b8:	9204      	strlt	r2, [sp, #16]
 80026ba:	7823      	ldrb	r3, [r4, #0]
 80026bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80026be:	d10a      	bne.n	80026d6 <_vfiprintf_r+0x156>
 80026c0:	7863      	ldrb	r3, [r4, #1]
 80026c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80026c4:	d132      	bne.n	800272c <_vfiprintf_r+0x1ac>
 80026c6:	9b03      	ldr	r3, [sp, #12]
 80026c8:	1d1a      	adds	r2, r3, #4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	9203      	str	r2, [sp, #12]
 80026ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80026d2:	3402      	adds	r4, #2
 80026d4:	9305      	str	r3, [sp, #20]
 80026d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80027ac <_vfiprintf_r+0x22c>
 80026da:	7821      	ldrb	r1, [r4, #0]
 80026dc:	2203      	movs	r2, #3
 80026de:	4650      	mov	r0, sl
 80026e0:	f7fd fd76 	bl	80001d0 <memchr>
 80026e4:	b138      	cbz	r0, 80026f6 <_vfiprintf_r+0x176>
 80026e6:	9b04      	ldr	r3, [sp, #16]
 80026e8:	eba0 000a 	sub.w	r0, r0, sl
 80026ec:	2240      	movs	r2, #64	@ 0x40
 80026ee:	4082      	lsls	r2, r0
 80026f0:	4313      	orrs	r3, r2
 80026f2:	3401      	adds	r4, #1
 80026f4:	9304      	str	r3, [sp, #16]
 80026f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026fa:	4829      	ldr	r0, [pc, #164]	@ (80027a0 <_vfiprintf_r+0x220>)
 80026fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002700:	2206      	movs	r2, #6
 8002702:	f7fd fd65 	bl	80001d0 <memchr>
 8002706:	2800      	cmp	r0, #0
 8002708:	d03f      	beq.n	800278a <_vfiprintf_r+0x20a>
 800270a:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <_vfiprintf_r+0x224>)
 800270c:	bb1b      	cbnz	r3, 8002756 <_vfiprintf_r+0x1d6>
 800270e:	9b03      	ldr	r3, [sp, #12]
 8002710:	3307      	adds	r3, #7
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	3308      	adds	r3, #8
 8002718:	9303      	str	r3, [sp, #12]
 800271a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800271c:	443b      	add	r3, r7
 800271e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002720:	e76a      	b.n	80025f8 <_vfiprintf_r+0x78>
 8002722:	fb0c 3202 	mla	r2, ip, r2, r3
 8002726:	460c      	mov	r4, r1
 8002728:	2001      	movs	r0, #1
 800272a:	e7a8      	b.n	800267e <_vfiprintf_r+0xfe>
 800272c:	2300      	movs	r3, #0
 800272e:	3401      	adds	r4, #1
 8002730:	9305      	str	r3, [sp, #20]
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 0c0a 	mov.w	ip, #10
 8002738:	4620      	mov	r0, r4
 800273a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800273e:	3a30      	subs	r2, #48	@ 0x30
 8002740:	2a09      	cmp	r2, #9
 8002742:	d903      	bls.n	800274c <_vfiprintf_r+0x1cc>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0c6      	beq.n	80026d6 <_vfiprintf_r+0x156>
 8002748:	9105      	str	r1, [sp, #20]
 800274a:	e7c4      	b.n	80026d6 <_vfiprintf_r+0x156>
 800274c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002750:	4604      	mov	r4, r0
 8002752:	2301      	movs	r3, #1
 8002754:	e7f0      	b.n	8002738 <_vfiprintf_r+0x1b8>
 8002756:	ab03      	add	r3, sp, #12
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	462a      	mov	r2, r5
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <_vfiprintf_r+0x228>)
 800275e:	a904      	add	r1, sp, #16
 8002760:	4630      	mov	r0, r6
 8002762:	f3af 8000 	nop.w
 8002766:	4607      	mov	r7, r0
 8002768:	1c78      	adds	r0, r7, #1
 800276a:	d1d6      	bne.n	800271a <_vfiprintf_r+0x19a>
 800276c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800276e:	07d9      	lsls	r1, r3, #31
 8002770:	d405      	bmi.n	800277e <_vfiprintf_r+0x1fe>
 8002772:	89ab      	ldrh	r3, [r5, #12]
 8002774:	059a      	lsls	r2, r3, #22
 8002776:	d402      	bmi.n	800277e <_vfiprintf_r+0x1fe>
 8002778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800277a:	f7ff fed7 	bl	800252c <__retarget_lock_release_recursive>
 800277e:	89ab      	ldrh	r3, [r5, #12]
 8002780:	065b      	lsls	r3, r3, #25
 8002782:	f53f af1f 	bmi.w	80025c4 <_vfiprintf_r+0x44>
 8002786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002788:	e71e      	b.n	80025c8 <_vfiprintf_r+0x48>
 800278a:	ab03      	add	r3, sp, #12
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	462a      	mov	r2, r5
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <_vfiprintf_r+0x228>)
 8002792:	a904      	add	r1, sp, #16
 8002794:	4630      	mov	r0, r6
 8002796:	f000 f91b 	bl	80029d0 <_printf_i>
 800279a:	e7e4      	b.n	8002766 <_vfiprintf_r+0x1e6>
 800279c:	080031c0 	.word	0x080031c0
 80027a0:	080031ca 	.word	0x080031ca
 80027a4:	00000000 	.word	0x00000000
 80027a8:	0800255d 	.word	0x0800255d
 80027ac:	080031c6 	.word	0x080031c6

080027b0 <sbrk_aligned>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	4e0f      	ldr	r6, [pc, #60]	@ (80027f0 <sbrk_aligned+0x40>)
 80027b4:	460c      	mov	r4, r1
 80027b6:	6831      	ldr	r1, [r6, #0]
 80027b8:	4605      	mov	r5, r0
 80027ba:	b911      	cbnz	r1, 80027c2 <sbrk_aligned+0x12>
 80027bc:	f000 fc70 	bl	80030a0 <_sbrk_r>
 80027c0:	6030      	str	r0, [r6, #0]
 80027c2:	4621      	mov	r1, r4
 80027c4:	4628      	mov	r0, r5
 80027c6:	f000 fc6b 	bl	80030a0 <_sbrk_r>
 80027ca:	1c43      	adds	r3, r0, #1
 80027cc:	d103      	bne.n	80027d6 <sbrk_aligned+0x26>
 80027ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80027d2:	4620      	mov	r0, r4
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
 80027d6:	1cc4      	adds	r4, r0, #3
 80027d8:	f024 0403 	bic.w	r4, r4, #3
 80027dc:	42a0      	cmp	r0, r4
 80027de:	d0f8      	beq.n	80027d2 <sbrk_aligned+0x22>
 80027e0:	1a21      	subs	r1, r4, r0
 80027e2:	4628      	mov	r0, r5
 80027e4:	f000 fc5c 	bl	80030a0 <_sbrk_r>
 80027e8:	3001      	adds	r0, #1
 80027ea:	d1f2      	bne.n	80027d2 <sbrk_aligned+0x22>
 80027ec:	e7ef      	b.n	80027ce <sbrk_aligned+0x1e>
 80027ee:	bf00      	nop
 80027f0:	200001cc 	.word	0x200001cc

080027f4 <_malloc_r>:
 80027f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027f8:	1ccd      	adds	r5, r1, #3
 80027fa:	f025 0503 	bic.w	r5, r5, #3
 80027fe:	3508      	adds	r5, #8
 8002800:	2d0c      	cmp	r5, #12
 8002802:	bf38      	it	cc
 8002804:	250c      	movcc	r5, #12
 8002806:	2d00      	cmp	r5, #0
 8002808:	4606      	mov	r6, r0
 800280a:	db01      	blt.n	8002810 <_malloc_r+0x1c>
 800280c:	42a9      	cmp	r1, r5
 800280e:	d904      	bls.n	800281a <_malloc_r+0x26>
 8002810:	230c      	movs	r3, #12
 8002812:	6033      	str	r3, [r6, #0]
 8002814:	2000      	movs	r0, #0
 8002816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800281a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028f0 <_malloc_r+0xfc>
 800281e:	f000 faa3 	bl	8002d68 <__malloc_lock>
 8002822:	f8d8 3000 	ldr.w	r3, [r8]
 8002826:	461c      	mov	r4, r3
 8002828:	bb44      	cbnz	r4, 800287c <_malloc_r+0x88>
 800282a:	4629      	mov	r1, r5
 800282c:	4630      	mov	r0, r6
 800282e:	f7ff ffbf 	bl	80027b0 <sbrk_aligned>
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	4604      	mov	r4, r0
 8002836:	d158      	bne.n	80028ea <_malloc_r+0xf6>
 8002838:	f8d8 4000 	ldr.w	r4, [r8]
 800283c:	4627      	mov	r7, r4
 800283e:	2f00      	cmp	r7, #0
 8002840:	d143      	bne.n	80028ca <_malloc_r+0xd6>
 8002842:	2c00      	cmp	r4, #0
 8002844:	d04b      	beq.n	80028de <_malloc_r+0xea>
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	4639      	mov	r1, r7
 800284a:	4630      	mov	r0, r6
 800284c:	eb04 0903 	add.w	r9, r4, r3
 8002850:	f000 fc26 	bl	80030a0 <_sbrk_r>
 8002854:	4581      	cmp	r9, r0
 8002856:	d142      	bne.n	80028de <_malloc_r+0xea>
 8002858:	6821      	ldr	r1, [r4, #0]
 800285a:	1a6d      	subs	r5, r5, r1
 800285c:	4629      	mov	r1, r5
 800285e:	4630      	mov	r0, r6
 8002860:	f7ff ffa6 	bl	80027b0 <sbrk_aligned>
 8002864:	3001      	adds	r0, #1
 8002866:	d03a      	beq.n	80028de <_malloc_r+0xea>
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	442b      	add	r3, r5
 800286c:	6023      	str	r3, [r4, #0]
 800286e:	f8d8 3000 	ldr.w	r3, [r8]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	bb62      	cbnz	r2, 80028d0 <_malloc_r+0xdc>
 8002876:	f8c8 7000 	str.w	r7, [r8]
 800287a:	e00f      	b.n	800289c <_malloc_r+0xa8>
 800287c:	6822      	ldr	r2, [r4, #0]
 800287e:	1b52      	subs	r2, r2, r5
 8002880:	d420      	bmi.n	80028c4 <_malloc_r+0xd0>
 8002882:	2a0b      	cmp	r2, #11
 8002884:	d917      	bls.n	80028b6 <_malloc_r+0xc2>
 8002886:	1961      	adds	r1, r4, r5
 8002888:	42a3      	cmp	r3, r4
 800288a:	6025      	str	r5, [r4, #0]
 800288c:	bf18      	it	ne
 800288e:	6059      	strne	r1, [r3, #4]
 8002890:	6863      	ldr	r3, [r4, #4]
 8002892:	bf08      	it	eq
 8002894:	f8c8 1000 	streq.w	r1, [r8]
 8002898:	5162      	str	r2, [r4, r5]
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	4630      	mov	r0, r6
 800289e:	f000 fa69 	bl	8002d74 <__malloc_unlock>
 80028a2:	f104 000b 	add.w	r0, r4, #11
 80028a6:	1d23      	adds	r3, r4, #4
 80028a8:	f020 0007 	bic.w	r0, r0, #7
 80028ac:	1ac2      	subs	r2, r0, r3
 80028ae:	bf1c      	itt	ne
 80028b0:	1a1b      	subne	r3, r3, r0
 80028b2:	50a3      	strne	r3, [r4, r2]
 80028b4:	e7af      	b.n	8002816 <_malloc_r+0x22>
 80028b6:	6862      	ldr	r2, [r4, #4]
 80028b8:	42a3      	cmp	r3, r4
 80028ba:	bf0c      	ite	eq
 80028bc:	f8c8 2000 	streq.w	r2, [r8]
 80028c0:	605a      	strne	r2, [r3, #4]
 80028c2:	e7eb      	b.n	800289c <_malloc_r+0xa8>
 80028c4:	4623      	mov	r3, r4
 80028c6:	6864      	ldr	r4, [r4, #4]
 80028c8:	e7ae      	b.n	8002828 <_malloc_r+0x34>
 80028ca:	463c      	mov	r4, r7
 80028cc:	687f      	ldr	r7, [r7, #4]
 80028ce:	e7b6      	b.n	800283e <_malloc_r+0x4a>
 80028d0:	461a      	mov	r2, r3
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	42a3      	cmp	r3, r4
 80028d6:	d1fb      	bne.n	80028d0 <_malloc_r+0xdc>
 80028d8:	2300      	movs	r3, #0
 80028da:	6053      	str	r3, [r2, #4]
 80028dc:	e7de      	b.n	800289c <_malloc_r+0xa8>
 80028de:	230c      	movs	r3, #12
 80028e0:	6033      	str	r3, [r6, #0]
 80028e2:	4630      	mov	r0, r6
 80028e4:	f000 fa46 	bl	8002d74 <__malloc_unlock>
 80028e8:	e794      	b.n	8002814 <_malloc_r+0x20>
 80028ea:	6005      	str	r5, [r0, #0]
 80028ec:	e7d6      	b.n	800289c <_malloc_r+0xa8>
 80028ee:	bf00      	nop
 80028f0:	200001d0 	.word	0x200001d0

080028f4 <_printf_common>:
 80028f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f8:	4616      	mov	r6, r2
 80028fa:	4698      	mov	r8, r3
 80028fc:	688a      	ldr	r2, [r1, #8]
 80028fe:	690b      	ldr	r3, [r1, #16]
 8002900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002904:	4293      	cmp	r3, r2
 8002906:	bfb8      	it	lt
 8002908:	4613      	movlt	r3, r2
 800290a:	6033      	str	r3, [r6, #0]
 800290c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002910:	4607      	mov	r7, r0
 8002912:	460c      	mov	r4, r1
 8002914:	b10a      	cbz	r2, 800291a <_printf_common+0x26>
 8002916:	3301      	adds	r3, #1
 8002918:	6033      	str	r3, [r6, #0]
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	0699      	lsls	r1, r3, #26
 800291e:	bf42      	ittt	mi
 8002920:	6833      	ldrmi	r3, [r6, #0]
 8002922:	3302      	addmi	r3, #2
 8002924:	6033      	strmi	r3, [r6, #0]
 8002926:	6825      	ldr	r5, [r4, #0]
 8002928:	f015 0506 	ands.w	r5, r5, #6
 800292c:	d106      	bne.n	800293c <_printf_common+0x48>
 800292e:	f104 0a19 	add.w	sl, r4, #25
 8002932:	68e3      	ldr	r3, [r4, #12]
 8002934:	6832      	ldr	r2, [r6, #0]
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	42ab      	cmp	r3, r5
 800293a:	dc26      	bgt.n	800298a <_printf_common+0x96>
 800293c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002940:	6822      	ldr	r2, [r4, #0]
 8002942:	3b00      	subs	r3, #0
 8002944:	bf18      	it	ne
 8002946:	2301      	movne	r3, #1
 8002948:	0692      	lsls	r2, r2, #26
 800294a:	d42b      	bmi.n	80029a4 <_printf_common+0xb0>
 800294c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002950:	4641      	mov	r1, r8
 8002952:	4638      	mov	r0, r7
 8002954:	47c8      	blx	r9
 8002956:	3001      	adds	r0, #1
 8002958:	d01e      	beq.n	8002998 <_printf_common+0xa4>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	6922      	ldr	r2, [r4, #16]
 800295e:	f003 0306 	and.w	r3, r3, #6
 8002962:	2b04      	cmp	r3, #4
 8002964:	bf02      	ittt	eq
 8002966:	68e5      	ldreq	r5, [r4, #12]
 8002968:	6833      	ldreq	r3, [r6, #0]
 800296a:	1aed      	subeq	r5, r5, r3
 800296c:	68a3      	ldr	r3, [r4, #8]
 800296e:	bf0c      	ite	eq
 8002970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002974:	2500      	movne	r5, #0
 8002976:	4293      	cmp	r3, r2
 8002978:	bfc4      	itt	gt
 800297a:	1a9b      	subgt	r3, r3, r2
 800297c:	18ed      	addgt	r5, r5, r3
 800297e:	2600      	movs	r6, #0
 8002980:	341a      	adds	r4, #26
 8002982:	42b5      	cmp	r5, r6
 8002984:	d11a      	bne.n	80029bc <_printf_common+0xc8>
 8002986:	2000      	movs	r0, #0
 8002988:	e008      	b.n	800299c <_printf_common+0xa8>
 800298a:	2301      	movs	r3, #1
 800298c:	4652      	mov	r2, sl
 800298e:	4641      	mov	r1, r8
 8002990:	4638      	mov	r0, r7
 8002992:	47c8      	blx	r9
 8002994:	3001      	adds	r0, #1
 8002996:	d103      	bne.n	80029a0 <_printf_common+0xac>
 8002998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800299c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a0:	3501      	adds	r5, #1
 80029a2:	e7c6      	b.n	8002932 <_printf_common+0x3e>
 80029a4:	18e1      	adds	r1, r4, r3
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	2030      	movs	r0, #48	@ 0x30
 80029aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029ae:	4422      	add	r2, r4
 80029b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80029b8:	3302      	adds	r3, #2
 80029ba:	e7c7      	b.n	800294c <_printf_common+0x58>
 80029bc:	2301      	movs	r3, #1
 80029be:	4622      	mov	r2, r4
 80029c0:	4641      	mov	r1, r8
 80029c2:	4638      	mov	r0, r7
 80029c4:	47c8      	blx	r9
 80029c6:	3001      	adds	r0, #1
 80029c8:	d0e6      	beq.n	8002998 <_printf_common+0xa4>
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7d9      	b.n	8002982 <_printf_common+0x8e>
	...

080029d0 <_printf_i>:
 80029d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	7e0f      	ldrb	r7, [r1, #24]
 80029d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029d8:	2f78      	cmp	r7, #120	@ 0x78
 80029da:	4691      	mov	r9, r2
 80029dc:	4680      	mov	r8, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	469a      	mov	sl, r3
 80029e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029e6:	d807      	bhi.n	80029f8 <_printf_i+0x28>
 80029e8:	2f62      	cmp	r7, #98	@ 0x62
 80029ea:	d80a      	bhi.n	8002a02 <_printf_i+0x32>
 80029ec:	2f00      	cmp	r7, #0
 80029ee:	f000 80d2 	beq.w	8002b96 <_printf_i+0x1c6>
 80029f2:	2f58      	cmp	r7, #88	@ 0x58
 80029f4:	f000 80b9 	beq.w	8002b6a <_printf_i+0x19a>
 80029f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a00:	e03a      	b.n	8002a78 <_printf_i+0xa8>
 8002a02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a06:	2b15      	cmp	r3, #21
 8002a08:	d8f6      	bhi.n	80029f8 <_printf_i+0x28>
 8002a0a:	a101      	add	r1, pc, #4	@ (adr r1, 8002a10 <_printf_i+0x40>)
 8002a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a10:	08002a69 	.word	0x08002a69
 8002a14:	08002a7d 	.word	0x08002a7d
 8002a18:	080029f9 	.word	0x080029f9
 8002a1c:	080029f9 	.word	0x080029f9
 8002a20:	080029f9 	.word	0x080029f9
 8002a24:	080029f9 	.word	0x080029f9
 8002a28:	08002a7d 	.word	0x08002a7d
 8002a2c:	080029f9 	.word	0x080029f9
 8002a30:	080029f9 	.word	0x080029f9
 8002a34:	080029f9 	.word	0x080029f9
 8002a38:	080029f9 	.word	0x080029f9
 8002a3c:	08002b7d 	.word	0x08002b7d
 8002a40:	08002aa7 	.word	0x08002aa7
 8002a44:	08002b37 	.word	0x08002b37
 8002a48:	080029f9 	.word	0x080029f9
 8002a4c:	080029f9 	.word	0x080029f9
 8002a50:	08002b9f 	.word	0x08002b9f
 8002a54:	080029f9 	.word	0x080029f9
 8002a58:	08002aa7 	.word	0x08002aa7
 8002a5c:	080029f9 	.word	0x080029f9
 8002a60:	080029f9 	.word	0x080029f9
 8002a64:	08002b3f 	.word	0x08002b3f
 8002a68:	6833      	ldr	r3, [r6, #0]
 8002a6a:	1d1a      	adds	r2, r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6032      	str	r2, [r6, #0]
 8002a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e09d      	b.n	8002bb8 <_printf_i+0x1e8>
 8002a7c:	6833      	ldr	r3, [r6, #0]
 8002a7e:	6820      	ldr	r0, [r4, #0]
 8002a80:	1d19      	adds	r1, r3, #4
 8002a82:	6031      	str	r1, [r6, #0]
 8002a84:	0606      	lsls	r6, r0, #24
 8002a86:	d501      	bpl.n	8002a8c <_printf_i+0xbc>
 8002a88:	681d      	ldr	r5, [r3, #0]
 8002a8a:	e003      	b.n	8002a94 <_printf_i+0xc4>
 8002a8c:	0645      	lsls	r5, r0, #25
 8002a8e:	d5fb      	bpl.n	8002a88 <_printf_i+0xb8>
 8002a90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a94:	2d00      	cmp	r5, #0
 8002a96:	da03      	bge.n	8002aa0 <_printf_i+0xd0>
 8002a98:	232d      	movs	r3, #45	@ 0x2d
 8002a9a:	426d      	negs	r5, r5
 8002a9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002aa0:	4859      	ldr	r0, [pc, #356]	@ (8002c08 <_printf_i+0x238>)
 8002aa2:	230a      	movs	r3, #10
 8002aa4:	e011      	b.n	8002aca <_printf_i+0xfa>
 8002aa6:	6821      	ldr	r1, [r4, #0]
 8002aa8:	6833      	ldr	r3, [r6, #0]
 8002aaa:	0608      	lsls	r0, r1, #24
 8002aac:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ab0:	d402      	bmi.n	8002ab8 <_printf_i+0xe8>
 8002ab2:	0649      	lsls	r1, r1, #25
 8002ab4:	bf48      	it	mi
 8002ab6:	b2ad      	uxthmi	r5, r5
 8002ab8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002aba:	4853      	ldr	r0, [pc, #332]	@ (8002c08 <_printf_i+0x238>)
 8002abc:	6033      	str	r3, [r6, #0]
 8002abe:	bf14      	ite	ne
 8002ac0:	230a      	movne	r3, #10
 8002ac2:	2308      	moveq	r3, #8
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002aca:	6866      	ldr	r6, [r4, #4]
 8002acc:	60a6      	str	r6, [r4, #8]
 8002ace:	2e00      	cmp	r6, #0
 8002ad0:	bfa2      	ittt	ge
 8002ad2:	6821      	ldrge	r1, [r4, #0]
 8002ad4:	f021 0104 	bicge.w	r1, r1, #4
 8002ad8:	6021      	strge	r1, [r4, #0]
 8002ada:	b90d      	cbnz	r5, 8002ae0 <_printf_i+0x110>
 8002adc:	2e00      	cmp	r6, #0
 8002ade:	d04b      	beq.n	8002b78 <_printf_i+0x1a8>
 8002ae0:	4616      	mov	r6, r2
 8002ae2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ae6:	fb03 5711 	mls	r7, r3, r1, r5
 8002aea:	5dc7      	ldrb	r7, [r0, r7]
 8002aec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002af0:	462f      	mov	r7, r5
 8002af2:	42bb      	cmp	r3, r7
 8002af4:	460d      	mov	r5, r1
 8002af6:	d9f4      	bls.n	8002ae2 <_printf_i+0x112>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d10b      	bne.n	8002b14 <_printf_i+0x144>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	07df      	lsls	r7, r3, #31
 8002b00:	d508      	bpl.n	8002b14 <_printf_i+0x144>
 8002b02:	6923      	ldr	r3, [r4, #16]
 8002b04:	6861      	ldr	r1, [r4, #4]
 8002b06:	4299      	cmp	r1, r3
 8002b08:	bfde      	ittt	le
 8002b0a:	2330      	movle	r3, #48	@ 0x30
 8002b0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b10:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002b14:	1b92      	subs	r2, r2, r6
 8002b16:	6122      	str	r2, [r4, #16]
 8002b18:	f8cd a000 	str.w	sl, [sp]
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	aa03      	add	r2, sp, #12
 8002b20:	4621      	mov	r1, r4
 8002b22:	4640      	mov	r0, r8
 8002b24:	f7ff fee6 	bl	80028f4 <_printf_common>
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d14a      	bne.n	8002bc2 <_printf_i+0x1f2>
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b30:	b004      	add	sp, #16
 8002b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	f043 0320 	orr.w	r3, r3, #32
 8002b3c:	6023      	str	r3, [r4, #0]
 8002b3e:	4833      	ldr	r0, [pc, #204]	@ (8002c0c <_printf_i+0x23c>)
 8002b40:	2778      	movs	r7, #120	@ 0x78
 8002b42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	6831      	ldr	r1, [r6, #0]
 8002b4a:	061f      	lsls	r7, r3, #24
 8002b4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b50:	d402      	bmi.n	8002b58 <_printf_i+0x188>
 8002b52:	065f      	lsls	r7, r3, #25
 8002b54:	bf48      	it	mi
 8002b56:	b2ad      	uxthmi	r5, r5
 8002b58:	6031      	str	r1, [r6, #0]
 8002b5a:	07d9      	lsls	r1, r3, #31
 8002b5c:	bf44      	itt	mi
 8002b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8002b62:	6023      	strmi	r3, [r4, #0]
 8002b64:	b11d      	cbz	r5, 8002b6e <_printf_i+0x19e>
 8002b66:	2310      	movs	r3, #16
 8002b68:	e7ac      	b.n	8002ac4 <_printf_i+0xf4>
 8002b6a:	4827      	ldr	r0, [pc, #156]	@ (8002c08 <_printf_i+0x238>)
 8002b6c:	e7e9      	b.n	8002b42 <_printf_i+0x172>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f023 0320 	bic.w	r3, r3, #32
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	e7f6      	b.n	8002b66 <_printf_i+0x196>
 8002b78:	4616      	mov	r6, r2
 8002b7a:	e7bd      	b.n	8002af8 <_printf_i+0x128>
 8002b7c:	6833      	ldr	r3, [r6, #0]
 8002b7e:	6825      	ldr	r5, [r4, #0]
 8002b80:	6961      	ldr	r1, [r4, #20]
 8002b82:	1d18      	adds	r0, r3, #4
 8002b84:	6030      	str	r0, [r6, #0]
 8002b86:	062e      	lsls	r6, r5, #24
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	d501      	bpl.n	8002b90 <_printf_i+0x1c0>
 8002b8c:	6019      	str	r1, [r3, #0]
 8002b8e:	e002      	b.n	8002b96 <_printf_i+0x1c6>
 8002b90:	0668      	lsls	r0, r5, #25
 8002b92:	d5fb      	bpl.n	8002b8c <_printf_i+0x1bc>
 8002b94:	8019      	strh	r1, [r3, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	6123      	str	r3, [r4, #16]
 8002b9a:	4616      	mov	r6, r2
 8002b9c:	e7bc      	b.n	8002b18 <_printf_i+0x148>
 8002b9e:	6833      	ldr	r3, [r6, #0]
 8002ba0:	1d1a      	adds	r2, r3, #4
 8002ba2:	6032      	str	r2, [r6, #0]
 8002ba4:	681e      	ldr	r6, [r3, #0]
 8002ba6:	6862      	ldr	r2, [r4, #4]
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4630      	mov	r0, r6
 8002bac:	f7fd fb10 	bl	80001d0 <memchr>
 8002bb0:	b108      	cbz	r0, 8002bb6 <_printf_i+0x1e6>
 8002bb2:	1b80      	subs	r0, r0, r6
 8002bb4:	6060      	str	r0, [r4, #4]
 8002bb6:	6863      	ldr	r3, [r4, #4]
 8002bb8:	6123      	str	r3, [r4, #16]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bc0:	e7aa      	b.n	8002b18 <_printf_i+0x148>
 8002bc2:	6923      	ldr	r3, [r4, #16]
 8002bc4:	4632      	mov	r2, r6
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	4640      	mov	r0, r8
 8002bca:	47d0      	blx	sl
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d0ad      	beq.n	8002b2c <_printf_i+0x15c>
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	079b      	lsls	r3, r3, #30
 8002bd4:	d413      	bmi.n	8002bfe <_printf_i+0x22e>
 8002bd6:	68e0      	ldr	r0, [r4, #12]
 8002bd8:	9b03      	ldr	r3, [sp, #12]
 8002bda:	4298      	cmp	r0, r3
 8002bdc:	bfb8      	it	lt
 8002bde:	4618      	movlt	r0, r3
 8002be0:	e7a6      	b.n	8002b30 <_printf_i+0x160>
 8002be2:	2301      	movs	r3, #1
 8002be4:	4632      	mov	r2, r6
 8002be6:	4649      	mov	r1, r9
 8002be8:	4640      	mov	r0, r8
 8002bea:	47d0      	blx	sl
 8002bec:	3001      	adds	r0, #1
 8002bee:	d09d      	beq.n	8002b2c <_printf_i+0x15c>
 8002bf0:	3501      	adds	r5, #1
 8002bf2:	68e3      	ldr	r3, [r4, #12]
 8002bf4:	9903      	ldr	r1, [sp, #12]
 8002bf6:	1a5b      	subs	r3, r3, r1
 8002bf8:	42ab      	cmp	r3, r5
 8002bfa:	dcf2      	bgt.n	8002be2 <_printf_i+0x212>
 8002bfc:	e7eb      	b.n	8002bd6 <_printf_i+0x206>
 8002bfe:	2500      	movs	r5, #0
 8002c00:	f104 0619 	add.w	r6, r4, #25
 8002c04:	e7f5      	b.n	8002bf2 <_printf_i+0x222>
 8002c06:	bf00      	nop
 8002c08:	080031d1 	.word	0x080031d1
 8002c0c:	080031e2 	.word	0x080031e2

08002c10 <__sflush_r>:
 8002c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c18:	0716      	lsls	r6, r2, #28
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	d454      	bmi.n	8002cca <__sflush_r+0xba>
 8002c20:	684b      	ldr	r3, [r1, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	dc02      	bgt.n	8002c2c <__sflush_r+0x1c>
 8002c26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	dd48      	ble.n	8002cbe <__sflush_r+0xae>
 8002c2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c2e:	2e00      	cmp	r6, #0
 8002c30:	d045      	beq.n	8002cbe <__sflush_r+0xae>
 8002c32:	2300      	movs	r3, #0
 8002c34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002c38:	682f      	ldr	r7, [r5, #0]
 8002c3a:	6a21      	ldr	r1, [r4, #32]
 8002c3c:	602b      	str	r3, [r5, #0]
 8002c3e:	d030      	beq.n	8002ca2 <__sflush_r+0x92>
 8002c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c42:	89a3      	ldrh	r3, [r4, #12]
 8002c44:	0759      	lsls	r1, r3, #29
 8002c46:	d505      	bpl.n	8002c54 <__sflush_r+0x44>
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c4e:	b10b      	cbz	r3, 8002c54 <__sflush_r+0x44>
 8002c50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c52:	1ad2      	subs	r2, r2, r3
 8002c54:	2300      	movs	r3, #0
 8002c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c58:	6a21      	ldr	r1, [r4, #32]
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	47b0      	blx	r6
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	d106      	bne.n	8002c72 <__sflush_r+0x62>
 8002c64:	6829      	ldr	r1, [r5, #0]
 8002c66:	291d      	cmp	r1, #29
 8002c68:	d82b      	bhi.n	8002cc2 <__sflush_r+0xb2>
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d14 <__sflush_r+0x104>)
 8002c6c:	410a      	asrs	r2, r1
 8002c6e:	07d6      	lsls	r6, r2, #31
 8002c70:	d427      	bmi.n	8002cc2 <__sflush_r+0xb2>
 8002c72:	2200      	movs	r2, #0
 8002c74:	6062      	str	r2, [r4, #4]
 8002c76:	04d9      	lsls	r1, r3, #19
 8002c78:	6922      	ldr	r2, [r4, #16]
 8002c7a:	6022      	str	r2, [r4, #0]
 8002c7c:	d504      	bpl.n	8002c88 <__sflush_r+0x78>
 8002c7e:	1c42      	adds	r2, r0, #1
 8002c80:	d101      	bne.n	8002c86 <__sflush_r+0x76>
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	b903      	cbnz	r3, 8002c88 <__sflush_r+0x78>
 8002c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c8a:	602f      	str	r7, [r5, #0]
 8002c8c:	b1b9      	cbz	r1, 8002cbe <__sflush_r+0xae>
 8002c8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c92:	4299      	cmp	r1, r3
 8002c94:	d002      	beq.n	8002c9c <__sflush_r+0x8c>
 8002c96:	4628      	mov	r0, r5
 8002c98:	f000 fa24 	bl	80030e4 <_free_r>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ca0:	e00d      	b.n	8002cbe <__sflush_r+0xae>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	47b0      	blx	r6
 8002ca8:	4602      	mov	r2, r0
 8002caa:	1c50      	adds	r0, r2, #1
 8002cac:	d1c9      	bne.n	8002c42 <__sflush_r+0x32>
 8002cae:	682b      	ldr	r3, [r5, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0c6      	beq.n	8002c42 <__sflush_r+0x32>
 8002cb4:	2b1d      	cmp	r3, #29
 8002cb6:	d001      	beq.n	8002cbc <__sflush_r+0xac>
 8002cb8:	2b16      	cmp	r3, #22
 8002cba:	d11e      	bne.n	8002cfa <__sflush_r+0xea>
 8002cbc:	602f      	str	r7, [r5, #0]
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	e022      	b.n	8002d08 <__sflush_r+0xf8>
 8002cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	e01b      	b.n	8002d02 <__sflush_r+0xf2>
 8002cca:	690f      	ldr	r7, [r1, #16]
 8002ccc:	2f00      	cmp	r7, #0
 8002cce:	d0f6      	beq.n	8002cbe <__sflush_r+0xae>
 8002cd0:	0793      	lsls	r3, r2, #30
 8002cd2:	680e      	ldr	r6, [r1, #0]
 8002cd4:	bf08      	it	eq
 8002cd6:	694b      	ldreq	r3, [r1, #20]
 8002cd8:	600f      	str	r7, [r1, #0]
 8002cda:	bf18      	it	ne
 8002cdc:	2300      	movne	r3, #0
 8002cde:	eba6 0807 	sub.w	r8, r6, r7
 8002ce2:	608b      	str	r3, [r1, #8]
 8002ce4:	f1b8 0f00 	cmp.w	r8, #0
 8002ce8:	dde9      	ble.n	8002cbe <__sflush_r+0xae>
 8002cea:	6a21      	ldr	r1, [r4, #32]
 8002cec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002cee:	4643      	mov	r3, r8
 8002cf0:	463a      	mov	r2, r7
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	47b0      	blx	r6
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	dc08      	bgt.n	8002d0c <__sflush_r+0xfc>
 8002cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d02:	81a3      	strh	r3, [r4, #12]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d0c:	4407      	add	r7, r0
 8002d0e:	eba8 0800 	sub.w	r8, r8, r0
 8002d12:	e7e7      	b.n	8002ce4 <__sflush_r+0xd4>
 8002d14:	dfbffffe 	.word	0xdfbffffe

08002d18 <_fflush_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	690b      	ldr	r3, [r1, #16]
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	b913      	cbnz	r3, 8002d28 <_fflush_r+0x10>
 8002d22:	2500      	movs	r5, #0
 8002d24:	4628      	mov	r0, r5
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
 8002d28:	b118      	cbz	r0, 8002d32 <_fflush_r+0x1a>
 8002d2a:	6a03      	ldr	r3, [r0, #32]
 8002d2c:	b90b      	cbnz	r3, 8002d32 <_fflush_r+0x1a>
 8002d2e:	f7ff fb81 	bl	8002434 <__sinit>
 8002d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f3      	beq.n	8002d22 <_fflush_r+0xa>
 8002d3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d3c:	07d0      	lsls	r0, r2, #31
 8002d3e:	d404      	bmi.n	8002d4a <_fflush_r+0x32>
 8002d40:	0599      	lsls	r1, r3, #22
 8002d42:	d402      	bmi.n	8002d4a <_fflush_r+0x32>
 8002d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d46:	f7ff fbf0 	bl	800252a <__retarget_lock_acquire_recursive>
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	f7ff ff5f 	bl	8002c10 <__sflush_r>
 8002d52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d54:	07da      	lsls	r2, r3, #31
 8002d56:	4605      	mov	r5, r0
 8002d58:	d4e4      	bmi.n	8002d24 <_fflush_r+0xc>
 8002d5a:	89a3      	ldrh	r3, [r4, #12]
 8002d5c:	059b      	lsls	r3, r3, #22
 8002d5e:	d4e1      	bmi.n	8002d24 <_fflush_r+0xc>
 8002d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d62:	f7ff fbe3 	bl	800252c <__retarget_lock_release_recursive>
 8002d66:	e7dd      	b.n	8002d24 <_fflush_r+0xc>

08002d68 <__malloc_lock>:
 8002d68:	4801      	ldr	r0, [pc, #4]	@ (8002d70 <__malloc_lock+0x8>)
 8002d6a:	f7ff bbde 	b.w	800252a <__retarget_lock_acquire_recursive>
 8002d6e:	bf00      	nop
 8002d70:	200001c8 	.word	0x200001c8

08002d74 <__malloc_unlock>:
 8002d74:	4801      	ldr	r0, [pc, #4]	@ (8002d7c <__malloc_unlock+0x8>)
 8002d76:	f7ff bbd9 	b.w	800252c <__retarget_lock_release_recursive>
 8002d7a:	bf00      	nop
 8002d7c:	200001c8 	.word	0x200001c8

08002d80 <__sread>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	460c      	mov	r4, r1
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	f000 f978 	bl	800307c <_read_r>
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	bfab      	itete	ge
 8002d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d92:	89a3      	ldrhlt	r3, [r4, #12]
 8002d94:	181b      	addge	r3, r3, r0
 8002d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d9a:	bfac      	ite	ge
 8002d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d9e:	81a3      	strhlt	r3, [r4, #12]
 8002da0:	bd10      	pop	{r4, pc}

08002da2 <__swrite>:
 8002da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da6:	461f      	mov	r7, r3
 8002da8:	898b      	ldrh	r3, [r1, #12]
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	4605      	mov	r5, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	4616      	mov	r6, r2
 8002db2:	d505      	bpl.n	8002dc0 <__swrite+0x1e>
 8002db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db8:	2302      	movs	r3, #2
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f000 f94c 	bl	8003058 <_lseek_r>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dca:	81a3      	strh	r3, [r4, #12]
 8002dcc:	4632      	mov	r2, r6
 8002dce:	463b      	mov	r3, r7
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd6:	f000 b973 	b.w	80030c0 <_write_r>

08002dda <__sseek>:
 8002dda:	b510      	push	{r4, lr}
 8002ddc:	460c      	mov	r4, r1
 8002dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002de2:	f000 f939 	bl	8003058 <_lseek_r>
 8002de6:	1c43      	adds	r3, r0, #1
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	bf15      	itete	ne
 8002dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002df6:	81a3      	strheq	r3, [r4, #12]
 8002df8:	bf18      	it	ne
 8002dfa:	81a3      	strhne	r3, [r4, #12]
 8002dfc:	bd10      	pop	{r4, pc}

08002dfe <__sclose>:
 8002dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e02:	f000 b8f7 	b.w	8002ff4 <_close_r>

08002e06 <__swbuf_r>:
 8002e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e08:	460e      	mov	r6, r1
 8002e0a:	4614      	mov	r4, r2
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	b118      	cbz	r0, 8002e18 <__swbuf_r+0x12>
 8002e10:	6a03      	ldr	r3, [r0, #32]
 8002e12:	b90b      	cbnz	r3, 8002e18 <__swbuf_r+0x12>
 8002e14:	f7ff fb0e 	bl	8002434 <__sinit>
 8002e18:	69a3      	ldr	r3, [r4, #24]
 8002e1a:	60a3      	str	r3, [r4, #8]
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	071a      	lsls	r2, r3, #28
 8002e20:	d501      	bpl.n	8002e26 <__swbuf_r+0x20>
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	b943      	cbnz	r3, 8002e38 <__swbuf_r+0x32>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f82b 	bl	8002e84 <__swsetup_r>
 8002e2e:	b118      	cbz	r0, 8002e38 <__swbuf_r+0x32>
 8002e30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002e34:	4638      	mov	r0, r7
 8002e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	6922      	ldr	r2, [r4, #16]
 8002e3c:	1a98      	subs	r0, r3, r2
 8002e3e:	6963      	ldr	r3, [r4, #20]
 8002e40:	b2f6      	uxtb	r6, r6
 8002e42:	4283      	cmp	r3, r0
 8002e44:	4637      	mov	r7, r6
 8002e46:	dc05      	bgt.n	8002e54 <__swbuf_r+0x4e>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f7ff ff64 	bl	8002d18 <_fflush_r>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d1ed      	bne.n	8002e30 <__swbuf_r+0x2a>
 8002e54:	68a3      	ldr	r3, [r4, #8]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60a3      	str	r3, [r4, #8]
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	6022      	str	r2, [r4, #0]
 8002e60:	701e      	strb	r6, [r3, #0]
 8002e62:	6962      	ldr	r2, [r4, #20]
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d004      	beq.n	8002e74 <__swbuf_r+0x6e>
 8002e6a:	89a3      	ldrh	r3, [r4, #12]
 8002e6c:	07db      	lsls	r3, r3, #31
 8002e6e:	d5e1      	bpl.n	8002e34 <__swbuf_r+0x2e>
 8002e70:	2e0a      	cmp	r6, #10
 8002e72:	d1df      	bne.n	8002e34 <__swbuf_r+0x2e>
 8002e74:	4621      	mov	r1, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	f7ff ff4e 	bl	8002d18 <_fflush_r>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d0d9      	beq.n	8002e34 <__swbuf_r+0x2e>
 8002e80:	e7d6      	b.n	8002e30 <__swbuf_r+0x2a>
	...

08002e84 <__swsetup_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4b29      	ldr	r3, [pc, #164]	@ (8002f2c <__swsetup_r+0xa8>)
 8002e88:	4605      	mov	r5, r0
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	b118      	cbz	r0, 8002e98 <__swsetup_r+0x14>
 8002e90:	6a03      	ldr	r3, [r0, #32]
 8002e92:	b90b      	cbnz	r3, 8002e98 <__swsetup_r+0x14>
 8002e94:	f7ff face 	bl	8002434 <__sinit>
 8002e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e9c:	0719      	lsls	r1, r3, #28
 8002e9e:	d422      	bmi.n	8002ee6 <__swsetup_r+0x62>
 8002ea0:	06da      	lsls	r2, r3, #27
 8002ea2:	d407      	bmi.n	8002eb4 <__swsetup_r+0x30>
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	602a      	str	r2, [r5, #0]
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eac:	81a3      	strh	r3, [r4, #12]
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002eb2:	e033      	b.n	8002f1c <__swsetup_r+0x98>
 8002eb4:	0758      	lsls	r0, r3, #29
 8002eb6:	d512      	bpl.n	8002ede <__swsetup_r+0x5a>
 8002eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002eba:	b141      	cbz	r1, 8002ece <__swsetup_r+0x4a>
 8002ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ec0:	4299      	cmp	r1, r3
 8002ec2:	d002      	beq.n	8002eca <__swsetup_r+0x46>
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	f000 f90d 	bl	80030e4 <_free_r>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ed4:	81a3      	strh	r3, [r4, #12]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6063      	str	r3, [r4, #4]
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	6023      	str	r3, [r4, #0]
 8002ede:	89a3      	ldrh	r3, [r4, #12]
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	81a3      	strh	r3, [r4, #12]
 8002ee6:	6923      	ldr	r3, [r4, #16]
 8002ee8:	b94b      	cbnz	r3, 8002efe <__swsetup_r+0x7a>
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d003      	beq.n	8002efe <__swsetup_r+0x7a>
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 f83f 	bl	8002f7c <__smakebuf_r>
 8002efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f02:	f013 0201 	ands.w	r2, r3, #1
 8002f06:	d00a      	beq.n	8002f1e <__swsetup_r+0x9a>
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60a2      	str	r2, [r4, #8]
 8002f0c:	6962      	ldr	r2, [r4, #20]
 8002f0e:	4252      	negs	r2, r2
 8002f10:	61a2      	str	r2, [r4, #24]
 8002f12:	6922      	ldr	r2, [r4, #16]
 8002f14:	b942      	cbnz	r2, 8002f28 <__swsetup_r+0xa4>
 8002f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f1a:	d1c5      	bne.n	8002ea8 <__swsetup_r+0x24>
 8002f1c:	bd38      	pop	{r3, r4, r5, pc}
 8002f1e:	0799      	lsls	r1, r3, #30
 8002f20:	bf58      	it	pl
 8002f22:	6962      	ldrpl	r2, [r4, #20]
 8002f24:	60a2      	str	r2, [r4, #8]
 8002f26:	e7f4      	b.n	8002f12 <__swsetup_r+0x8e>
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e7f7      	b.n	8002f1c <__swsetup_r+0x98>
 8002f2c:	20000018 	.word	0x20000018

08002f30 <__swhatbuf_r>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	460c      	mov	r4, r1
 8002f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	b096      	sub	sp, #88	@ 0x58
 8002f3c:	4615      	mov	r5, r2
 8002f3e:	461e      	mov	r6, r3
 8002f40:	da0d      	bge.n	8002f5e <__swhatbuf_r+0x2e>
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002f48:	f04f 0100 	mov.w	r1, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2340      	movne	r3, #64	@ 0x40
 8002f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002f54:	2000      	movs	r0, #0
 8002f56:	6031      	str	r1, [r6, #0]
 8002f58:	602b      	str	r3, [r5, #0]
 8002f5a:	b016      	add	sp, #88	@ 0x58
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	466a      	mov	r2, sp
 8002f60:	f000 f858 	bl	8003014 <_fstat_r>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	dbec      	blt.n	8002f42 <__swhatbuf_r+0x12>
 8002f68:	9901      	ldr	r1, [sp, #4]
 8002f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002f72:	4259      	negs	r1, r3
 8002f74:	4159      	adcs	r1, r3
 8002f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f7a:	e7eb      	b.n	8002f54 <__swhatbuf_r+0x24>

08002f7c <__smakebuf_r>:
 8002f7c:	898b      	ldrh	r3, [r1, #12]
 8002f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f80:	079d      	lsls	r5, r3, #30
 8002f82:	4606      	mov	r6, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	d507      	bpl.n	8002f98 <__smakebuf_r+0x1c>
 8002f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002f8c:	6023      	str	r3, [r4, #0]
 8002f8e:	6123      	str	r3, [r4, #16]
 8002f90:	2301      	movs	r3, #1
 8002f92:	6163      	str	r3, [r4, #20]
 8002f94:	b003      	add	sp, #12
 8002f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f98:	ab01      	add	r3, sp, #4
 8002f9a:	466a      	mov	r2, sp
 8002f9c:	f7ff ffc8 	bl	8002f30 <__swhatbuf_r>
 8002fa0:	9f00      	ldr	r7, [sp, #0]
 8002fa2:	4605      	mov	r5, r0
 8002fa4:	4639      	mov	r1, r7
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	f7ff fc24 	bl	80027f4 <_malloc_r>
 8002fac:	b948      	cbnz	r0, 8002fc2 <__smakebuf_r+0x46>
 8002fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fb2:	059a      	lsls	r2, r3, #22
 8002fb4:	d4ee      	bmi.n	8002f94 <__smakebuf_r+0x18>
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	81a3      	strh	r3, [r4, #12]
 8002fc0:	e7e2      	b.n	8002f88 <__smakebuf_r+0xc>
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	6020      	str	r0, [r4, #0]
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fca:	81a3      	strh	r3, [r4, #12]
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002fd2:	b15b      	cbz	r3, 8002fec <__smakebuf_r+0x70>
 8002fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f000 f82d 	bl	8003038 <_isatty_r>
 8002fde:	b128      	cbz	r0, 8002fec <__smakebuf_r+0x70>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	81a3      	strh	r3, [r4, #12]
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	431d      	orrs	r5, r3
 8002ff0:	81a5      	strh	r5, [r4, #12]
 8002ff2:	e7cf      	b.n	8002f94 <__smakebuf_r+0x18>

08002ff4 <_close_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4d06      	ldr	r5, [pc, #24]	@ (8003010 <_close_r+0x1c>)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	f7fd fbea 	bl	80007d8 <_close>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_close_r+0x1a>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_close_r+0x1a>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	200001d4 	.word	0x200001d4

08003014 <_fstat_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4d07      	ldr	r5, [pc, #28]	@ (8003034 <_fstat_r+0x20>)
 8003018:	2300      	movs	r3, #0
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	602b      	str	r3, [r5, #0]
 8003022:	f7fd fbe5 	bl	80007f0 <_fstat>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	d102      	bne.n	8003030 <_fstat_r+0x1c>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	b103      	cbz	r3, 8003030 <_fstat_r+0x1c>
 800302e:	6023      	str	r3, [r4, #0]
 8003030:	bd38      	pop	{r3, r4, r5, pc}
 8003032:	bf00      	nop
 8003034:	200001d4 	.word	0x200001d4

08003038 <_isatty_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4d06      	ldr	r5, [pc, #24]	@ (8003054 <_isatty_r+0x1c>)
 800303c:	2300      	movs	r3, #0
 800303e:	4604      	mov	r4, r0
 8003040:	4608      	mov	r0, r1
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	f7fd fbe4 	bl	8000810 <_isatty>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d102      	bne.n	8003052 <_isatty_r+0x1a>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	b103      	cbz	r3, 8003052 <_isatty_r+0x1a>
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	200001d4 	.word	0x200001d4

08003058 <_lseek_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4d07      	ldr	r5, [pc, #28]	@ (8003078 <_lseek_r+0x20>)
 800305c:	4604      	mov	r4, r0
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	2200      	movs	r2, #0
 8003064:	602a      	str	r2, [r5, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	f7fd fbdd 	bl	8000826 <_lseek>
 800306c:	1c43      	adds	r3, r0, #1
 800306e:	d102      	bne.n	8003076 <_lseek_r+0x1e>
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	b103      	cbz	r3, 8003076 <_lseek_r+0x1e>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	200001d4 	.word	0x200001d4

0800307c <_read_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4d07      	ldr	r5, [pc, #28]	@ (800309c <_read_r+0x20>)
 8003080:	4604      	mov	r4, r0
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	2200      	movs	r2, #0
 8003088:	602a      	str	r2, [r5, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f7fd fb6b 	bl	8000766 <_read>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_read_r+0x1e>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b103      	cbz	r3, 800309a <_read_r+0x1e>
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	200001d4 	.word	0x200001d4

080030a0 <_sbrk_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	4d06      	ldr	r5, [pc, #24]	@ (80030bc <_sbrk_r+0x1c>)
 80030a4:	2300      	movs	r3, #0
 80030a6:	4604      	mov	r4, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	602b      	str	r3, [r5, #0]
 80030ac:	f7fd fbc8 	bl	8000840 <_sbrk>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_sbrk_r+0x1a>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_sbrk_r+0x1a>
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	200001d4 	.word	0x200001d4

080030c0 <_write_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4d07      	ldr	r5, [pc, #28]	@ (80030e0 <_write_r+0x20>)
 80030c4:	4604      	mov	r4, r0
 80030c6:	4608      	mov	r0, r1
 80030c8:	4611      	mov	r1, r2
 80030ca:	2200      	movs	r2, #0
 80030cc:	602a      	str	r2, [r5, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f7fd fb66 	bl	80007a0 <_write>
 80030d4:	1c43      	adds	r3, r0, #1
 80030d6:	d102      	bne.n	80030de <_write_r+0x1e>
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	b103      	cbz	r3, 80030de <_write_r+0x1e>
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	bd38      	pop	{r3, r4, r5, pc}
 80030e0:	200001d4 	.word	0x200001d4

080030e4 <_free_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	4605      	mov	r5, r0
 80030e8:	2900      	cmp	r1, #0
 80030ea:	d041      	beq.n	8003170 <_free_r+0x8c>
 80030ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030f0:	1f0c      	subs	r4, r1, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bfb8      	it	lt
 80030f6:	18e4      	addlt	r4, r4, r3
 80030f8:	f7ff fe36 	bl	8002d68 <__malloc_lock>
 80030fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003174 <_free_r+0x90>)
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	b933      	cbnz	r3, 8003110 <_free_r+0x2c>
 8003102:	6063      	str	r3, [r4, #4]
 8003104:	6014      	str	r4, [r2, #0]
 8003106:	4628      	mov	r0, r5
 8003108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800310c:	f7ff be32 	b.w	8002d74 <__malloc_unlock>
 8003110:	42a3      	cmp	r3, r4
 8003112:	d908      	bls.n	8003126 <_free_r+0x42>
 8003114:	6820      	ldr	r0, [r4, #0]
 8003116:	1821      	adds	r1, r4, r0
 8003118:	428b      	cmp	r3, r1
 800311a:	bf01      	itttt	eq
 800311c:	6819      	ldreq	r1, [r3, #0]
 800311e:	685b      	ldreq	r3, [r3, #4]
 8003120:	1809      	addeq	r1, r1, r0
 8003122:	6021      	streq	r1, [r4, #0]
 8003124:	e7ed      	b.n	8003102 <_free_r+0x1e>
 8003126:	461a      	mov	r2, r3
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	b10b      	cbz	r3, 8003130 <_free_r+0x4c>
 800312c:	42a3      	cmp	r3, r4
 800312e:	d9fa      	bls.n	8003126 <_free_r+0x42>
 8003130:	6811      	ldr	r1, [r2, #0]
 8003132:	1850      	adds	r0, r2, r1
 8003134:	42a0      	cmp	r0, r4
 8003136:	d10b      	bne.n	8003150 <_free_r+0x6c>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	4401      	add	r1, r0
 800313c:	1850      	adds	r0, r2, r1
 800313e:	4283      	cmp	r3, r0
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	d1e0      	bne.n	8003106 <_free_r+0x22>
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	6053      	str	r3, [r2, #4]
 800314a:	4408      	add	r0, r1
 800314c:	6010      	str	r0, [r2, #0]
 800314e:	e7da      	b.n	8003106 <_free_r+0x22>
 8003150:	d902      	bls.n	8003158 <_free_r+0x74>
 8003152:	230c      	movs	r3, #12
 8003154:	602b      	str	r3, [r5, #0]
 8003156:	e7d6      	b.n	8003106 <_free_r+0x22>
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	1821      	adds	r1, r4, r0
 800315c:	428b      	cmp	r3, r1
 800315e:	bf04      	itt	eq
 8003160:	6819      	ldreq	r1, [r3, #0]
 8003162:	685b      	ldreq	r3, [r3, #4]
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	bf04      	itt	eq
 8003168:	1809      	addeq	r1, r1, r0
 800316a:	6021      	streq	r1, [r4, #0]
 800316c:	6054      	str	r4, [r2, #4]
 800316e:	e7ca      	b.n	8003106 <_free_r+0x22>
 8003170:	bd38      	pop	{r3, r4, r5, pc}
 8003172:	bf00      	nop
 8003174:	200001d0 	.word	0x200001d0

08003178 <_init>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr

08003184 <_fini>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr
